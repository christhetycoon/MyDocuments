%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 12.0.0
%%For: (AG) (AG)
%%Title: (Glass_heart.eps)
%%CreationDate: 1/29/2008 12:23 AM
%%BoundingBox: 0 0 596 842
%%HiResBoundingBox: 0 0 595.2754 841.8896
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKCustomColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 298.5 420.3896 298.5 420.3896
%AI3_TileBox: 12.2778 12.3449 582.9978 829.5449
%AI3_DocumentPreview: Header
%AI5_ArtSize: 595.2756 841.8898
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 2
%AI8_OpenToView: -1213 1391.8896 0.5 1668 932 18 0 0 9 75 0 0
%AI5_OpenViewLayers: 77
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
5 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 0 2 Bd
[
<
3C3C3C3D3D3D3E3E3E3F3E3F403F4040404141414142424243424342434343434443444444444544
45454545444545444545454545454545454545454545454545454545464646464646474747474747
4848484848484848484949494949494A4A4A4A4A4B4B4B4C4C4D
>
<
AFB0B1B2B3B4B5B6B7B8BAB9BABBBCBDBFC0C1C2C3C4C5C6C7C8C9CBCCCDCECFCECFD0D1D2D3D4D5
D6D7D8D9DADBDCDEDFE0E1E2E3E3E4E4E6E6E7E8E9EAEBECEDEEEFF0F1F2F3F3F4F5F5F6F7F8F9FA
FAFBFCFCFDFDFDFEFEFFFFFFFFFFFFFFFFFFFFFFFEFEFDFDFDFD
>
<
6C6D6E6F707273747576787A7B7D7E7F818283858687898A8B8D8E8F9192949597989A9B9D9FA0A2
A3A5A7A8AAABADAFB0B1B3B5B6BBBCBEC0C2C3C5C7C8CBCDCFD1D3D6D8DADDDFE1E5E7E9ECEFF1F4
F6F9FBFCFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
0506060707080809090A0A0B0C0D0E0F0F1011111213141516171818191A1B1C1D1E1F2021222324
25262728292A2B2C2D2F2F3032333435363739393A3C3C3D3E3F40404243434546464849494A4C4C
4D4D4F5151525454565757595A5A5C5D5D5F5F61626264666667
>
<
BCBBBBBAB9B9B8B7B7B6B6B5B4B4B3B2B2B1B0B0AFAEAEADACACABABAAA9A9A8A7A7A6A5A5A4A3A3
A2A1A1A0A09F9E9E9D9C9C9B9A9A9998989796969594949393929191908F8F8E8D8D8C8B8B8A8989
88888786868584848382828180807F7E7E7D7D7C7B7B7A797978
>
<
67666564636261605F5E5D5D5C5B5A595857565554535251504F4E4D4C4B4A494948474645444342
41403F3E3D3C3B3A39383736353534333231302F2E2D2C2B2A29282726252423222121201F1E1D1C
1B1A191817161514131211100F0E0D0D0C0B0A09080706050403
>
<
7574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E
4D4C4B4A4948474645444342413F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928272625
24232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B
>
4 %_Br
[
0.301961 0.992157 1 0.403922 0.470588 0.011765 0.043137 2 50 100 %_BS
%_0.301961 0.992157 1 0.403922 0.470588 0.011765 0.043137 2 50 100 Bs
0.235294 0.686275 0.423529 0.019608 0.737255 0.403922 0.458824 2 50 47.191 %_BS
%_0.235294 0.686275 0.423529 0.019608 0.737255 0.403922 0.458824 2 50 47.191 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 2)
(Unnamed gradient 2) 0 3 Bd
[
<
504F4F4F4E4E4E4E4D4D4D4C4C4C4C4C4B4B4B4B4B4B4B4B4B4A4B4A4A4A4A4A4A4A4A4A4A4A4A4A
4A4A4A4A4A4B4B4B4B4B4C4C4B4C4C4D4D
>
<
D6D7D8DADBDCDDDEDFE1E1E3E4E5E6E7E8EAEAECEDEDEFEFF1F2F3F4F5F6F7F7F8F9FAFAFBFCFCFD
FDFEFEFEFFFFFFFEFEFEFDFDFDFDFDFDFD
>
<
A9ABACAEB0B2B4B5B7B9BBBDBFC0C3C4C6C9CACDCFD0D3D4D7D9DBDEE2E8EBEDF0F3F5F8FBFCFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
3F3F41414243444646464848494A4B4C4C4D4E4E4F505052525254545456565758585959595B5B5D
5D5D5E5E5F606062626264646466666767
>
<
8D8D8C8C8C8B8B8A8A8A8989898888878787868686858584848483838382828181818080807F7F7E
7E7E7D7D7D7C7C7B7B7B7A7A7A79797878
>
<
3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514
131211100F0E0D0C0B0A09080706050403
>
<
44434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A2928262524232221201F1E1D1C
1B1A191817161514131211100F0E0D0C0B
>
4 %_Br
<
3C3C3D3E3E3F40404142424344444545464747484849494949494A4A4A4B4B4B4C4C4D4D4D4D4E4E
4E4E4F4F4F4F4F5050
>
<
AFB0B1B2B3B4B3B4B5B6B7B8B9BABBBCBDBEBEBFBFC0C1C2C3C4C5C6C7C8C7C8C9CACBCCCDCECFD0
D0D1D2D2D3D3D4D5D6
>
<
6C6D6E6F70717374767778797A7B7D7E7F80828384858687898C8E8F90919394959798999A9C9D9E
9FA0A1A3A4A6A7A8A9
>
<
050606070808090A0B0C0D0E0F0F10111214151617181A1B1B1D1E1F212224252628292B2C2E2F31
32343537383A3B3D3F
>
<
BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A5A4A3A2A1A09F9E9D9C9B9A99989796
9594939291908F8E8D
>
<
6766656463626261605F5E5D5C5B5A59585757565554535251504F4E4D4C4C4B4A49484746454443
424141403F3E3D3C3B
>
<
7574737271706F6E6D6C6B6A696867666564636261605F5E5D5B5A595857565554535251504F4E4D
4C4B4A494847464544
>
4 %_Br
[
0.301961 0.992157 1 0.403922 0.470588 0.011765 0.043137 2 50 97.191 %_BS
%_0.301961 0.992157 1 0.403922 0.470588 0.011765 0.043137 2 50 97.191 Bs
0.313726 0.839216 0.662745 0.247059 0.552941 0.231373 0.266667 2 50 61.236 %_BS
%_0.313726 0.839216 0.662745 0.247059 0.552941 0.231373 0.266667 2 50 61.236 Bs
0.235294 0.686275 0.423529 0.019608 0.737255 0.403922 0.458824 2 50 8.98876 %_BS
%_0.235294 0.686275 0.423529 0.019608 0.737255 0.403922 0.458824 2 50 8.98876 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 2 Bd
[
<
0000010102030404040506070708090A0B0C0D0E0E0F101112131415161718191A1A1B1C1D1D1F20
212223242525262728292A2B2D2E2F303133333435363738393A3C3D3E3F40404142444546474849
4B4C4D4E4E4F50525354555758595B5C5D5D5E5F60616263646567686969696A6B6C6D6E6E6F7071
727373747475767778797A7B7B7C7D7D7D7E7F808081828383848586858687878889898A8B8B8C8D
8D8C8D8D8E8F8F909090919192929191929293939394949696969795969696969797979798989898
9797979797979798989898989696979797979798989899999998989999999A9B9B9C9D9E9FA09FA0
A1A1A2A3A5
>
<
00000001010202030404050506070708090A0A0B0D0D0E0F101011121213141516171819191A1B1C
1D1E1E1F202122232425262728292A2B2C2D2E2F30313233343435363738393B3B3C3D3E3F404143
4445464648494A4B4C4D4E4F5051525354565758595A5B5B5C5D5E5F606162636465666768696A6B
6C6D6E6F70717273747475767778787A7B7C7D7E7E7F80818283838485868788898A8B8B8C8D8E8F
909192929394959596979898999A9B9C9D9D9E9F9FA0A1A2A3A3A4A5A6A6A7A8A8A9AAAAABABACAC
AEAEAFAFB0B1B1B2B2B3B4B4B5B6B6B7B7B8B8B9B9BABABABBBCBDBDBDBDBDBDBDBEBDBCBBBABAB9
B9B8B7B6B5
>
<
0000000101020202030404050506070708090A0B0B0C0D0E0F101011121314141516171818191A1B
1C1D1D1E1F20202122232425262728292A2B2C2D2E2D2E2F30313233343536373738393A3B3C3D3E
3F4041424344454648494A4B4C4D4E4F505152535455565758595A5B5C5C5D5E5F5F606162636364
6566676869696A6B6C6D6D6E6F707171727374757576777878797A7B7C7C7D7E7F7F808181828383
84858686878888898A8A8B8C8C8D8E8F8F909091929293919293939494959596969797989899999A
9A9B9B9C9C9D9D9E9F9F9FA0A1A1A2A2A3A3A4A4A4A5A5A6A7A7A8A8A9A9A9AAAAAAAAAAAAA9AAA9
A9A8A9A9A8
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000001010101010102020202030303030404050506060707080909
0A0B0B0C0D0E0F101011121314151617181A1B1C1D1E20212224252728292A2C2D2F303233353638
3A3B3D3F4042444547494B4D4F50525456585A5C5E6062636567696B6D70727476797B7D80828587
898B8E909395979A9C9EA1A3A5A7AAACAEB1B3B5B7BABCBEC0C1C3C4C6C8C9CACCCDCECFD0D1D1D2
D3D4D4D5D6
>
<
FFFEFDFCFBFAF9F9F8F7F6F5F4F3F2F1F0EFEEEDEDECEBEAE9E8E7E6E5E4E3E2E1E1E0DFDEDDDCDB
DAD9D8D7D6D6D5D4D3D2D1D0CFCECDCCCBCACAC9C8C7C6C5C4C3C2C1C0BFBEBEBDBCBBBAB9B8B7B6
B5B4B3B2B2B1B0AFAEADACABAAA9A8A7A6A6A5A4A3A2A1A09F9E9D9C9B9A9A999897969594939291
908F8F8E8D8C8B8A89888786858483838281807F7E7D7C7B7A79787777767574737271706F6E6D6C
6B6B6A696867666564636261605F5F5E5D5C5B5A59585756555453535251504F4E4D4C4B4A494847
47464544434241403F3E3D3C3C3B3A39383736353433323130302F2E2D2C2B2A2928272625242423
2221201F1E
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A4A494847464544434241403F3E3D3C3B3A
393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A1918171615141312
11100F0E0D
>
4 %_Br
[
0.647059 0.709804 0.658824 0.839216 0.117647 0.043137 0.05098 2 50 97.191 %_BS
%_0.647059 0.709804 0.658824 0.839216 0.117647 0.043137 0.05098 2 50 97.191 Bs
0 0 0 0 1 1 1 2 50 4.49438 %_BS
%_0 0 0 0 1 1 1 2 50 4.49438 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 4)
(Unnamed gradient 4) 0 4 Bd
[
<
60616161626364646465656666676768696869696A6A6A6A6B6B6C6B6C6C6D6C6C6D6D6E6D6E6E
>
<
7B7C7D7E7F808182848485868889898A8B8D8E8F91929495969797999A9B9C9D9E9FA0A0A2A3A4
>
<
6768696A6B6C6D6D6E6F7071727374747576777878797A7A7B7C7D7E7E7F808182838384858687
>
<
0A0A0B0C0C0D0E0F101112131415161718191A1B1D1E1F20212324252628292A2B2D2E30313334
>
<
9F9E9D9D9C9B9A999998979696959493929291908F8E8E8D8C8B8A8A8988878786858483838281
>
<
81807F7E7D7C7B7A797877767574737271706F6E6C6B6A696867666564636261605F5E5D5C5B5A
>
<
838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D
>
4 %_Br
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000101010101010101010101010101010102010101010101010202020202020202
0303030303030304040404040404040404050505050506060606070707070707070808080909090A
0A0A0B0B0B0C0C0C0D0D0E0E0F0F0F10101111121213131414151516171617181919191A1B1B1C1D
1D1E1F202021222424252628292A2B2B2C2D2E2F30313234343637383A3B3D3E3F4042444547484B
4C4D4F50515354565758595B5C5D5E60
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000001010101010101010102010101010101010202020202020303
02020204030303030404040405050505060505050606060707070808080908080A090A0A0A0B0B0C
0C0D0D0E0E0F0F1010111012111212131414151616171817191A1A1A1B1D1D1D1E1F202120222324
25262727292A2A2B2D2E2F30323334353637393A3B3C3E3F414243464649494C4D4F505253565859
5C5F61626466686A6C6E70727576797B
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000010100010101010101010101010101010202
02020202020202020303030302030303030404040404050505050506060606060707070808090908
09090A0A0B0A0C0B0D0C0D0D0E0F0F100F101110121112131213151615161618191819191B1C1D1C
1D1D1E1F202021222324252628292A2B2C2D2E2F30313334343738383B3B3E3E414144444749494D
4F4F5154565658595B5D5E6062646667
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000010101010202030404050607080A
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE
FEFEFEFEFEFEFEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFB
FAFAFAFAFAFAFAF9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F2F2F2F1
F1F1F0F0F0EFEFEFEEEEEDEDECECECEBEBEAEAE9E9E8E8E7E7E6E6E5E4E4E3E3E2E1E1E0DFDFDEDD
DDDCDBDADAD9D8D7D7D6D5D4D3D2D1D1D0CFCECDCCCBCAC9C8C7C6C5C3C2C1C0BFBEBDBBBAB9B8B6
B5B4B2B1B0AEADABAAA8A7A5A4A2A19F
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE
FEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9
F9F9F9F8F8F8F8F8F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F2F2F2F1F1F1F0F0EFEFEFEEEEED
EDECECEBEBEAEAE9E9E8E8E7E7E6E6E5E4E4E3E2E2E1E0E0DFDEDEDDDCDBDADAD9D8D7D6D6D5D4D3
D2D1D0CFCECDCCCBCAC9C8C7C5C4C3C2C1C0BEBDBCBBB9B8B6B5B4B2B1AFAEACABA9A8A6A5A3A1A0
9E9C9A99979593918F8D8B8987858381
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE
FEFEFDFDFDFDFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFAFAFAFAFAFAF9F9
F9F9F9F9F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F4F4F4F3F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEE
EDEDECECEBEBEAEAE9E9E8E8E7E6E6E5E5E4E3E3E2E2E1E0E0DFDEDDDDDCDBDAD9D9D8D7D6D5D4D4
D3D2D1D0CFCECDCCCBCAC9C8C6C5C4C3C2C1BFBEBDBCBAB9B8B6B5B4B2B1AFAEACABA9A8A6A4A3A1
9F9E9C9A98979593918F8D8B89878583
>
4 %_Br
<
6E6E6E6E6E6D6E6D6D6D6D6E6C6D6C6D6C6C6C6C6B6C6B6B6B6B6B6A6A6A6A696A69696968686768
6766666666656564646463636262616160605F5F5E5D5E5D5C5C5B5B5A5959585858575656555454
5352525150504F4E4E4D4C4C4B4949484747454444434242403F3F3E3D3D3B3A3939383737363535
34323131302F2F2E2D2C2C2B2A2A29282626252424222120201F1E1D1D1C1B1A1A1A191918171616
15141313121110100F0E0D0D0C0B0A0A090807070706050504040303020101010000
>
<
A4A4A3A3A1A2A0A1A09E9F9D9E9C9B9C9B999A989797979596949394929190918F8E8C8D8C8A898A
89888687868483828381807F807F7D7C7B797A78777675767573727170716F6E6D6C6B6B6A696867
66656464636261605E5D5D5C5B5A5857565453535251504F4E4D4B4A49494948474544434241403F
3E3E3D3C3B3A39383736353433323130302F2E2D2B2A2A292727262524232221201F1E1D1C1B1A1A
1A19181716151413121211100F0E0D0C0B0A0A080807060505040302020101000000
>
<
878786868585848483848382828182807F807E7E7F7D7C7D7B7A7C7A797879777677767474747472
7172716F6E6F6E6D6C6D6C6B6968696867676566656463616261605F5F5D5E5D5C5B5A5859585857
56555654535251504F504E4D4C4B4A4849484745444342414241403F3E3C3B3A3938393837363534
33313030302F2E2E2D2C2B2A2928272626252423222120201F1E1D1D1C1B1A191A1A191817161614
13121211100F0F0E0D0D0C0B0A0A0A09090807060605040403030202010100000000
>
<
343433333231302F2E2E2D2C2B2A2A2928272625252423222120201F1E1D1C1B1B1A191817171615
141413121111100F0E0E0D0D0C0B0B0A0A0909080807070606060505040404040303030202020202
01010101010101010000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000
>
<
81818282828383848484858586868787888889898A8A8B8B8C8C8D8E8E8F8F909091919293939494
95969697979898999A9A9B9B9C9D9D9E9F9FA0A0A1A2A2A3A4A4A5A5A6A7A7A8A9A9AAABABACADAD
AEAFAFB0B1B1B2B3B3B4B5B5B6B7B7B8B9B9BABBBBBCBDBDBEBFBFC0C1C1C2C3C4C4C5C6C6C7C8C8
C9CACBCBCCCDCDCECFD0D0D1D2D2D3D4D5D5D6D7D7D8D9DADADBDCDDDDDEDFE0E0E1E2E2E3E4E5E5
E6E7E8E8E9EAEBEBECEDEEEEEFF0F1F1F2F3F4F4F5F6F7F7F8F9FAFAFBFCFDFDFEFF
>
<
5A5A5B5B5C5C5D5D5E5F5F6060616262636464656666676868696A6A6B6C6D6D6E6F707071727373
747576767778797A7A7B7C7D7D7E7F8081828283848586868788898A8B8B8C8D8E8F909091929394
9596979798999A9B9C9D9D9E9FA0A1A2A3A4A5A5A6A7A8A9AAABACADAEAEAFB0B1B2B3B4B5B6B7B8
B9B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDD
DEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
<
5D5D5E5E5F5F606061616263636464656666676868696A6A6B6C6C6D6E6F6F707171727374747576
777778797A7A7B7C7D7D7E7F808181828384858586878889898A8B8C8D8E8E8F9091929393949596
979898999A9B9C9D9E9E9FA0A1A2A3A4A4A5A6A7A8A9AAABABACADAEAFB0B1B2B3B4B4B5B6B7B8B9
BABBBCBDBDBEBFC0C1C2C3C4C5C6C7C8C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDE
DFE0E1E2E3E4E5E6E7E8E9EAEBECECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
4 %_Br
[
0.431373 0.643137 0.529412 0.203922 0.505882 0.352941 0.364706 2 50 98.3146 %_BS
%_0.431373 0.643137 0.529412 0.203922 0.505882 0.352941 0.364706 2 50 98.3146 Bs
0.376471 0.482353 0.403922 0.039216 0.623529 0.505882 0.513726 2 50 78.0899 %_BS
%_0.376471 0.482353 0.403922 0.039216 0.623529 0.505882 0.513726 2 50 78.0899 Bs
0 0 0 0 1 1 1 2 87 32.0225 %_BS
%_0 0 0 0 1 1 1 2 87 32.0225 Bs
0.431373 0.643137 0.529412 0.203922 0.505882 0.352941 0.364706 2 55.3571 0.561798 %_BS
%_0.431373 0.643137 0.529412 0.203922 0.505882 0.352941 0.364706 2 55.3571 0.561798 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 6)
(Unnamed gradient 6) 1 3 Bd
[
<
00000000000000000000000000000000000000000102030405060708090A0B0C0C0D0F1011121314
14151718191A1B1B1C1D1E1F20202122232425252626272828292A2B2B2C2D2E2E2F303131323233
3334353636373838393A3A3A3B3B3C3D3D3E3F3F40414142434344454546464748484848494B4B4B
4B4C4C4D4D4E4F4F505051515252535354545556575758585959595A5A5B5B5C5C5C5D5D5E5E5E5F
5F60606061616162636364646465656566666667676767686868686A6A6A6A6A6C6C6C6C6C6D6D6D
6D6D6D6D6E6E6E6E6E6E6E6E6E
>
<
DDDDDDDDDDDEDEDDDEDEDEDEDEDEDFDEDFDFDFDEDEDFDFDFDEDEDEDEDDDDDDDDDDDCDCDCDCDCDBDB
DBDBDADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D6D5D5D5D5D5D5D3D3D3D3D3D2D2D1D1D1D0D0CF
CFCFCFCECECDCDCDCDCBCBCBCACACAC8C8C8C8C8C8C6C6C5C5C5C5C3C3C3C3C3C2C2C0C0C0C0C0BF
BFBDBDBDBDBCBCBCBABABABABABAB9B9B7B7B7B7B6B6B6B6B5B4B4B3B3B3B3B2B2B2B0B0B0B0B0AF
AFAEAEAEAEACACACACACABABABABABABAAA8A8A8A8A8A8A7A7A7A7A7A7A7A7A7A7A7A5A5A5A4A4A4
A4A4A4A4A4A4A4A4A4A4A4A4A4
>
<
B4B5B5B6B4B5B5B6B7B7B6B6B7B7B7B8B6B7B7B7B7B8B6B6B6B6B6B6B6B4B4B4B4B5B5B2B2B3B3B3
B3B3B1B1B1B1B1B1B1AFAFAFAFAFAFAEAFACACACABABABABA9A8A8A8A8A8A8A8A6A6A5A5A5A5A5A5
A2A2A2A2A2A2A1A19F9F9F9F9E9E9E9E9E9B9B9B9B9B9B9A9A9A9997979797969696969696939393
93939393939392909191909090908F8F9090908D8D8D8D8D8D8D8D8D8D8D8D8C8A8A8B8B8B8B8B8A
8A8A8A8A8A8B8B8B8989888888888888888989898989898888888888888686868686878787878787
87878787878787878787878787
>
<
00000000000000000000000000000000000000000000000000000000000101010101010101010102
0202020202020202030303040404040505060606070708080809090A0A0A0B0C0B0C0D0D0D0E0F0F
0F10111212121313131414151616161717181818191A1A1B1C1C1C1D1D1E1E1E1F1F202021212122
222323242424252525252626272728282828292929292A2A2B2B2B2C2C2C2C2D2C2C2D2D2E2E2E2E
2E2F2F2F303030303030303030313131323232323232323333333333333333333333333333343434
34343434343434343434343434
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDEDECEBEAE9E8E7E6E5E4E3E2E1E1E0DFDEDDDCDBDA
DAD9D8D7D6D5D4D4D3D2D1D0CFCFCECDCCCBCACAC9C8C7C6C6C5C4C3C3C2C1C0C0BFBEBDBDBCBBBA
BAB9B8B7B7B6B5B5B4B3B3B2B1B1B0AFAFAEADADACABABAAA9A9A8A7A7A6A6A5A4A4A3A3A2A1A1A0
A09F9F9E9E9D9C9C9B9B9A9A999998989797969695959494939393929291919090908F8F8E8E8E8D
8D8C8C8C8B8B8B8A8A8A898989888888878787868686868585858584848484848383838383828282
82828282818181818181818181
>
<
3B3B3B3C3C3C3C3D3D3D3D3E3E3E3E3F3F3F3F404040404041414141424242424243434343444444
4444454545454546464646474747474748484848484949494949494A4A4A4A4A4B4B4B4B4B4C4C4C
4C4C4C4D4D4D4D4D4D4E4E4E4E4E4E4F4F4F4F4F4F50505050505051515151515151525252525252
52535353535353535454545454545454555555555555555555565656565656565656575757575757
575757575758585858585858585858585859595959595959595959595959595959595A5A5A5A5A5A
5A5A5A5A5A5A5A5A5A5A5A5A5A
>
<
484848484949494949494A4A4A4A4A4A4B4B4B4B4B4B4C4C4C4C4C4C4C4D4D4D4D4D4D4E4E4E4E4E
4E4E4F4F4F4F4F4F4F50505050505050505151515151515152525252525252525353535353535353
54545454545454545555555555555555555656565656565656565657575757575757575757585858
585858585858585959595959595959595959595A5A5A5A5A5A5A5A5A5A5A5A5A5B5B5B5B5B5B5B5B
5B5B5B5B5B5B5B5B5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5D5D5D5D5D5D5D5D5D5D5D
5D5D5D5D5D5D5D5D5D5D5D5D5D
>
4 %_Br
<
6E6E6D6E6D6D6C6D6D6C6C6C6C6B6B6B6B6A6B6A6969696968686867666665656564646363626161
6160605F5E5F5D5D5D5C5B5B5A5959585858575656555554535352515150504F4E4E4D4C4C4B4B49
4848474745454443434242403F3F3E3E3D3D3B3B3A39393838373736363535343432313130302F2F
2E2E2D2D2C2C2B2B2A2A2929282828262625252424222221212020201F1F1E1E1D1D1D1C1C1B1B1A
1A1A19191918191718161717161615151514141413131312121111111010100F0F0F0E0E0E0D0D0D
0C0C0C0C0B0B0B0A0A0A090909090808080807070707070707060606060605050505040404040404
04040404030303030302020202020201010101010201010101010101010100000000000000000000
000000000000000000000000000000
>
<
A4A3A2A0A09F9E9C9C9B9A98979796949392919091908E8D8C8B8A89888685848382838281807E7D
7C7B7978797876757473727171706F6E6D6C6B6B6A6968676666656463626261605E5D5D5C5B5958
585756545553525150504F4E4D4D4C4A49494947484745444443424241403F3F3E3D3D3C3B3B3A39
3938373736353534333332323130302F2D2E2C2D2B2A2A2A2A292727272726262523242323222221
2120201F1E1E1D1D1C1D1B1B1A1A1A1A181917171717151616151514141313121212121210111010
100F0F0E0E0E0D0D0C0C0D0B0B0B0A0A09090A080809080808070707060606070505060505050504
04040303030302020203030202020201010101010201010101010000000000000000000000000000
000000000000000000000000000000
>
<
8786858483838281807F7E7E7D7C7B7C7C7B7A7977767574747372717271706F6E6D6C6B6A696A69
68676766646364636261605F5E5E5E5D5C5B5A5A595858575756555453545251504F504E4D4C4B4C
494847484645444544424142413F3E3F3E3C3D3C3A393A39373837353635343433323031302F2F2E
2E2E2D2D2C2B2B2A292928282726262524242323222121202020211F1E1E1D1D1D1D1C1D1B1A1A19
19191918191718161716161516141513141213121211121010110F100F100E0F0D0D0E0D0D0C0D0D
0B0C0A0B0B0A0A090909080909070808070706060605060606050505050504030404030303030203
03030202020202020202010101010101010101010001000000000000000000000000000000000000
000000000000000000000000000000
>
<
343331302E2D2B2A2928262524232121201E1E1C1B1A19181716151414131211100F0E0D0D0C0C0B
0A0A0908080707060606050504040404030303030202020202010101010101010100000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000
>
<
8182838384858686878889898A8B8C8C8D8E8E8F90919192939394959696979898999A9B9B9C9D9D
9E9F9FA0A1A1A2A3A3A4A5A5A6A7A7A8A9A9AAABABACACADAEAEAFB0B0B1B1B2B3B3B4B5B5B6B6B7
B8B8B9B9BABABBBCBCBDBDBEBFBFC0C0C1C1C2C2C3C4C4C5C5C6C6C7C7C8C8C9C9CACBCBCCCCCDCD
CECECFCFD0D0D1D1D2D2D3D3D4D4D4D5D5D6D6D7D7D8D8D9D9DADADADBDBDCDCDDDDDDDEDEDFDFE0
E0E0E1E1E2E2E2E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E8E9E9EAEAEAEBEBEBECECECEDEDEDEEEEEE
EFEFEFEFF0F0F0F1F1F1F2F2F2F2F3F3F3F3F4F4F4F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9
F9F9F9F9FAFAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFE
FEFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
5A5B5C5D5E5F606162636465666768696A6B6C6D6D6E6F707172737475767778797A7A7B7C7D7E7F
80818283838485868788898A8A8B8C8D8E8F909091929394959596979899999A9B9C9D9D9E9FA0A1
A1A2A3A4A4A5A6A7A8A8A9AAABABACADAEAEAFB0B0B1B2B3B3B4B5B5B6B7B8B8B9BABABBBCBCBDBE
BEBFC0C0C1C2C2C3C4C4C5C5C6C7C7C8C9C9CACACBCCCCCDCDCECFCFD0D0D1D1D2D3D3D4D4D5D5D6
D6D7D7D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E2E3E3E4E4E5E5E6E6E6E7E7E8E8E9E9
E9EAEAEBEBEBECECEDEDEDEEEEEEEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F4F5F5F5F6F6F6F6F7
F7F7F8F8F8F8F9F9F9F9F9FAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFE
FEFEFEFFFFFFFFFFFFFFFFFFFFFFFF
>
<
5D5E5F606162636465666768696A6B6B6C6D6E6F70717273747576777778797A7B7C7D7E7F808081
8283848586878788898A8B8C8D8D8E8F9091929293949596969798999A9A9B9C9D9E9E9FA0A1A2A2
A3A4A5A5A6A7A8A8A9AAABABACADAEAEAFB0B0B1B2B3B3B4B5B5B6B7B7B8B9B9BABBBCBCBDBEBEBF
BFC0C1C1C2C3C3C4C5C5C6C6C7C8C8C9CACACBCBCCCDCDCECECFCFD0D1D1D2D2D3D3D4D4D5D6D6D7
D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E3E4E4E5E5E6E6E7E7E7E8E8E9E9E9
EAEAEBEBEBECECEDEDEDEEEEEEEFEFEFF0F0F1F1F1F2F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F6F7F7
F7F7F8F8F8F8F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFCFCFDFDFDFDFDFDFDFEFEFEFEFEFEFE
FEFEFEFFFFFFFFFFFFFFFFFFFFFFFF
>
4 %_Br
[
0 0.866667 0.705882 0 1 0.231373 0.282353 2 33.6735 0 %_BS
%_0 0.866667 0.705882 0 1 0.231373 0.282353 2 33.6735 0 Bs
0.431373 0.643137 0.529412 0.203922 0.505882 0.352941 0.364706 2 32.1839 64.6067 %_BS
%_0.431373 0.643137 0.529412 0.203922 0.505882 0.352941 0.364706 2 32.1839 64.6067 Bs
0 0 0 0 1 1 1 2 50 97.7528 %_BS
%_0 0 0 0 1 1 1 2 50 97.7528 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0.301961 0.992157 1 0.403922 0.470588 0.011765 0.043137 Xa
(New Color Swatch 1)
Pc
0.156863 0.996078 1 0.062745 0.756863 0.031373 0.101961 Xa
(New Color Swatch 2)
Pc
0 0.866667 0.705882 0 1 0.231373 0.282353 Xa
(New Color Swatch 4)
Pc
0.235294 0.686275 0.423529 0.019608 0.737255 0.403922 0.458824 Xa
(New Color Swatch 8)
Pc
0.301961 0.992157 1 0.403922 0.470588 0.011765 0.043137 Xa
(New Color Swatch 9)
Pc
0.313726 0.839216 0.662745 0.247059 0.552941 0.231373 0.266667 Xa
(New Color Swatch 10)
Pc
0.647059 0.709804 0.658824 0.839216 0.117647 0.043137 0.05098 Xa
(New Color Swatch 11)
Pc
0.431373 0.643137 0.529412 0.203922 0.505882 0.352941 0.364706 Xa
(New Color Swatch 12)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Layer 2) Ln
0 A
1 Ap
0 O
0 J 0 j 1 w 4 M []0 d0 XR
595.2754 841.8896 m
595.2754 0 L
0 0 L
0 841.8896 L
595.2754 841.8896 L
Bb
1 (Unnamed gradient 4) 297.2559 440.9751 -88.9088 630.1769 1 0 0 1 0 0 Bg
12.0015 -630.0626 -615.0894 -11.7163 604.8008 446.833 Xm
163.7793 -8598.1982 -615.0894 -11.7163 441.0889 9041.4922 Bc
3.77575 -198.222 -615.0894 -11.7163 604.8682 443.2935 Bm
5.52878 -290.2536 -615.0894 -11.7163 608.6436 245.0713 Bm
2.42727 -127.4284 -615.0894 -11.7163 614.1729 -45.1826 Bm
163.7793 -8598.1982 -615.0894 -11.7163 616.5996 -172.6104 Bc
f
0 BB
/BBAccumRotation (1.570796) XT
542.9092 169.6309 m
542.9092 125.8555 427.1953 90.3711 284.4551 90.3711 c
141.7134 90.3711 26 125.8555 26 169.6309 c
26 213.4053 141.7134 248.8896 284.4551 248.8896 c
427.1953 248.8896 542.9092 213.4053 542.9092 169.6309 c
Bb
0 0 0 0 Bh
1 (Unnamed gradient 6) 284.4707 747.8296 -0.243631 264.3506 0.850659 0 0 0.260868 1221.2161 6390.7744 Bg
224.8702 -0.293232 -0.956192 -68.9601 284.4546 169.6299 Bm
f
0 BB
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
u
0 Ap
0 O
0.301961 0.992157 1 0.403922 0.470588 0.011765 0.043137 Xa
0 J 0 j 1 w 4 M []0 d0 XR
361.2988 525.5298 m
341.6328 520.498 338.6162 530.1128 312.9297 552.876 c
285.8853 576.8457 227.998 583.5093 168.5703 538.0796 c
109.1436 492.6504 103.2104 403.9102 129.9077 334.3857 c
156.6045 264.8633 212.8408 192.5146 241.3032 185.6914 c
269.7656 178.8691 421.917 176.9824 508.0879 314.1094 c
594.2598 451.2388 503.7832 561.9863 361.2988 525.5298 c
f
0.254902 1 1 0.247059 0.584314 0.023529 0.070588 Xa
394.9424 277.3848 m
392.4541 283.2568 382.3799 280.1309 378.4775 281.3164 c
368.8174 284.2549 356.7617 289.2412 351.3818 289.5684 c
347.2471 289.8193 344.1816 287.3379 340.1113 286.3379 c
326.3896 282.9629 308.499 260.5605 305.9268 255.1992 c
300.8291 244.5684 275.687 224.0459 261.9785 217.4746 c
258.8608 215.9795 251.1094 211.7334 250.4297 208.0469 c
248.6143 198.2227 266.6646 197.2344 273.7578 197.5332 c
278.686 197.7422 290.9961 197.1709 289.7324 204.4258 c
288.8145 209.709 281.2808 214.04 292.3193 215.4053 c
295.1123 215.752 303.1406 212.0596 305.2813 214.4141 c
307.6992 217.084 303.1729 222.332 304.2246 225.4844 c
305.4209 229.0605 313.1816 231.2617 316.0596 228.3359 c
318.0605 226.2988 317.1016 219.6572 318.0889 216.9453 C
328.29 221.8291 347.9141 215.3467 354.0986 226.7461 c
356.083 230.4053 356.8389 235.9707 358.5762 240.1279 c
359.8701 243.2246 361.5273 250.75 364.7041 252.3438 c
368.4756 254.2344 371.1826 250.6514 371.2764 246.999 c
371.3887 242.6045 367.4805 239.0176 366.083 235.0811 c
364.9922 232.0137 362.1709 224.8008 364.0908 222.1064 c
368.2109 216.3135 380.3818 230.458 383.5332 234.084 c
394.6621 246.8965 399.5059 266.624 394.9424 277.3848 c
f
0.647059 0.709804 0.658824 0.839216 0.117647 0.043137 0.05098 Xa
441.7129 304.1113 m
432.2637 295.9033 406.3984 279.708 385.8301 282.1504 c
369.8799 284.042 352.5928 293.6689 350.543 289.0439 c
348.7607 285.0225 375.7539 278.8838 392.1875 279.2021 c
404.2881 279.4385 436.6494 290.7666 461.3809 315.4219 c
466.5137 320.5361 469.4395 329.5215 474.0381 334.5186 c
476.8291 337.5498 481.0693 334.3096 480.2813 329.0928 c
479.7363 325.4775 473.8486 321.8018 475.6689 319.498 c
477.4883 317.1963 486.5273 322.8799 487.9063 325.5254 c
490.7959 331.0684 490.7178 336.4141 492.3193 338.7002 c
495.9287 343.8467 501.0098 350.6426 507.1914 344.5498 c
510.1201 341.6631 508.6494 335.54 513.3857 336.124 c
515.8135 336.4229 523.6084 342.4092 524.5742 344.6123 c
547.7168 397.4023 542.8125 432.9297 537.1914 445.4121 c
532.8623 455.0239 524.2139 455.0298 513.584 458.6221 c
491.2617 466.1641 444.748 349.7402 448.0459 338.7383 c
449.4561 334.0371 454.2441 327.9072 452.9424 322.6826 c
451.6396 317.4609 446.3955 308.1768 441.7129 304.1113 c
f
0.258824 0.964706 1 0.231373 0.592157 0.12549 0.105882 Xa
277.4097 568.8911 m
289.0732 564.1729 300.8613 557.2847 304.6738 549.3569 c
308.5596 541.2734 310.6494 533.9414 302.5859 527.8218 c
292.4297 520.1157 276.1973 533.2041 270.3101 541.0171 c
259.3198 555.6016 240.9287 558.8359 223.2183 563.6592 C
236.8101 570.2554 265.7461 573.6104 277.4097 568.8911 c
f
0 0.87451 0.698039 0 1 0.219608 0.286275 Xa
370.9521 509.7769 m
366.3311 493.3721 375.9043 471.5112 389.9854 476.4814 c
404.6768 481.666 407.9922 466.3232 400.4326 462.2271 c
380.0078 451.1582 384.4863 384.0527 300.8105 375.8975 C
336.583 373.3916 357.8311 367.2129 344.1406 353.9854 c
333.9521 344.1436 320.3994 338.3086 y
402.2324 345.459 451.9053 417.248 v
467.3027 439.4971 473.6807 455.0425 469.877 473.793 c
467.3633 486.1929 493.377 440.6465 444.8174 386.2139 c
412.2383 349.6914 334.2656 313.4111 y
380.4004 334.1846 377.3311 324.6299 v
374.9014 317.0605 378.8584 312.5332 384.8867 314.9404 c
394.7891 318.8955 392.7646 310.2402 386.0967 303.1436 C
403.1846 306.6094 416.6787 313.6357 427.5156 322.877 c
437.5986 331.4785 437.0586 344.877 453.8701 350.8945 c
472.6592 357.6182 498.3301 403.3672 500.708 419.5908 c
503.0859 435.8169 499.4688 430.3599 495.5361 429.5625 c
491.6055 428.7651 500.0488 458.209 510.7803 454.5391 c
524.6533 449.7944 540.2383 415.6426 528.2178 384.8672 C
538.9902 414.377 543.8291 425.6606 537.2021 452.6318 c
529.9883 481.9937 505.8809 509.355 473.1094 523.3076 c
445.7705 534.9458 416.8965 537.8491 394.8193 533.3716 c
380.002 530.3662 372.6465 515.7866 370.9521 509.7769 c
f
0.619608 0.709804 0.709804 0.823529 0.141176 0.086275 0.070588 Xa
486.1592 495.9878 m
476.3057 513.5117 448.4004 531.7998 418.0234 531.5215 c
388.5586 531.252 365.3623 528.6782 362.6289 521.313 c
358.9648 511.438 386.8047 515.4414 401.2148 517.0752 c
420.8633 519.3018 451.3555 528.2617 486.1592 495.9878 C
f
u
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
476.916 439.605 m
479.748 415.8125 452.8574 378.3994 453.7695 377.0098 c
457.2246 371.7432 491.3467 401.3193 498.7656 433.0508 C
494.2832 396.9414 445.6719 363.5205 443.4102 363.0166 c
440.5078 362.3662 443.6523 366.1025 444.1143 366.8633 c
452.1748 380.1445 473.7373 411.2871 476.916 439.605 C
476.916 439.605 l
f
/BBAccumRotation (0.200109) XT
U
u
0 0 0 0 1 1 1 Xa
467.9795 383.4424 m
478.8555 399.2578 494.0029 426.2588 492.6094 465.6006 C
494.8652 442.9639 487.7764 404.7148 467.9795 383.4424 C
f
/BBAccumRotation (0.200109) XT
U
u
484.1191 467.2349 m
488.1445 455.1416 484.6074 439.8418 480.2783 435.3237 C
488.0674 447.6279 484.1191 467.2349 y
f
/BBAccumRotation (0.200109) XT
U
u
457.5439 433.311 m
445.8086 411.6045 421.0078 388.1367 420.6973 387.9336 C
451.5537 413.0254 457.4609 433.1865 457.5439 433.311 c
457.5439 433.311 l
f
/BBAccumRotation (0.200109) XT
U
u
391.6299 361.2549 m
362.6289 343.5654 324.8594 331.3438 310.2979 325.6318 c
285.3584 315.8516 276.3301 308.7451 264.4492 290.4668 C
275.2114 308.834 283.5811 318.7959 319.6338 330.8311 c
330.6816 334.5215 364.6201 345.3867 391.6299 361.2549 C
f
/BBAccumRotation (0.200109) XT
U
0.023529 0 0.023529 0 0.968627 0.984314 0.968627 Xa
539.1133 428.9556 m
540.2217 444.4502 532.8359 465.0537 526.2646 474.6426 c
516.6504 488.668 504.6592 502.5737 490.2119 511.1631 C
503.9434 499.1221 512.293 488.2212 514.709 479.9146 C
508.916 486.3882 502.7178 492.7334 495.1162 495.7661 C
506.5898 482.1841 498.7217 471.3003 506.25 458.4761 C
505.1475 474.978 518.7207 474.5435 525.3447 461.8994 c
532.5615 448.127 535.4805 429.0029 535.5557 413.1201 C
537.2832 422.4443 537.293 429.7031 536.0615 437.7822 c
534.6855 446.8276 533.791 452.6709 530.0254 463.6631 C
535.7598 454.6055 538.3877 439.9072 539.1133 428.9556 C
f
0.670588 0.698039 0.654902 0.858824 0.094118 0.003922 0.015686 Xa
474.4121 455.3862 m
469.4199 421.1006 445.0752 390.6152 438.3818 387.4766 C
439.2432 388.6719 441.4072 391.874 440.7451 394.5918 C
435.5088 391.9404 432.5713 383.3916 429.1914 385.5781 c
424.1826 388.8193 435.7529 395.917 445.1631 407.8467 c
466.3564 434.7109 472.1172 453.9014 472.2363 472.8608 c
475.3594 461.8936 474.4121 455.3862 v
f
0.243137 1 1 0.215686 0.611765 0.054902 0.07451 Xa
461.4707 494.2861 m
462.8789 491.5918 452.2588 494.0044 438.8691 493.1665 c
428.7646 492.5337 419.7285 488.1812 410.9971 483.1045 c
406.7979 480.6621 414.0586 499.3862 408.3711 497.6074 c
395.4912 493.5781 387.5615 510.104 389.3926 515.877 c
389.875 517.3921 414.9854 519.3364 427.0352 516.585 c
439.96 513.6338 456.4287 501.293 461.4707 494.2861 C
f
0.756863 0.564706 0.756863 0.803922 0.05098 0.129412 0.062745 Xa
265.4297 548.2881 m
268.1079 539.5254 261.8853 535.5093 253.8003 535.0962 c
243.6733 534.5771 232.1021 539.6719 222.3291 538.5132 c
205.7256 536.5454 181.0044 522.5742 171.374 496.522 C
170.3071 508.9507 173.3623 517.9082 175.624 521.022 c
181.5562 529.1914 187.6455 534.9326 196.1802 540.1362 c
207.8149 547.231 223.8286 551.1333 238.0166 552.1328 c
244.6396 552.5991 262.7354 557.1094 265.4297 548.2881 c
f
u
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
298.9961 542.3145 m
296.4775 554.7329 282.3789 566.3193 264.0952 569.1445 C
273.562 566.8438 287.6855 561.1138 298.9961 542.3145 C
f
/BBAccumRotation (0.200109) XT
U
0.643137 0.686275 0.705882 0.803922 0.145098 0.109804 0.094118 Xa
133.3394 436.6289 m
131.5557 441.3447 119.9448 443.6724 115.9971 437.519 C
107.6489 413.8633 111.4609 324.8203 198.894 219.751 C
193.8364 227.2275 190.1982 232.1367 190.8867 237.8857 c
191.4614 242.6895 197.5796 240.832 195.1323 248.46 C
198.3447 249.2393 199.4126 243.9766 204.9126 238.2119 c
208.7153 234.2256 207.2896 228.8975 207.0693 223.6924 c
206.7881 217.0566 211.0923 211.6436 215.2495 208.584 c
222.6074 203.1709 223.9453 195.1182 229.9619 194.2725 C
225.2432 197.7432 222.5361 203.2598 220.165 209.1895 c
218.5576 213.2139 218.4932 222.8623 212.6182 219.2295 C
214.2197 231.5205 208.4458 236.6709 201.5337 245.1641 c
198.1797 249.2822 197.8042 256.9824 193.3682 256.541 c
187.6899 255.9736 188.0576 249.1201 189.249 244.7949 C
184.8091 245.6563 178.106 255.4727 177.6455 260.1699 C
180.7979 259.3008 187.3213 258.1807 192.54 264.2793 c
195.3096 267.5176 190.7158 277.9629 188.521 282.1592 c
185.314 288.291 176.377 296.2627 170.2935 291.6865 c
164.2207 287.1182 172.2031 273.0332 165.8706 273.9053 c
161.7026 274.4785 151.5596 287.415 154.5952 298.0664 C
165.3491 296.7549 178.4775 304.873 171.3438 314.4521 c
160.957 328.4043 148.9272 345.8008 141.8838 365.3906 c
133.4233 388.9209 132.9956 407.8682 136.0186 408.2822 c
143.2183 409.2715 144.9526 405.5693 153.936 381.6494 c
159.3633 367.2031 162.8691 359.7285 170.062 343.4756 C
168.6016 353.4063 144.4688 411.5918 140.6289 418.1533 c
137.3926 423.6836 133.0967 425.5981 131.9761 428.7959 c
131.1353 431.1943 134.7192 432.9795 133.3394 436.6289 c
f
0.603922 0.733333 0.678431 0.827451 0.141176 0.027451 0.027451 Xa
304.7129 242.5537 m
305.833 247.5049 314.3555 255.3369 319.7627 249.8564 c
326.3184 243.21 315.0908 231.5527 306.2314 231.1172 C
304.4941 239.5566 316.1094 237.8896 315.1953 243.2627 c
313.9727 250.4541 304.7129 242.5537 y
f
0.462745 0.847059 0.752941 0.709804 0.266667 0.039216 0.070588 Xa
341.54 286.8643 m
322.2607 282.3633 301.1738 255.3916 305.4092 253.6768 c
309.6436 251.96 315.9902 276.6035 341.54 286.8643 C
f
0 0.427451 0.12549 0 1 0.643137 0.705882 Xa
242.5552 199.7178 m
245.4692 197.9922 248.4126 189.4785 242.7852 188.9092 c
236.7993 188.3037 234.2915 197.9746 237.1211 201.7637 C
238.1245 198.6855 240.3237 195.4033 242.1982 196.8135 c
242.8081 197.2725 243.0288 198.2441 242.5552 199.7178 C
f
0.141176 0.996078 1 0.047059 0.776471 0.035294 0.121569 Xa
360.7588 294.501 m
362.7764 297.4307 379.1348 281.9727 406.6943 287.5625 C
388.9922 279.3662 357.0088 289.0635 360.7588 294.501 c
f
390.8584 210.1982 m
447.0303 234.8154 494.0518 285.915 515.6338 327.3701 C
487.4844 297.335 447.4004 296.3779 427.1797 287.9238 c
402.0244 277.4063 390.4766 263.5322 371.6699 251.9629 c
355.7529 242.1699 337.7012 239.9824 320.502 233.791 c
293.3086 224.002 258.9355 201.1563 254.2637 200.2051 C
264.7129 191.4111 288.9277 191.751 297.7949 193.6045 c
348.8438 204.2734 368.1953 200.2646 390.8584 210.1982 c
Bb
1 (Unnamed gradient 1) 253.6519 111.4189 97.5285 211.9775 -0.980045 0.198777 0.198777 0.980045 14582.4551 -1455.0972 Bg
-14.554 211.4773 -272.8389 -18.7769 531.4854 126.1699 Xm
-553.9047 8048.5342 -272.8389 -18.7769 1078.5215 -7822.5654 Bc
-7.68581 111.679 -272.8389 -18.7769 524.6172 225.9678 Bm
-553.9047 8048.5342 -272.8389 -18.7769 516.9316 337.6465 Bc
f
0 BB
453.8105 270.9795 m
454.0313 263.6758 451.8281 261.8379 446.3467 257.582 c
436.6846 250.0801 418.5049 236.5098 394.2354 225.7598 C
409.708 245.2686 406.9814 267.7041 405.8389 276.4453 C
411.3174 280.0938 420.4297 285.2324 428.1387 288.3691 c
431.752 289.8398 445.4336 293.1377 449.5771 294.4492 c
453.2842 288.5898 453.8105 270.9795 v
Bb
1 (Unnamed gradient 2) 225.73 183.8027 116.9457 126.7764 -0.980045 0.198777 0.198777 0.980045 14582.4551 -1455.0972 Bg
33.8376 122.1772 -51.8987 14.3736 434.5723 185.9229 Xm
2160.3765 7800.4673 -51.8987 14.3736 -1722.7622 -7603.5615 Bc
17.6792 63.8341 -51.8987 14.3736 437.6143 196.9053 Bm
12.1663 43.9289 -51.8987 14.3736 455.293 260.7393 Bm
2160.3765 7800.4673 -51.8987 14.3736 467.46 304.668 Bc
f
0 BB
514.7461 420.2344 m
516.8994 428.0317 526.9736 419.7227 528.1357 414.7646 c
531.457 400.6152 526.8672 390.7686 524.1016 384.9766 C
522.584 387.0293 521.4443 388.6475 517.54 386.0859 c
515.4561 384.7188 513.3301 382.3975 511.7998 380.4346 c
511.4863 380.0352 510.1553 383.8789 507.7012 385.1133 c
504.7939 386.5762 499.2646 383.2451 496.7871 381.4834 C
502.6982 388.8223 505.166 392.1387 507.251 395.0986 c
512.7793 402.9365 514.7461 420.2344 y
Bb
1 (Unnamed gradient 3) 95.6172 379.4902 -133.0703 41.124 -0.980045 0.198777 0.198777 0.980045 14582.4551 -1455.0972 Bg
33.4946 -23.8599 31.0878 43.6411 481.6338 389.8223 Xm
6503.6572 -4632.8896 31.0878 43.6411 -6020.5176 5021.6396 Bc
31.0483 -22.1173 31.0878 43.6411 483.1396 388.75 Bm
6503.6572 -4632.8896 31.0878 43.6411 514.1875 366.6328 Bc
f
0 BB
/BBAccumRotation (0.200109) XT
511.9414 416.9883 m
511.4268 423.0244 507.4736 424.7183 504.0762 422.1436 c
500.7686 419.6377 497.7441 407.8125 494.0146 399.8135 c
491.0059 393.3623 485.0449 382.7217 478.4326 373.6504 C
497.3857 383.9658 512.457 410.9521 511.9414 416.9883 c
Bb
1 (Unnamed gradient 3) 106.3198 403.4746 -99.3096 76.3629 -0.980045 0.198777 0.198777 0.980045 14582.4551 -1455.0972 Bg
27.0859 -71.3978 48.9573 18.5728 457.4873 423.2222 Xm
2832.6316 -7466.7402 48.9573 18.5728 -2373.9268 7886.7534 Bc
25.1077 -66.1833 48.9573 18.5728 458.7051 420.0132 Bm
2832.6316 -7466.7402 48.9573 18.5728 483.8125 353.8301 Bc
f
0 BB
/BBAccumRotation (0.200109) XT
0.552941 0.768627 0.678431 0.803922 0.180392 0.039216 0.062745 Xa
391.6631 300.3994 m
394.7412 296.2373 411.7607 299.9941 417.6006 302.29 c
428.4854 306.5684 437.8037 316.7803 441.0869 326.4336 C
433.5596 314.4805 412.1797 304.1816 402.3867 310.541 c
397.5713 313.668 388.5859 304.5615 391.6631 300.3994 c
f
424.4248 298.5508 m
433.5898 303.4072 438.0908 317.3096 441.7764 313.8418 c
445.9863 309.8779 432.8975 299.2529 424.4248 298.5508 C
f
0.733333 0.678431 0.670588 0.890196 0.031373 0.007843 0 Xa
371.3359 346.042 m
375.9023 344.2373 365.7051 330.1406 358.7881 334.3936 c
352.8564 338.043 366.2012 348.0703 371.3359 346.042 c
f
u
0 0 0 0 1 1 1 Xa
212.5488 560.0405 m
195.5034 553.8154 179.9683 543.9907 166.9775 531.3276 c
162.3311 526.7988 158.0269 521.8779 154.291 516.5693 c
152.376 513.8472 150.7319 510.9678 149.313 507.4897 c
149.2104 507.2388 150.2827 507.0527 150.3657 507.3706 c
151.2183 510.6118 153.4116 513.6348 155.2944 516.3423 c
158.7666 521.334 162.8149 525.9253 167.1001 530.2295 c
180.0801 543.2681 195.9902 553.3511 213.2603 559.6582 c
213.7871 559.8506 212.8052 560.1343 212.5488 560.0405 c
212.5488 560.0405 l
f
U
/BBAccumRotation (0.200109) XT
0.211765 0.929412 1 0.12549 0.682353 0.180392 0.156863 Xa
261.8501 549.3628 m
261.4243 545.9902 255.3662 544.9585 252.6782 544.9834 c
244.4844 545.0591 233.9526 547.6089 225.4907 546.2441 c
195.6035 541.4253 179.3672 524.0005 175.0825 517.5356 C
175.5972 528.6802 193.5596 543.5562 201.2871 547.2959 c
215.3696 554.1099 233.4907 562.2671 253.1187 555.9214 c
257.6499 554.4551 262.1416 551.7012 261.8501 549.3628 c
f
u
0 0 0 0 1 1 1 Xa
300.9404 530.8027 m
291.9971 523.9395 281.2769 532.458 275.1104 539.0112 c
269.7881 544.6665 264.6216 549.7729 257.6831 553.4546 c
249.3022 557.9014 239.7061 558.8237 230.4697 557.0938 c
229.2295 556.8613 229.9438 557.7754 230.7261 557.9219 c
242.8081 560.1855 254.3833 557.8794 264.5967 551.0166 c
270.6216 546.9678 274.8975 541.2891 280.1113 536.3633 c
284.7471 531.9888 293.3369 526.1528 299.5352 530.9111 c
299.9023 531.1919 301.6992 531.3867 300.9404 530.8027 c
300.9404 530.8027 l
f
/BBAccumRotation (0.200109) XT
U
u
362.1816 518.8608 m
363.4863 512.5298 378.75 513.2476 389.2148 515.2119 c
423.5352 521.6553 436.7891 517.082 457.6797 497.4536 c
466.7217 488.957 464.4248 473.3174 463.875 460.6177 C
466.6904 466.2197 465.6064 472.731 465.1123 479.2422 C
468.9219 475.6113 471.2646 469.8638 471.0771 458.4863 C
473.5742 463.7192 473.4668 470.0742 470.6074 478.3496 C
474.1367 474.3418 477.3926 469.9248 478.5801 458.8306 C
480.5801 469.4468 472.8203 485.3135 463.7109 494.3081 c
427.6338 529.9312 404.7852 516.3066 374.5996 515.0815 c
364.4102 514.6675 359.0117 522.0747 370.1895 526.3486 c
380.6592 530.3535 392.4854 530.5176 y
359.7607 530.6104 362.1816 518.8608 v
f
U
/BBAccumRotation (0.200109) XT
u
136.4946 375.2373 m
143.2109 351.8271 152.1235 338.1836 169.2632 312.5322 C
154.0938 331.5508 141.6831 352.4004 134.7378 375.8271 c
127.7256 399.4785 122.6392 449.1689 127.7378 448.9536 c
130.6284 448.8315 129.668 399.0205 136.4946 375.2373 c
f
/BBAccumRotation (0.200109) XT
U
u
186.3804 282 m
186.2197 282.3701 178.4395 300.4238 156.6572 318.7939 C
157.019 318.4023 177.3628 304.5742 186.3804 282 C
f
/BBAccumRotation (0.200109) XT
U
0.156863 0.996078 1 0.062745 0.756863 0.031373 0.101961 Xa
304.7314 268.8477 m
300.4932 270.4795 284.6465 261.9873 282.4697 266.6475 c
280.167 271.5781 290.7471 276.0879 290.4766 286.7373 C
283.856 277.8398 277.3457 274.2373 282.2061 289.8652 C
278.3403 286.2959 276.3926 285.5068 273.9277 279.4463 C
271.7334 274.0527 271.7026 266.2881 270.582 263.7324 c
268.5454 259.083 268.6099 265.498 266.1836 273.3887 c
265.5254 275.5293 262.3047 280.667 258.855 280.7998 c
252.9829 281.0254 250.8809 274.2236 251.1396 275.6074 C
252.7793 284.3662 261.0068 300.7676 274.9609 308.9004 C
259.8408 302.5293 254.2583 285.4238 250.0122 286.3662 c
245.561 287.3525 242.8457 301.3242 243.6997 312.834 C
240.1846 303.3818 243.4907 291.3838 245.0229 281.8496 c
246.2983 273.9043 246.7021 263.3545 245.6548 255.4482 c
244.8325 249.249 242.8296 242.6416 242.3643 236.3613 c
241.9058 230.1816 243.3257 219.7783 246.2227 213.8447 c
248.1099 209.9746 253.604 213.9248 267.3989 221.6016 c
278.9805 228.0488 284.7661 235.4541 288.9854 239.3623 c
295.0684 244.9971 313.4453 265.4971 304.7314 268.8477 c
f
/BBAccumRotation (0.200109) XT
206.1055 347.6943 m
211.7422 336.8691 218.7007 322.1289 224.1865 311.2373 c
233.9663 291.8262 232.7046 272.752 239.3267 251.7266 c
247.9492 224.3506 249.4063 217.167 241.3013 209.9736 c
233.2192 202.8008 223.5488 220.0693 217.731 231.2881 C
218.0981 221.3262 220.1797 215.4482 222.7563 211.1719 c
226.4941 204.9619 229.707 203.7881 232.998 200.2598 C
224.8887 202.9844 217.3145 208.2793 216.5156 219.2344 c
215.4551 233.7793 209.2559 240.873 198.5088 261.6289 c
182.7217 292.1211 178.5762 325.7578 168.4946 349.8477 C
144.8711 402.6787 130.4536 445.9795 139.6606 482.7012 C
132.1426 420.4063 150.981 402.8154 171.4321 349.3418 c
184.498 315.1777 182.1436 292.6328 207.8018 249.1885 c
215.8442 235.5713 230.7485 212.124 235.9956 216.3359 c
238.5693 218.4014 239.3833 224.0508 239.5669 226.752 c
240.0938 234.4258 238.0015 240.0938 236.4775 247.7236 c
232.8589 265.8477 230.1226 281.9229 221.1807 298.1123 c
212.9702 312.9756 204.5601 334.6504 200.2349 350.9199 C
200.1831 341.4209 198.1792 327.6865 206.981 306.8008 c
216.5771 284.0342 223.9268 261.2139 226.1914 250.125 c
226.7227 247.5215 230.0464 230.9443 226.5869 229.543 c
221.3501 227.4189 211.9863 245.6279 209.2974 255.79 C
210.8276 251.7314 220.3369 235.5156 222.415 236.1357 c
227.6475 237.6924 214.189 248.751 213.0078 282.5186 c
212.689 291.6406 202.1147 307.0811 199.9365 315.9229 c
197.0864 327.4785 196.4072 340.0977 195.7876 351.9492 c
195.5142 357.1631 195.356 364.3096 192.7744 370.6348 c
201.6084 356.333 206.1055 347.6943 v
f
/BBAccumRotation (0.200109) XT
0.756863 0.564706 0.756863 0.803922 0.05098 0.129412 0.062745 Xa
261.0884 562.4326 m
259.9844 555.1309 235.5054 564.2827 204.625 549.9048 c
180.8569 538.8394 154.3213 520.6265 147.3945 486.4741 c
140.4678 452.3232 152.7671 402.5479 180.5474 357.1738 c
203.8247 319.1514 199.3467 298.6416 198.3652 303.4814 c
197.3838 308.3203 189.2012 334.6855 186.9268 325.7217 c
184.6523 316.7598 181.5186 312.0283 180.7207 315.9619 c
179.3716 322.6133 170.7324 349.3057 159.1963 374.9238 c
147.1641 401.6484 125.9609 462.5283 150.5723 508.8452 c
177.5786 559.6641 263.8066 580.4595 261.0884 562.4326 c
f
0.615686 0.705882 0.721569 0.827451 0.137255 0.078431 0.047059 Xa
238.8623 238.8789 m
239.6396 232.4063 242.5981 215.4746 235.8457 212.6074 c
230.7007 210.4209 213.0708 242.6221 206.2197 258.248 C
212.4414 248.6357 221.7593 228.7002 226.2427 231.2422 c
230.7236 233.7871 222.8428 246.2568 219.8042 253.6709 c
215.8882 263.2217 217.8442 272.6357 215.1167 285.3086 C
220.5352 273.3398 223.5659 260.7305 227.8125 257.6572 c
231.7539 254.8037 232.5508 261.4531 231.3755 271.1328 c
237.5396 249.8672 238.8623 238.8789 v
f
257.1563 271.3213 m
263.376 270.5371 262.8906 243.4385 258.9595 235.1846 C
259.0894 244.7158 257.9155 255.4785 255.7134 256.7002 c
253.5122 257.9238 250.0034 252.6338 248.8564 241.3057 C
249.2803 251.9346 249.2417 272.3203 257.1563 271.3213 c
f
321.8066 277.0361 m
307.3857 272.0645 300.7803 267.3652 294.3535 263.9854 c
274.499 253.5479 265.521 242.9189 262.376 238.2168 c
258.2505 232.0498 251.5264 221.8486 249.9561 214.4463 C
254.1045 217.0986 258.4766 219.792 265.459 222.625 c
289.0684 232.2051 294.4395 259.0469 321.8066 277.0361 C
f
0 0.92549 0.94902 0 0.976471 0.141176 0.152941 Xa
281.209 239.6748 m
278.2886 233.4961 272.0342 230.2012 266.7422 228.7129 c
261.8872 227.3477 257.2529 224.2686 254.4033 220.4629 C
258.4624 229.9473 270.5405 228.2227 272.7241 243.4658 C
273.5703 238.5205 271.4766 234.8701 273.853 234.7988 c
276.6387 234.7158 281.209 239.6748 y
f
0.615686 0.705882 0.721569 0.827451 0.137255 0.078431 0.047059 Xa
244.5962 283.5742 m
247.2642 270.4189 245.7891 250.5166 242.8101 250.0693 c
239.8306 249.6211 236.1265 265.1689 234.6514 274.1299 C
235.0381 267.3643 235.3706 258.6787 237.6909 252.0244 c
240.1338 245.0186 241.9893 240.5361 242.5439 234.5908 C
245.9258 244.7988 249.8901 261.3467 244.5962 283.5742 C
f
212.9746 254.207 m
209.6392 253.9082 204.0977 268.373 201.8066 272.3828 C
204.3911 268.6719 206.2236 267.7012 207.3735 268.3408 c
209.7593 269.666 208.4341 275.167 208.5635 281.1475 c
216.8506 254.5557 212.9746 254.207 v
f
258.106 216.1777 m
254.2715 213.7451 244.8398 204.4072 237.9067 205.9414 c
234.9399 206.5957 230.2715 206.5156 219.8452 227.0703 C
230.1963 209.4131 235.7104 208.8457 237.7471 209.0557 C
240.9155 209.3818 243.1714 212.9043 245.2568 218.2148 C
246.0264 207.8232 254.4492 215.1992 258.106 216.1777 C
f
0 0.780392 0.435294 0 1 0.341176 0.431373 Xa
289.9824 284.9072 m
284.2158 277.2441 282.5703 276.1416 280.7222 276.7139 c
277.8027 277.6133 277.5679 280.9131 279.7993 286.502 C
272.5928 281.3809 273.7813 269.498 271.5474 264.7959 C
275.187 267.2266 274.7871 276.3223 276.3271 278.0049 c
277.9727 279.8018 276.5381 272.3008 279.4883 271.7393 c
282.1899 271.2266 289.0771 279.7656 289.9824 284.9072 C
f
0.615686 0.705882 0.721569 0.827451 0.137255 0.078431 0.047059 Xa
284.1548 274.043 m
278.769 268.3857 276.7803 270.8145 276.8013 277.2832 C
274.8369 273.5928 277.4727 267.0205 268.1123 259.2178 C
267.0322 263.8574 266.1211 276.8037 260.146 279.0918 c
253.8296 281.5098 248.9624 273.1387 249.5293 266.2324 C
251.2085 277.752 261.7466 280.5186 264.8306 269.9668 c
267.1875 261.9033 266.9604 254.8135 265.8735 247.5771 C
268.9292 253.6367 269.1807 257.2451 272.854 262.2256 c
277.3623 268.3359 280.8447 267.0752 284.1548 274.043 C
f
0 0.854902 0.517647 0 0.976471 0.25098 0.376471 Xa
163.394 486.2949 m
163.5469 488.6465 168.918 549.957 232.438 557.8813 C
167.1587 545.8218 164.7471 488.4155 164.8647 486.5928 c
166.9253 454.5684 176.8037 402.4473 206.8105 358.0938 c
239.0747 310.4004 250.6533 276.2725 239.5557 279.3262 c
225.0454 283.3174 205.2397 345.0244 195.2842 368.3496 c
183.2856 396.459 161.79 461.8726 163.394 486.2949 C
f
0.039216 0 0.513726 0 0.980392 0.980392 0.576471 Xa
219.958 330.5322 m
229.5879 320.6455 232.5225 302.9941 234.4863 289.4707 C
225.3999 294.6514 224.3398 307.9053 219.6226 319.1602 c
215.4009 329.2305 209.0298 339.4609 207.2324 350.4463 C
213.3262 343.832 213.8232 333.4854 221.1758 327.6279 c
220.4517 328.9365 219.958 330.5322 V
f
0.607843 0.733333 0.678431 0.827451 0.141176 0.043137 0.043137 Xa
452.626 486.2739 m
443.415 488.5386 435.5361 489.5508 424.5645 484.5181 c
416.5713 480.8506 415.3789 476.9224 412.0742 479.1123 c
408.1738 481.6978 413.0479 483.9053 414.8662 487.4805 c
420.0791 497.7368 404.957 501.4419 397.7861 494.373 c
392.9482 489.6045 388.71 475.1992 394.6406 469.6807 c
400.5459 464.188 406.0557 466.1021 410.7949 469.2881 c
419.8467 475.375 443.7314 486.2793 460.6865 473.6016 c
461.0293 473.3452 462.4004 483.8721 452.626 486.2739 c
f
u
0 0 0 0 1 1 1 Xa
447.4531 507.5166 m
437.2998 510.1348 428.2695 507.9487 420.1914 501.4414 c
413.1924 495.8022 408.4893 488.4336 398.667 488.1606 c
398.083 488.145 397.4854 488.7651 396.9111 488.749 C
406.9297 489.0273 412.002 496.8457 419.1592 502.6123 c
426.9443 508.8833 436.1279 510.5728 445.7607 508.0884 c
446.3008 507.9492 447.0313 507.625 447.4531 507.5166 c
447.4531 507.5166 l
f
/BBAccumRotation (0.200109) XT
U
u
440.0898 511.3613 m
431.9414 512.8062 423.8945 512.8862 415.9131 510.5259 c
409.9873 508.7739 404.6719 505.4741 399.5 502.1855 c
392.124 497.4941 382.7803 492.4961 374.0752 496.5552 C
374.6299 496.2969 375.2725 496.2261 375.8311 495.9663 c
376.1563 495.8315 376.4834 495.6978 376.8096 495.563 C
376.3096 495.7275 375.8076 495.8936 375.3076 496.0591 C
385.8945 493.4023 395.4229 501.6577 403.958 506.5762 c
414.6846 512.7593 426.2236 514.0957 438.335 511.9502 c
438.9365 511.8438 439.4912 511.4678 440.0898 511.3613 c
440.0898 511.3613 l
f
/BBAccumRotation (0.200109) XT
U
0.615686 0.705882 0.721569 0.827451 0.137255 0.078431 0.047059 Xa
251.4717 236.085 m
250.459 230.9717 246.7598 227.4932 246.397 221.9072 C
247.7417 227.6914 252.0479 230.1406 254.6299 237.5908 c
256.1182 241.8799 256.1313 245.8193 254.7715 246.5938 c
252.2886 248.002 252.5654 241.6074 251.4717 236.085 c
f
251.5938 235.8711 m
250.5811 230.7578 246.8828 227.2793 246.5186 221.6982 C
247.8638 227.4805 252.1699 229.9277 254.7524 237.377 c
256.2402 241.6689 256.2534 245.6084 254.894 246.3799 c
252.4106 247.791 252.687 241.3975 251.5938 235.8711 c
f
u
0 0 0 0 1 1 1 Xa
194.6919 262.3555 m
194.5713 262.6777 188.6377 278.5459 173.3472 295.2588 C
173.6055 294.9053 187.749 282.1631 194.6919 262.3555 C
f
/BBAccumRotation (0.200109) XT
U
u
121.0093 446.3066 m
120.9102 445.9155 116.0366 426.8701 122.0552 399.0176 C
122.0078 399.5488 114.354 422.9268 121.0093 446.3066 C
f
U
u
136.5273 488.0488 m
136.3936 487.7642 129.8228 473.9077 129.1802 452.8667 C
129.2383 453.2656 128.002 471.0767 136.5273 488.0488 C
f
U
256.2236 213.8262 m
253.8999 211.3076 245.5659 202.3359 238.2168 203.2471 c
232.6704 203.9326 226.8232 209.1621 221.9814 220.4229 C
225.4761 214.833 232.0767 205.3857 238.9395 205.126 c
245.2607 204.8867 256.2236 213.8262 y
f
/BBAccumRotation (0.200109) XT
0 0.870588 0.654902 0 0.929412 0.247059 0.321569 Xa
459.0576 284.957 m
451.8457 292.2734 467.4219 294.6953 474.6797 298.7529 c
479.9814 301.7197 487.3262 305.0977 484.9434 297.0557 c
482.5586 289.0156 472.0332 271.8037 459.0576 284.957 c
f
u
*u
1 D
0.152941 0.729412 0.419608 0.003922 0.807843 0.384314 0.454902 Xa
320.5938 233.7334 m
317.0381 232.4531 313.3545 230.9443 309.6348 229.2969 C
312.0762 229.917 314.7178 229.7324 316.1504 228.2773 c
318.1523 226.2402 317.1934 219.5996 318.1797 216.8857 C
329.1162 214.5986 348.0059 215.2871 354.1895 226.6875 c
356.1748 230.3467 356.9316 235.9121 358.668 240.0674 c
359.2832 241.5469 359.9883 244.0332 360.8975 246.4033 C
347.8838 240.9609 333.9834 238.5527 320.5938 233.7334 c
f
/BBAccumRotation (0.200109) XT
255.0444 200.3633 m
260.499 197.6143 269.3623 197.2832 273.8491 197.4746 c
278.7778 197.6816 291.0869 197.1123 289.8232 204.3682 c
288.9053 209.6494 281.3721 213.9795 292.4102 215.3477 c
295.2041 215.6924 303.2324 212.001 305.373 214.3564 c
307.792 217.0225 303.2646 222.2744 304.3154 225.4248 c
304.6074 226.2959 305.291 227.0801 306.1953 227.7334 C
283.6187 217.2764 260.5122 202.416 255.0444 200.3633 C
f
/BBAccumRotation (0.200109) XT
366.1748 235.0225 m
365.084 231.9541 362.6348 227.3125 364.5547 224.6211 c
368.6768 218.8281 380.4717 230.3984 383.625 234.0244 c
392.9561 244.7676 398.8408 256.4014 396.3867 269.7158 C
388.3018 263.666 380.8828 257.5146 371.7607 251.9033 c
371.21 251.5654 370.6514 251.2549 370.0967 250.9355 C
370.8711 249.8438 371.3301 248.3994 371.3691 246.9414 c
371.4795 242.5469 367.5713 238.958 366.1748 235.0225 c
f
/BBAccumRotation (0.200109) XT
*U
U
u
0 D
0.313726 0.839216 0.662745 0.247059 0.552941 0.231373 0.266667 Xa
353.5596 205.8604 m
412.5703 226.9619 453.2861 254.4248 491.6504 301.249 C
450.4141 242.1924 393.9063 213.4131 353.5596 205.8604 C
f
/BBAccumRotation (0.200109) XT
U
0.141176 0.996078 1 0.047059 0.776471 0.035294 0.121569 Xa
364.2383 297.374 m
365.3447 299.3984 375.3408 288.0176 391.3604 291.2666 C
381.1895 285.915 362.1807 293.6162 364.2383 297.374 c
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
