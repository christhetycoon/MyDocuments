%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (administrator) ()
%%Title: (Red striped heart.eps)
%%CreationDate: 10/19/2008 2:07 PM
%%BoundingBox: 58 31 1235 955
%%HiResBoundingBox: 58.7476 31.8496 1234.415 954.0347
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([\721\756\742\754\745\771\745\755\750\745])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 650.5 499.5 650.5 499.5
%AI3_TileBox: 352.3999 79.0996 947.5996 920.8999
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1300 1000
%AI5_RulerUnits: 2
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -38.377 1074.3809 0.6667 1254 884 18 0 0 32 104 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\317\345\360\345\365\356\344") (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (\310\355\361\362\360\363\354\345\355\362\340\360\350\351 Adobe \357\356 \360\340\341\356\362\345 \361 \361\350\354\342\356\353\340\354\350) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (\322\360\340\361\361\350\360\356\342\352\340) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\323\347\356\360\367\340\362\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\316\341\372\345\352\362\355\340\377 \352\350\361\362\374") (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\312\340\353\353\350\343\360\340\364\350\367\345\361\352\340\377 \352\350\361\362\374") (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (\317\356\361\362\360\356\367\355\373\351 \352\356\354\357\356\355\356\342\371\350\352 Adobe) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (\321\356\361\362\340\342\355\373\345 \364\350\343\363\360\373 Adobe) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe Envelope) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (\302\355\345\370\355\350\351 \354\356\344\363\353\374 Adobe "\301\373\361\362\360\340\377 \347\340\353\350\342\352\340") (Live Paint.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Unnamed gradient 138)
(Unnamed gradient 138) 1 4 Bd
[
0.062745
1
1
0.011765
0.87451
<
08090A0B0C0D0D0E0F0F0F101010
>
0
4 %_Br
<
101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C0C0C0C0B0B0B0B0B0B0B0A
0A0A0A0A0A0A09090909090909080808080808080707080808080807070707080808070706070706
07050506060606050505050606060505050505050504040404040404030303030304040303030303
03030203030303030302020202020201000000000000010000000000010100000000010101000000
000000000000000000000000000000
>
<
FFFFFFFFFFFFFFFFFFFFFEFEFDFDFCFCFCFCFBFBFAFAF9F9F8F8F8F7F7F6F5F5F4F4F3F2F2F2F1F0
F0EFEEEDECECEBEBEAE9E8E8E7E6E5E4E3E3E3E2E1E0DFDEDDDCDBDBDAD8D7D6D5D4D3D2D1D1D0CF
CECDCCCAC9C8C7C6C6C5C4C3C2C1C0BEBDBCBCBBBAB9B9B7B6B5B4B3B3B1B0AFADACABAAA8A7A7A5
A4A3A1A09F9D9C9B9B9A9897959492908F8E8D8D8B8A8987868584828181807F7D7C7A7978777575
747372706F6E6D6B6A6A6968666563
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFDFBF8
F6F4F2F0EEEDEBE9E7E5E3E2E0DEDCDAD8D6D5D3D1D0CECCCBC9C7C5C4C2C1BFBDBBB9B8B6B4B2B0
AFADABAAA9A7A6A4A3A1A09E9D9B9997959492908F8D8C8A8887868482817F7E7C7B7A7877767372
71706F6E6C6B6A696765646361605F5D5C5B5A5857565554535251504F4D4C4B4A48474645444341
403F3E3D3C3B3B3A39373736353433
>
<
03030303020202020202020202020202020201010101010101010101010101010101010101010100
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000
>
<
DFDFDFDFE0E0E0E0E0E0E0E1E1E1E1E1E1E1E2E2E2E2E2E2E2E3E3E3E3E3E3E3E4E4E4E4E4E4E4E5
E5E5E5E5E5E5E6E6E6E6E6E6E6E7E7E7E7E7E7E7E8E8E8E8E8E8E8E9E9E9E9E9E9E9EAEAEAEAEAEA
EAEBEBEBEBEBEBECECECECECECECEDEDEDEDEDEDEDEEEEEEEEEEEEEEEFEFEFEFEFEFEFF0F0F0F0F0
F0F0F1F1F1F1F1F1F1F2F2F2F2F2F2F2F3F3F3F3F3F3F3F4F4F4F4F4F4F4F5F5F5F5F5F5F5F6F6F6
F6F6F6F6F7F7F7F7F7F7F7F8F8F8F8
>
<
10111213141515161718191A1B1C1D1E1E1F20212223242526272728292A2B2C2D2E2F3030313233
3435363738393A3A3B3C3D3E3F40414243434445464748494A4B4C4C4D4E4F505152535455555657
58595A5B5C5D5E5F5F60616263646566676868696A6B6C6D6E6F70717172737475767778797A7A7B
7C7D7E7F80818283838485868788898A8B8C8D8D8E8F90919293949596969798999A9B9C9D9E9F9F
A0A1A2A3A4A5A6A7A8A8A9AAABACAD
>
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAE
>
4 %_Br
0
<
63636363636363636363636363636363636365656565656565656565656565656666666666666666
6668686868686868696969696969696A6A6A6A6A6A6C6C6C6C6C6D6D6D6D6D6E6E6E6E7070707070
717171717272727273737374757575767676767878787979797A7A7A7C7C7C7C7D7D7D7F7F808080
818181838383848485858586868687878989898A8A8B8B8D8D8D8E8E8F8F91919192929393959596
9698989999999B9B9C9C9E9E9F9FA1A1A2A4A4A5A5A7A7A8A8A9A9AAAAABACACADADAFAEB0B0B1B2
B2B3B3B4B6B6B7B7B8B9B9BABABBBDBDBEBFBFC0C0C1C2C2C3C4C4C5C6C6C7C8C8C9CACACBCCCDCD
CDCECECFD0D0D1D2D3D3D4D5D6D6D7D7D7D8D9DADADBDCDDDEDEDEDFE0E0E1E2E2E3E3E4E4E5E6E6
E7E7E8E8E8E9EAEAEBECECECEDEDEEEEEFEFEFF0F1F1F2F2F2F3F3F4F4F5F5F6F6F7F7F7F8F8F8F9
F9F9FAFAFAFAFBFBFBFBFBFCFBFCFCFCFCFCFCFDFDFDFDFDFD
>
<
33333333333333333333333333333333333334343434343434343434343434343535353535353535
35363636363636363636363636363637373737373938383838383939393939393939393A3A3A3A3A
3B3B3B3B3C3C3C3C3D3D3D3E3E3E3E3E3E3E41404040414141424242434343454444464545464646
47474748484A49494A4A4A4B4B4D4D4D4E4E4F4F4F50505151525252535354545555575656575758
5859595A5A5C5C5E5D5F5E6060626163626363646465656768686A696B6A6B6B6D6F6E706F727172
757476757779787A797A7D7C7E7D7F8180828483858786888A898C8D8D8F90909193929495959799
989A9C9E9D9FA1A1A2A4A6A5A7A9AAAAACADAFAEB0B2B3B3B5B6B8B7B9BABCBEBDBFC1C2C3C3C4C6
C7C9C9CBCDCFD0D2D2D4D5D7D9DADCDCDDDFE0E2E3E5E6E6E7E7E8E9EAECEDEFEFF0F2F3F5F6F8F9
FAFBFDFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
0
<
F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8
F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8
F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9
F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFA
FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFA
FAFAFAFAFAFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB
FBFBFBFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFD
FDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFEFE
FEFEFEFEFEFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
ADADADADADADADADADADADADADADADADADADACACACACACACACACACACACACACACABABABABABABABAB
ABAAAAAAAAAAAAAAA9A9A9A9A9A9A9A8A8A8A8A8A8A7A7A7A7A7A6A6A6A6A6A5A5A5A5A4A4A4A4A4
A3A3A3A3A2A2A2A2A1A1A1A1A0A0A09F9F9F9F9E9E9E9D9D9D9C9C9C9B9B9B9B9A9A9A9999989898
9797979696969595949494939393929291919190908F8F8E8E8E8D8D8C8C8B8B8B8A8A8989888887
878686858585848483838282818180807F7E7E7D7D7C7C7B7B7A7A79797877777676757574747372
727171706F6F6E6E6D6C6C6B6B6A696968676766666564646362626160605F5E5E5D5C5C5B5A5959
5857575655555453525251504F4F4E4D4D4C4B4A4A4948474646454443434241403F3F3E3D3C3B3B
3A3938373736353433323231302F2E2D2C2C2B2A29282726262524232221201F1E1D1D1C1B1A1918
1716151413121110100F0E0D0C0B0A09080706050403020100
>
<
AEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEADADADADADADADADADADADADADADACACACACACACACAC
ACABABABABABABABAAAAAAAAAAAAAAA9A9A9A9A9A8A8A8A8A8A8A7A7A7A7A7A6A6A6A6A5A5A5A5A5
A4A4A4A4A3A3A3A3A2A2A2A1A1A1A1A0A0A09F9F9F9F9E9E9E9D9D9D9C9C9C9B9B9B9A9A9A999999
98989897979696969595959494939393929291919190908F8F8E8E8E8D8D8C8C8B8B8A8A8A898988
88878786868585848483838282818180807F7F7E7E7D7D7C7B7B7A7A797978787776767575747473
72727171706F6F6E6E6D6C6C6B6B6A6969686767666565646363626161605F5F5E5D5D5C5B5B5A59
595857565655545453525151504F4E4E4D4C4B4B4A494848474645454443424141403F3E3D3D3C3B
3A3939383736353434333231302F2E2E2D2C2B2A29282727262524232221201F1F1E1D1C1B1A1918
1716151413121211100F0E0D0C0B0A09080706050403020100
>
4 %_Br
[
0.062745 1 1 0.011765 0.87451 0.031373 0 2 32.0513 0 %_BS
%_0.062745 1 1 0.011765 0.87451 0.031373 0 2 32.0513 0 Bs
0.062745 1 1 0.011765 0.87451 0.062745 0 2 50 50 %_BS
%_0.062745 1 1 0.011765 0.87451 0.062745 0 2 50 50 Bs
0 0.388235 0.2 0 0.972549 0.678431 0.682353 2 70.4225 81.3187 %_BS
%_0 0.388235 0.2 0 0.972549 0.678431 0.682353 2 70.4225 81.3187 Bs
0 0.992157 1 0 1 0 0 2 50 100 %_BS
%_0 0.992157 1 0 1 0 0 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 1)
(\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 1) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 2)
(\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 2) 0 7 Bd
[
<
DFDFE0E0E1E1E1E2E1E2E3E3E3E3E4E4E4E4E5E5E5E6E6E6E6E6E7E6E6E7E6E7E6E6E7E7E7E7E7E7
E7E7E7E7E7E7E7E6E7E6E7E7E6E6E6E5E6E5E5E5E4E4E5E4E3E3E3E2E2E1E0E1E0DFDFDFDEDEDDDD
DDDCDCDBDAD9DAD9D8D8D7D7D7D6D5D5D4D3D3D2D2D1D0D0CFD0CFCDCECCCDCCCCCACBC9C8C8C7C7
C7C6C6C5C5C4C4C3C3C3C2C2C1C1C1C1BFBFBFBEBEBEBE
>
<
8688888A8C8C8E90909294949698989A9A9C9E9EA0A2A2A4A6A6A8A8AAACACAEAEAFB1B1B3B3B5B7
B7B9B9BBBCBDBEBEC0C1C2C4C4C6C6C7C8C9C9CBCBCDCECED0D0D1D2D3D3D5D5D6D6D8D8DADADCDC
DEDEDFDFE1E1E2E3E3E4E4E6E6E7E8E9E9E9EBEBECECEDEEEEEFF0F0F1F1F3F3F3F4F4F4F5F5F5F6
F6F6F8F7F7F8F8F8F8F9F9F9F9FAFAFAFAFAFBFBFBFBFB
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000001010101010101030302020202
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000010101010101
>
<
000102030405060708090A0B0C0D0E0F10111213141415161718191A1B1C1D1E1F20202122232425
26272828292A2B2C2D2E2E2F3031323333343536373838393A3B3B3C3D3E3F3F4041424243444545
46474748494A4A4B4C4C4D4E4E4F50505152525353545555565657585859595A5A5B5B5C5D5D5E5E
5E5F5F6060616162626263636464646465656566666666
>
<
7170706F6E6E6D6C6C6B6A6A696868676766656564636362616160605F5E5E5D5D5C5B5B5A5A5958
5857575655555454535352515150504F4F4E4E4D4D4C4B4B4A4A4949484847474646454544444343
4242414140403F3F3F3E3E3D3D3C3C3B3B3B3A3A3939393838373737363635353534343433333332
3232313131303030302F2F2F2F2E2E2E2E2E2D2D2D2D2D
>
<
BCBCBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEAEADADAC
ACACABABABAAAAAAA9A9A8A8A8A7A7A7A6A6A6A5A5A5A4A4A4A3A3A3A2A2A2A1A1A1A0A0A09F9F9F
9E9E9E9E9D9D9D9C9C9C9C9B9B9B9A9A9A9A99999999989898989797979796969696959595959594
9494949493939393939392929292929292919191919191
>
4 %_Br
<
B1B2B3B3B4B5B5B6B7B8B9BABBBBBCBDBDBEBFBFBFC0C1C2C2C2C3C4C5C6C6C7C8C9C9CACBCBCCCC
CDCECFCFD0D1D1D2D3D3D4D5D5D6D6D7D8D8D9DADBDBDCDCDDDDDEDEDEDFDF
>
<
242526282A2B2C2E2F3032333536383A3B3D3E3F424345464848494B4C4E4F515254565859595B5C
5E5F6163656666686A6C6D6F6F7072747676787A7B7B7D7F7F818382848686
>
0
0
0
<
AEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796969594939291908F8E8D8C8B8B8A89
888786858483838281807F7E7E7D7C7B7A7A79787777767575747373727171
>
<
EFEEEDECECEBEAE9E8E7E7E6E5E4E3E3E2E1E0DFDFDEDDDCDBDBDAD9D8D7D7D6D5D4D4D3D2D1D1D0
CFCECECDCCCBCBCAC9C9C8C7C7C6C5C5C4C3C3C2C1C1C0C0BFBEBEBDBDBCBC
>
4 %_Br
<
80818281838485868586878889898A8B8B8C8C8D8E8F8F8F90909292929394949495969697979798
999A9A9A9B9B9C9C9D9D9E9E9E9F9FA0A1A1A1A2A2A3A3A4A4A5A5A5A6A6A8A7A8A8A9A9A9AAABAB
ACABACACACAEAEAEAEAFAFAFB0B0B1B1B1B1B2B2B3B3B3B3B3B4B3B4B4B5B4B5B5B5B6B5B5B6B6B6
B6B6B7B7B7B7B7B7B7B7B7B7B7B7B7B7B8B8B8B8B8B7B7B7B8B7B7B7B7B7B7B7B7B7B7B7B7B7B7B6
B6B6B6B6B5B5B5B5B4B4B4B3B3B3B2B1B1
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000101
01010101010303030202020204040404040404040606060606060607070707070707090909090909
0A0A0C0C0C0C0C0C0C0E0E0E0E0E0E0F101010111111111113131313131314151616161616171919
19191A1A1A1B1D1D1E1E1F1F2022232324
>
<
FDFBFAF9F8F7F6F5F4F3F2F1F1F0EFEDECEAE9E7E6E4E2E0DEDDDCDBDAD9D7D6D5D4D3D2D1D0CECD
CBCAC8C7C6C5C4C3C2C1BFBEBCBBBAB9B7B6B4B3B2B0AFADACABA9A8A6A5A3A2A09F9D9C9A989795
949291908E8C8B8987868483817F7E7C7A7977767372706F6D6C6A6866646261605E5C5A59575654
53514E4D4B4948464441403E3D3B3938353332302F2D2B2A27252321201E1C1A1816141311100D0C
0A08070504020000000000000000000000
>
0
<
8C8B8A8A8988878686858483828281807F7E7E7D7C7B7B7A7978777776757473737271706F6F6E6D
6C6B6B6A6968676766656463636261605F5F5E5D5C5B5B5A595858575655545453525150504F4E4D
4C4C4B4A494848474645444443424140403F3E3D3C3C3B3A393838373635353433323131302F2E2D
2D2C2B2A292928272625252423222121201F1E1D1D1C1B1A191918171615151413121211100F0E0E
0D0C0B0A0A090807060605040302020100
>
<
C6C6C6C6C5C5C5C5C5C5C5C5C4C4C4C4C4C4C4C3C3C3C3C3C3C3C2C2C2C2C2C2C2C2C1C1C1C1C1C1
C1C0C0C0C0C0C0C0BFBFBFBFBFBFBFBFBEBEBEBEBEBEBEBDBDBDBDBDBDBDBCBCBCBCBCBCBCBCBBBB
BBBBBBBBBBBABABABABABABAB9B9B9B9B9B9B9B9B8B8B8B8B8B8B8B7B7B7B7B7B7B7B6B6B6B6B6B6
B6B6B5B5B5B5B5B5B5B4B4B4B4B4B4B4B3B3B3B3B3B3B3B3B2B2B2B2B2B2B2B1B1B1B1B1B1B1B0B0
B0B0B0B0B0B0AFAFAFAFAFAFAFAEAEAEAE
>
<
3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566
6768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E
8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6
B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDE
DFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
>
4 %_Br
<
0000010102020303040405060607070809090B0C0C0D0F0E101112121415161617191A1A1B1D1E1E
1F202223232425272828292A2B2D2E2E2F3032333436363738393A3B3C3C3D3E3F40424344454546
47494A4B4C4D4E50515252535455565758595A5B5C5D5E60616162626364666768696A6B6C6D6E6F
707172737475767778797A7A7B7C7D7E7F80
>
<
3F3F3F3F3E3E3E3E3E3E3D3D3D3C3C3C3B3B3B3A3A3A393939373737363635353535343433333232
3231313030302F2F2E2E2E2D2D2C2B2B2B2A2A2928262626252524242323232222212120201F1F1F
1E1E1D1D1C1C1B1A1A191919181615151414131312121111100F0F0F0E0E0D0D0C0C0B0A0A0A0909
080807050505040403030302020201010100
>
<
FBFBFCFCFCFCFDFDFDFDFDFEFDFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFEFFFFFEFEFDFDFCFD
>
0
<
FFFFFEFEFDFDFCFCFBFBFAF9F9F8F8F7F6F6F5F4F4F3F2F2F1F0EFEFEEEDECECEBEAE9E9E8E7E6E6
E5E4E3E2E2E1E0DFDEDEDDDCDBDAD9D9D8D7D6D5D4D3D3D2D1D0CFCECDCDCCCBCAC9C8C7C6C5C5C4
C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E
9D9C9B9A999897969594939291908F8E8D8C
>
<
C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3
C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4
C4C4C4C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5
C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6
>
<
0E0E0E0E0F0F0F0F1010101011111111121212131313131414141515151616161717171818181919
191A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F1F202021212122222223232424242525252626272727
28282829292A2A2A2B2B2C2C2C2D2D2E2E2E2F2F3030303131323232333334343435353636373737
38383939393A3A3B3B3C3C3C3D3D3E3E3F3F
>
4 %_Br
0
<
807E7D7B7A79777776747371706F6D6C6B6A686765646361605F5D5C5B59585755545352504F4E4C
4B4A4847454443413F
>
0.984314
0
<
F7F7F7F7F8F8F8F8F8F8F9F9F9F9F9F9FAFAFAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFCFDFDFDFDFDFD
FEFEFEFEFEFEFFFFFF
>
<
93949596979899999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBFC0C1C2
>
<
1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A19191918181817171716161515151414141313131212121111
111010100F0F0F0E0E
>
4 %_Br
<
01010101010101000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
>
<
FDFCFCFBFBFAFAF9F9F8F8F7F6F6F5F5F4F4F3F2F2F1F0F0EFEEEDEDEDECEBEBEAE9E8E8E8E7E6E5
E4E4E4E3E2E1E0E0DFDEDDDCDCDBDAD9D8D8D7D6D5D5D3D2D1D1D0CFCFCECDCCCCCBCACAC9C8C8C7
C6C6C4C3C3C2C1C1BFBFBEBDBDBBBABAB9B9B8B7B7B6B6B5B5B4B4B3B1B1B0B0AFAFADADACACABAB
AAAAA8A8A7A7A5A5A4A4A3A3A3A2A2A0A09F9F9F9D9D9C9C9C9A9B99999998989896969595959494
94929292919191919090908E8E8E8E8D8D8D8D8B8B8B8B8989898987878787878686868686868484
84848484828282828282828281818181818181818181818180808080808080808080808080808080
>
<
F8F8F8F9F9F9F9F9F9FAFAFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFEFEFEFEFEFEFFFF
FFFFFFFFFFFFFFFFFFFEFEFDFDFDFDFCFCFDFDFDFDFDFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB
FBFBFBFCFCFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFEFEFEFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFE
FEFEFEFEFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFC
FCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB
>
0
<
EDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0
F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5
F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7
>
<
1C1D1E1F202122232425262728292A2B2C2C2D2E2F30313233343536363738393A3B3C3D3D3E3F40
41424243444546464748494A4A4B4C4D4E4E4F50515152535454555656575859595A5B5B5C5D5D5E
5F5F606161626363646465666667686869696A6B6B6C6C6D6D6E6E6F707071717272737374747575
76767777787879797A7A7B7B7B7C7C7D7D7E7E7E7F7F808080818182828283838384848585858686
86878787888888888989898A8A8A8A8B8B8B8B8C8C8C8C8D8D8D8D8E8E8E8E8E8F8F8F8F8F8F9090
90909090919191919191919192929292929292929292929293939393939393939393939393939393
>
<
24242424242424242424242323232323232323232323232323232323232323232222222222222222
22222222222222222222222222222222222121212121212121212121212121212121212121212121
2121212121202020202020202020202020202020202020202020202020202020202020202020201F
1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F
1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
>
4 %_Br
[
0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 2 50 99.7006 %_BS
%_0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 2 50 99.7006 Bs
0.87451 0.52549 0 0 0 0.443137 0.737255 2 39.0625 80.5389 %_BS
%_0.87451 0.52549 0 0 0 0.443137 0.737255 2 39.0625 80.5389 Bs
0.694118 0.141176 0 0 0 0.682353 0.937255 2 45 62.5749 %_BS
%_0.694118 0.141176 0 0 0 0.682353 0.937255 2 45 62.5749 Bs
0.501961 0 0.992157 0 0.54902 0.776471 0.247059 2 50 47.6048 %_BS
%_0.501961 0 0.992157 0 0.54902 0.776471 0.247059 2 50 47.6048 Bs
0 0.247059 0.984314 0 1 0.760784 0.054902 2 56.1404 30.5389 %_BS
%_0 0.247059 0.984314 0 1 0.760784 0.054902 2 56.1404 30.5389 Bs
0 0.501961 0.984314 0 0.968627 0.576471 0.117647 2 51.0204 16.4671 %_BS
%_0 0.501961 0.984314 0 0.968627 0.576471 0.117647 2 51.0204 16.4671 Bs
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 2 29.0909 0 %_BS
%_0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 2 29.0909 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 1)
(\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 1) 1 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 2)
(\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 2) 1 7 Bd
[
<
01010101010101000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
>
<
FDFCFCFBFBFAFAF9F9F8F8F7F6F6F5F5F4F4F3F2F2F1F0F0EFEEEDEDEDECEBEBEAE9E8E8E8E7E6E5
E4E4E4E3E2E1E0E0DFDEDDDCDCDBDAD9D8D8D7D6D5D5D3D2D1D1D0CFCFCECDCCCCCBCACAC9C8C8C7
C6C6C4C3C3C2C1C1BFBFBEBDBDBBBABAB9B9B8B7B7B6B6B5B5B4B4B3B1B1B0B0AFAFADADACACABAB
AAAAA8A8A7A7A5A5A4A4A3A3A3A2A2A0A09F9F9F9D9D9C9C9C9A9B99999998989896969595959494
94929292919191919090908E8E8E8E8D8D8D8D8B8B8B8B8989898987878787878686868686868484
84848484828282828282828281818181818181818181818180808080808080808080808080808080
>
<
F8F8F8F9F9F9F9F9F9FAFAFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFEFEFEFEFEFEFFFF
FFFFFFFFFFFFFFFFFFFEFEFDFDFDFDFCFCFDFDFDFDFDFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB
FBFBFBFCFCFDFDFDFDFDFDFDFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFDFDFDFDFEFEFEFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFEFEFEFEFE
FEFEFEFEFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFEFEFEFEFDFDFCFCFCFCFCFCFCFCFCFCFCFCFCFCFC
FCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFBFBFBFBFBFBFBFBFBFBFBFBFBFBFBFB
>
0
<
EDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0
F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3
F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5
F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6
F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7
F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7
>
<
1C1D1E1F202122232425262728292A2B2C2C2D2E2F30313233343536363738393A3B3C3D3D3E3F40
41424243444546464748494A4A4B4C4D4E4E4F50515152535454555656575859595A5B5B5C5D5D5E
5F5F606161626363646465666667686869696A6B6B6C6C6D6D6E6E6F707071717272737374747575
76767777787879797A7A7B7B7B7C7C7D7D7E7E7E7F7F808080818182828283838384848585858686
86878787888888888989898A8A8A8A8B8B8B8B8C8C8C8C8D8D8D8D8E8E8E8E8E8F8F8F8F8F8F9090
90909090919191919191919192929292929292929292929293939393939393939393939393939393
>
<
24242424242424242424242323232323232323232323232323232323232323232222222222222222
22222222222222222222222222222222222121212121212121212121212121212121212121212121
2121212121202020202020202020202020202020202020202020202020202020202020202020201F
1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F
1F1F1F1F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E1E
>
4 %_Br
0
<
807E7D7B7A79777776747371706F6D6C6B6A686765646361605F5D5C5B59585755545352504F4E4C
4B4A4847454443413F
>
0.984314
0
<
F7F7F7F7F8F8F8F8F8F8F9F9F9F9F9F9FAFAFAFAFAFAFBFBFBFBFBFBFCFCFCFCFCFCFDFDFDFDFDFD
FEFEFEFEFEFEFFFFFF
>
<
93949596979899999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9
BABBBCBDBEBFC0C1C2
>
<
1E1E1D1D1D1C1C1C1B1B1B1A1A1A1A19191918181817171716161515151414141313131212121111
111010100F0F0F0E0E
>
4 %_Br
<
0000010102020303040405060607070809090B0C0C0D0F0E101112121415161617191A1A1B1D1E1E
1F202223232425272828292A2B2D2E2E2F3032333436363738393A3B3C3C3D3E3F40424344454546
47494A4B4C4D4E50515252535455565758595A5B5C5D5E60616162626364666768696A6B6C6D6E6F
707172737475767778797A7A7B7C7D7E7F80
>
<
3F3F3F3F3E3E3E3E3E3E3D3D3D3C3C3C3B3B3B3A3A3A393939373737363635353535343433333232
3231313030302F2F2E2E2E2D2D2C2B2B2B2A2A2928262626252524242323232222212120201F1F1F
1E1E1D1D1C1C1B1A1A191919181615151414131312121111100F0F0F0E0E0D0D0C0C0B0A0A0A0909
080807050505040403030302020201010100
>
<
FBFBFCFCFCFCFDFDFDFDFDFEFDFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFEFFFFFEFEFDFDFCFD
>
0
<
FFFFFEFEFDFDFCFCFBFBFAF9F9F8F8F7F6F6F5F4F4F3F2F2F1F0EFEFEEEDECECEBEAE9E9E8E7E6E6
E5E4E3E2E2E1E0DFDEDEDDDCDBDAD9D9D8D7D6D5D4D3D3D2D1D0CFCECDCDCCCBCAC9C8C7C6C5C5C4
C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E
9D9C9B9A999897969594939291908F8E8D8C
>
<
C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3
C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4
C4C4C4C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5
C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6
>
<
0E0E0E0E0F0F0F0F1010101011111111121212131313131414141515151616161717171818181919
191A1A1A1B1B1B1C1C1C1D1D1D1E1E1E1F1F1F202021212122222223232424242525252626272727
28282829292A2A2A2B2B2C2C2C2D2D2E2E2E2F2F3030303131323232333334343435353636373737
38383939393A3A3B3B3C3C3C3D3D3E3E3F3F
>
4 %_Br
<
80818281838485868586878889898A8B8B8C8C8D8E8F8F8F90909292929394949495969697979798
999A9A9A9B9B9C9C9D9D9E9E9E9F9FA0A1A1A1A2A2A3A3A4A4A5A5A5A6A6A8A7A8A8A9A9A9AAABAB
ACABACACACAEAEAEAEAFAFAFB0B0B1B1B1B1B2B2B3B3B3B3B3B4B3B4B4B5B4B5B5B5B6B5B5B6B6B6
B6B6B7B7B7B7B7B7B7B7B7B7B7B7B7B7B8B8B8B8B8B7B7B7B8B7B7B7B7B7B7B7B7B7B7B7B7B7B7B6
B6B6B6B6B5B5B5B5B4B4B4B3B3B3B2B1B1
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000101
01010101010303030202020204040404040404040606060606060607070707070707090909090909
0A0A0C0C0C0C0C0C0C0E0E0E0E0E0E0F101010111111111113131313131314151616161616171919
19191A1A1A1B1D1D1E1E1F1F2022232324
>
<
FDFBFAF9F8F7F6F5F4F3F2F1F1F0EFEDECEAE9E7E6E4E2E0DEDDDCDBDAD9D7D6D5D4D3D2D1D0CECD
CBCAC8C7C6C5C4C3C2C1BFBEBCBBBAB9B7B6B4B3B2B0AFADACABA9A8A6A5A3A2A09F9D9C9A989795
949291908E8C8B8987868483817F7E7C7A7977767372706F6D6C6A6866646261605E5C5A59575654
53514E4D4B4948464441403E3D3B3938353332302F2D2B2A27252321201E1C1A1816141311100D0C
0A08070504020000000000000000000000
>
0
<
8C8B8A8A8988878686858483828281807F7E7E7D7C7B7B7A7978777776757473737271706F6F6E6D
6C6B6B6A6968676766656463636261605F5F5E5D5C5B5B5A595858575655545453525150504F4E4D
4C4C4B4A494848474645444443424140403F3E3D3C3C3B3A393838373635353433323131302F2E2D
2D2C2B2A292928272625252423222121201F1E1D1D1C1B1A191918171615151413121211100F0E0E
0D0C0B0A0A090807060605040302020100
>
<
C6C6C6C6C5C5C5C5C5C5C5C5C4C4C4C4C4C4C4C3C3C3C3C3C3C3C2C2C2C2C2C2C2C2C1C1C1C1C1C1
C1C0C0C0C0C0C0C0BFBFBFBFBFBFBFBFBEBEBEBEBEBEBEBDBDBDBDBDBDBDBCBCBCBCBCBCBCBCBBBB
BBBBBBBBBBBABABABABABABAB9B9B9B9B9B9B9B9B8B8B8B8B8B8B8B7B7B7B7B7B7B7B6B6B6B6B6B6
B6B6B5B5B5B5B5B5B5B4B4B4B4B4B4B4B3B3B3B3B3B3B3B3B2B2B2B2B2B2B2B1B1B1B1B1B1B1B0B0
B0B0B0B0B0B0AFAFAFAFAFAFAFAEAEAEAE
>
<
3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60616263646566
6768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E
8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6
B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDE
DFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
>
4 %_Br
<
B1B2B3B3B4B5B5B6B7B8B9BABBBBBCBDBDBEBFBFBFC0C1C2C2C2C3C4C5C6C6C7C8C9C9CACBCBCCCC
CDCECFCFD0D1D1D2D3D3D4D5D5D6D6D7D8D8D9DADBDBDCDCDDDDDEDEDEDFDF
>
<
242526282A2B2C2E2F3032333536383A3B3D3E3F424345464848494B4C4E4F515254565859595B5C
5E5F6163656666686A6C6D6F6F7072747676787A7B7B7D7F7F818382848686
>
0
0
0
<
AEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796969594939291908F8E8D8C8B8B8A89
888786858483838281807F7E7E7D7C7B7A7A79787777767575747373727171
>
<
EFEEEDECECEBEAE9E8E7E7E6E5E4E3E3E2E1E0DFDFDEDDDCDBDBDAD9D8D7D7D6D5D4D4D3D2D1D1D0
CFCECECDCCCBCBCAC9C9C8C7C7C6C5C5C4C3C3C2C1C1C0C0BFBEBEBDBDBCBC
>
4 %_Br
<
DFDFE0E0E1E1E1E2E1E2E3E3E3E3E4E4E4E4E5E5E5E6E6E6E6E6E7E6E6E7E6E7E6E6E7E7E7E7E7E7
E7E7E7E7E7E7E7E6E7E6E7E7E6E6E6E5E6E5E5E5E4E4E5E4E3E3E3E2E2E1E0E1E0DFDFDFDEDEDDDD
DDDCDCDBDAD9DAD9D8D8D7D7D7D6D5D5D4D3D3D2D2D1D0D0CFD0CFCDCECCCDCCCCCACBC9C8C8C7C7
C7C6C6C5C5C4C4C3C3C3C2C2C1C1C1C1BFBFBFBEBEBEBE
>
<
8688888A8C8C8E90909294949698989A9A9C9E9EA0A2A2A4A6A6A8A8AAACACAEAEAFB1B1B3B3B5B7
B7B9B9BBBCBDBEBEC0C1C2C4C4C6C6C7C8C9C9CBCBCDCECED0D0D1D2D3D3D5D5D6D6D8D8DADADCDC
DEDEDFDFE1E1E2E3E3E4E4E6E6E7E8E9E9E9EBEBECECEDEEEEEFF0F0F1F1F3F3F3F4F4F4F5F5F5F6
F6F6F8F7F7F8F8F8F8F9F9F9F9FAFAFAFAFAFBFBFBFBFB
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000001010101010101030302020202
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000010101010101
>
<
000102030405060708090A0B0C0D0E0F10111213141415161718191A1B1C1D1E1F20202122232425
26272828292A2B2C2D2E2E2F3031323333343536373838393A3B3B3C3D3E3F3F4041424243444545
46474748494A4A4B4C4C4D4E4E4F50505152525353545555565657585859595A5A5B5B5C5D5D5E5E
5E5F5F6060616162626263636464646465656566666666
>
<
7170706F6E6E6D6C6C6B6A6A696868676766656564636362616160605F5E5E5D5D5C5B5B5A5A5958
5857575655555454535352515150504F4F4E4E4D4D4C4B4B4A4A4949484847474646454544444343
4242414140403F3F3F3E3E3D3D3C3C3B3B3B3A3A3939393838373737363635353534343433333332
3232313131303030302F2F2F2F2E2E2E2E2E2D2D2D2D2D
>
<
BCBCBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEAEADADAC
ACACABABABAAAAAAA9A9A8A8A8A7A7A7A6A6A6A5A5A5A4A4A4A3A3A3A2A2A2A1A1A1A0A0A09F9F9F
9E9E9E9E9D9D9D9C9C9C9C9B9B9B9A9A9A9A99999999989898989797979796969696959595959594
9494949493939393939392929292929292919191919191
>
4 %_Br
[
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 2 29.0909 0 %_BS
%_0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 2 29.0909 0 Bs
0 0.501961 0.984314 0 0.968627 0.576471 0.117647 2 51.0204 16.4671 %_BS
%_0 0.501961 0.984314 0 0.968627 0.576471 0.117647 2 51.0204 16.4671 Bs
0 0.247059 0.984314 0 1 0.760784 0.054902 2 56.1404 30.5389 %_BS
%_0 0.247059 0.984314 0 1 0.760784 0.054902 2 56.1404 30.5389 Bs
0.501961 0 0.992157 0 0.54902 0.776471 0.247059 2 50 47.6048 %_BS
%_0.501961 0 0.992157 0 0.54902 0.776471 0.247059 2 50 47.6048 Bs
0.694118 0.141176 0 0 0 0.682353 0.937255 2 45 62.5749 %_BS
%_0.694118 0.141176 0 0 0 0.682353 0.937255 2 45 62.5749 Bs
0.87451 0.52549 0 0 0 0.443137 0.737255 2 39.0625 80.5389 %_BS
%_0.87451 0.52549 0 0 0 0.443137 0.737255 2 39.0625 80.5389 Bs
0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 2 50 99.7006 %_BS
%_0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 2 50 99.7006 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (\723\747\756\760 "\721\754\745\771\745\755\755\773\745 \752\742\740\744\760\740\762\773")
(\723\747\756\760 "\721\754\745\771\745\755\755\773\745 \752\742\740\744\760\740\762\773") 0 0 55.0781 55.0801 [
%AI3_Tile
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 55.0801 L
55.0781 55.0801 L
55.0781 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.047059 0.015686 0.631373 0 0.968627 0.92549 0.494118 Xa
 0.047059 0.015686 0.631373 0 0.968627 0.92549 0.494118 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
26.1436 52.3262 m
26.1436 29.4307 L
3.0313 29.4307 L
3.0313 52.3262 L
26.1436 52.3262 L
f
25.0264 50.123 m
5.8906 50.123 L
5.8906 32.4961 L
25.0264 32.4961 L
25.0264 50.123 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.0471 0.0118 0.6314 0 k
 0.0471 0.0118 0.6314 0 K
) @
(
%AI6_BeginPatternLayer
*u
5.8906 50.123 m
25.0264 50.123 L
25.0264 32.4961 L
5.8906 32.4961 L
5.8906 50.123 L
n
10.0313 34.2578 m
24.1338 34.2578 L
24.1338 48.3613 L
10.0313 48.3613 L
10.0313 34.2578 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.035294 0.639216 0.784314 0 0.92549 0.478431 0.282353 Xa
 0.035294 0.639216 0.784314 0 0.92549 0.478431 0.282353 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.4082 48.793 m
8.3057 48.793 L
8.3057 34.6895 L
22.4082 34.6895 L
22.4082 48.793 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.109804 0.929412 0.835294 0.019608 0.831373 0.215686 0.223529 Xa
 0.109804 0.929412 0.835294 0.019608 0.831373 0.215686 0.223529 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
52.6943 24.7852 m
52.6943 1.6758 L
28.9355 1.6758 L
28.9355 24.7852 L
52.6943 24.7852 L
f
47.6777 22.582 m
30.0527 22.582 L
30.0527 4.957 L
47.6777 4.957 L
47.6777 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
30.0527 22.582 m
50.6982 22.582 L
50.6982 4.957 L
30.0527 4.957 L
30.0527 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.431373 0 0.835294 0 0.611765 0.8 0.360784 Xa
 0.431373 0 0.835294 0 0.611765 0.8 0.360784 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
47.4199 21.252 m
32.2393 21.252 L
32.2393 6.5029 L
47.4199 6.5029 L
47.4199 21.252 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.494118 0.933333 0 0 0.572549 0.211765 0.580392 Xa
 0.494118 0.933333 0 0 0.572549 0.211765 0.580392 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
27.5391 27.5391 m
27.5391 0 L
0 0 L
0 27.5391 L
27.5391 27.5391 L
f
25.4316 26.1445 m
2.7529 26.1445 L
2.7529 2.1699 L
25.4316 2.1699 L
25.4316 26.1445 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.4941 0.9412 0 0 k
 0.4941 0.9412 0 0 K
) @
(
%AI6_BeginPatternLayer
*u
4.9561 7.4004 m
22.582 7.4004 L
22.582 25.0273 L
4.9561 25.0273 L
4.9561 7.4004 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.047059 0.015686 0.631373 0 0.968627 0.92549 0.494118 Xa
 0.047059 0.015686 0.631373 0 0.968627 0.92549 0.494118 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
22.582 5.6738 m
4.9561 5.6738 L
4.9561 25.0273 L
22.582 25.0273 L
22.582 5.6738 L
f
20.3887 21.3281 m
7.5811 21.3281 L
7.5811 10.0313 L
20.3887 10.0313 L
20.3887 21.3281 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.776471 0.054902 0.47451 0 0 0.682353 0.615686 Xa
 0.776471 0.054902 0.47451 0 0 0.682353 0.615686 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.9355 8.7363 m
21.0371 8.7363 L
21.0371 22.8379 L
6.9355 22.8379 L
6.9355 8.7363 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.678431 0.066667 0 0 0 0.721569 0.941176 Xa
 0.678431 0.066667 0 0 0 0.721569 0.941176 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
55.0781 55.0801 m
55.0781 27.5391 L
27.5391 27.5391 L
27.5391 55.0801 L
55.0781 55.0801 L
f
52.3252 50.9688 m
30.292 50.9688 L
30.292 28.9355 L
52.3252 28.9355 L
52.3252 50.9688 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.8235 0 0.0039 0 k
 0.8235 0 0.0039 0 K
) @
(
%AI6_BeginPatternLayer
*u
30.292 50.9688 m
52.3252 50.9688 L
52.3252 28.9355 L
30.292 28.9355 L
30.292 50.9688 L
n
32.4951 30.0527 m
50.1221 30.0527 L
50.1221 47.6777 L
32.4951 47.6777 L
32.4951 30.0527 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.031373 0.215686 0.447059 0 0.956863 0.792157 0.584314 Xa
 0.031373 0.215686 0.447059 0 0.956863 0.792157 0.584314 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
50.1221 30.0527 m
32.4951 30.0527 L
32.4951 48.9727 L
50.1221 48.9727 L
50.1221 30.0527 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.003922 0.886274 0.007843 0 0.933333 0.25098 0.592157 Xa
 0.003922 0.886274 0.007843 0 0.933333 0.25098 0.592157 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.9063 33.749 m
49.0078 33.749 L
49.0078 47.8506 L
34.9063 47.8506 L
34.9063 33.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat 4)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7540.8833 8690.9551 m
-7449.0479 8690.9551 L
-7449.0479 8686.6758 L
-7540.8833 8686.6758 L
-7540.8833 8690.9551 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
-7540.6631 8688.2754 m
-7541 8688.3418 -7540.4814 8688.5313 -7540.8833 8688.3887 C
-7540.8379 8688.2705 -7540.7725 8688.1816 -7540.6631 8688.2754 C
f
-7450.1675 8688.4414 m
-7451.2524 8689.2041 -7452.6816 8688.4336 -7453.8701 8688.9199 C
-7454.0098 8688.9521 -7453.8345 8688.502 -7454.1484 8688.6025 C
-7455.3008 8689.1953 -7457.1162 8688.8418 -7458.5195 8688.3848 C
-7458.4346 8688.2666 L
-7458.7017 8688.1816 -7459.0283 8688.5723 -7459.3115 8688.5176 C
-7459.3135 8688.4395 -7459.2207 8688.4063 -7459.2861 8688.2979 C
-7459.3574 8688.5352 -7459.7983 8688.4082 -7459.9185 8688.584 C
-7460.0303 8688.4922 -7460.0195 8688.3047 -7460.1641 8688.2002 C
-7460.3262 8688.4697 L
-7460.7769 8689.1094 -7461.4209 8688.4258 -7462.0361 8688.7559 C
-7462.0063 8688.6934 -7461.9453 8688.6445 -7461.9941 8688.584 C
-7462.9814 8688.9727 -7464.2168 8688.8994 -7465.3208 8689.043 C
-7465.2769 8688.9482 -7465.2363 8688.7754 -7465.3008 8688.668 C
-7465.3555 8688.9512 -7465.6963 8689.0225 -7465.9922 8689.0781 C
-7466.1255 8688.7871 -7466.4995 8689.3438 -7466.8467 8689.1826 C
-7466.8169 8689.1191 L
-7467.0732 8689.4238 -7467.1973 8688.9434 -7467.4053 8689.3086 C
-7467.5684 8689.0801 L
-7467.6807 8689.4902 -7467.9395 8688.8672 -7468.1514 8689.0762 C
-7468.1445 8689.1602 L
-7468.3442 8689.2598 -7468.4482 8689.0537 -7468.6338 8689.123 C
-7468.6514 8689.0762 L
-7469.0854 8689.1826 -7469.3379 8688.9551 -7469.3271 8689.2754 C
-7469.4795 8689.0186 -7468.9063 8689.1582 -7469.1455 8688.7842 C
-7470.5732 8689.1152 -7472.0459 8689.0498 -7473.4834 8689.0566 C
-7473.6465 8688.9277 -7473.7505 8688.8887 -7473.7871 8688.7666 C
-7473.9307 8688.832 -7474.3281 8688.8262 -7474.4585 8688.9902 C
-7474.4102 8688.9834 -7474.5513 8688.8262 -7474.6274 8688.8105 C
-7474.8887 8688.6895 -7474.9131 8689.1621 -7475.2002 8689.0186 C
-7475.0859 8688.9336 -7475.0469 8688.8301 -7475.0854 8688.7109 C
-7475.3301 8688.9609 -7475.6577 8688.9209 -7475.9473 8689.002 C
-7475.9023 8688.9482 -7475.8325 8688.916 -7475.8433 8688.8154 C
-7476.1602 8689.0986 -7476.4209 8688.7559 -7476.6982 8688.9346 C
-7476.5947 8688.75 L
-7477.0415 8688.5254 -7476.7266 8689.1367 -7477.1128 8689.0039 C
-7477.02 8688.9453 -7477.0527 8688.873 -7477.0361 8688.7979 C
-7477.3965 8689.1338 -7477.9795 8689.0225 -7478.3389 8689.1367 C
-7478.3174 8689.1113 -7478.3232 8689.0605 Y
-7478.7148 8689.1025 -7479.1245 8688.998 -7479.5552 8689.1445 C
-7479.7119 8689.0625 -7479.5039 8688.6934 -7479.9185 8688.7617 C
-7479.9033 8689.1328 -7480.6221 8688.9141 -7480.3779 8689.334 C
-7480.7319 8689.2734 -7481.2925 8689.1338 -7481.5283 8689.2598 C
-7481.3691 8689.1191 -7481.7007 8688.8066 -7481.4063 8688.7754 C
-7481.6289 8688.5498 L
-7481.5957 8688.3984 -7481.3999 8688.6016 -7481.4707 8688.4102 C
-7481.6182 8688.4258 -7482.0479 8688.5723 -7482.1797 8688.5117 C
-7482.4531 8688.7393 -7482.7041 8689.1641 -7483.1465 8689.2109 C
-7482.9385 8689.0664 -7483.2646 8688.8018 -7483.1235 8688.7383 C
-7483.7407 8689.4482 L
-7483.8877 8689.4658 -7483.7725 8689.1563 -7483.9854 8689.2529 C
-7483.9746 8689.3506 -7484.0674 8689.4121 -7484.1318 8689.4922 C
-7484.1875 8689.4482 -7484.7441 8689.584 -7484.8081 8689.2178 C
-7484.8735 8689.0762 -7484.5684 8689.1426 -7484.7314 8689.0117 C
-7485.0029 8689.0146 -7485.0151 8689.1406 -7485.2871 8689.1465 C
-7485.2925 8689.0977 L
-7485.4717 8689.043 -7485.8213 8689.2529 -7485.6265 8689.4551 C
-7485.5015 8689.4658 -7485.6738 8689.2354 -7485.4888 8689.3418 C
-7485.6152 8689.5537 -7485.9312 8689.6133 -7486.2031 8689.6162 C
-7486.1104 8689.5586 -7486.1216 8689.4609 -7486.0845 8689.3574 C
-7486.4497 8689.6445 -7486.8369 8689.7354 -7487.2451 8689.8555 C
-7487.2515 8690.0293 -7487.0928 8689.5391 -7487.0327 8689.6309 C
-7487.5557 8689.3896 -7488.1128 8689.9727 -7488.5479 8689.6201 C
-7488.4766 8689.5898 -7488.5098 8689.8672 -7488.5146 8689.8184 C
-7488.7666 8689.7969 -7488.7549 8689.5449 -7488.9189 8689.6377 C
-7488.9355 8689.4902 -7489.1255 8689.6855 -7489.2944 8689.7305 C
-7489.3818 8689.8369 -7489.3384 8689.6582 -7489.1914 8689.6426 C
-7489.4268 8689.7666 -7490.3691 8689.9941 -7490.9131 8689.7793 C
-7490.9023 8689.877 -7491.2471 8690.1377 -7491.3721 8690.127 C
-7491.3232 8689.8984 L
-7491.4375 8689.7617 -7491.7422 8689.918 -7491.7632 8689.7227 C
-7492.0303 8690 -7490.7344 8689.4863 -7491.0957 8689.7002 C
-7491.1895 8689.5098 -7491.5991 8690.0645 -7491.5215 8689.7529 C
-7491.7725 8689.7617 -7492.0161 8690.0186 -7492.2559 8689.8047 C
-7492.1865 8689.8418 -7492.0522 8689.4873 -7492.2549 8689.5039 C
-7492.6123 8689.5449 -7492.3564 8689.6133 -7492.6465 8689.6895 C
-7492.8281 8689.7832 L
-7492.8398 8690.0059 -7493.1475 8689.7529 -7493.0146 8690.002 C
-7493.0586 8689.8184 -7493.5337 8690.1152 -7493.4971 8689.7461 C
-7493.4473 8689.4551 L
-7493.6016 8689.4766 -7493.7002 8689.7617 -7493.8213 8689.8896 C
-7493.8418 8689.8633 -7493.8823 8689.8047 -7493.8745 8689.7578 C
-7493.8994 8690.2031 -7494.2432 8689.7207 -7494.4268 8690.0645 C
-7494.7505 8689.9102 -7495.2495 8690.0498 -7495.4023 8689.7734 C
-7495.6514 8689.9082 -7495.8784 8690.0674 -7496.1621 8689.9727 C
-7496.1055 8689.9307 -7496.0283 8689.918 -7496.0122 8689.8223 C
-7496.1904 8689.6914 -7496.2344 8689.8086 -7496.3975 8689.8809 C
-7496.3608 8689.8145 -7496.7539 8689.6201 -7496.9521 8689.4629 C
-7497.1992 8689.5957 -7497.1143 8689.8359 -7497.1392 8689.9824 C
-7497.3652 8689.543 -7497.8379 8690.2656 -7498.1211 8689.8672 C
-7498.0352 8689.8066 -7497.7598 8689.6514 -7497.9658 8689.541 C
-7498.1919 8689.1025 -7498.4219 8689.8643 -7498.7861 8689.6543 C
-7498.6968 8690.0186 L
-7498.8594 8689.793 -7499.2334 8690.2305 -7499.1963 8689.8594 C
-7499.3184 8689.9902 -7499.6265 8689.7383 -7499.5859 8690.0938 C
-7500.1846 8689.793 -7501.0425 8690.2754 -7501.4102 8689.6377 C
-7501.4961 8689.6973 -7501.7104 8689.6367 -7501.6665 8689.8193 C
-7501.5239 8690.0176 -7501.4673 8689.6777 -7501.4141 8689.8125 C
-7501.4912 8689.8232 -7501.5078 8689.9209 -7501.5161 8689.9697 C
-7501.7021 8689.8887 -7501.8486 8689.8633 -7501.6729 8689.5674 C
-7502.0869 8689.3477 -7502.1001 8690.1719 -7502.6274 8690.0322 C
-7502.6035 8689.8857 -7502.6436 8689.8301 -7502.7979 8689.8535 C
-7503.0903 8690.1055 L
-7503.4312 8690.0469 -7503.2842 8689.7705 -7503.2925 8689.5215 C
-7503.4746 8689.5645 -7503.6973 8689.5527 -7503.7803 8689.7383 C
-7504.0015 8689.4258 L
-7503.8398 8689.6514 -7504.1514 8689.5762 -7504.2368 8689.6367 C
-7504.1514 8689.5762 L
-7504.1846 8689.4697 -7504.3955 8689.5352 -7504.5024 8689.5664 C
-7504.4766 8689.7207 -7504.2617 8689.7832 -7504.1445 8689.8281 C
-7504.2373 8689.9375 -7504.3823 8689.9121 -7504.5059 8690.041 C
-7504.4648 8689.7969 -7504.8027 8689.8672 -7504.9473 8689.8418 C
-7505.1133 8689.7891 -7505.1348 8690.0605 -7505.1831 8690.0527 C
-7505.1875 8689.9258 -7505.4541 8690.0313 -7505.3247 8689.8535 C
-7505.2681 8689.8125 -7505.1953 8689.9766 -7505.1016 8689.8643 C
-7505.2109 8689.7705 -7505.1982 8689.5498 -7505.4258 8689.7109 C
-7505.5967 8689.832 -7505.3818 8690.1934 -7505.7061 8690.0391 C
-7505.6211 8689.9785 -7505.6055 8689.8809 -7505.5391 8689.793 C
-7505.8433 8689.666 L
-7505.8564 8689.8887 L
-7505.8975 8689.832 -7505.8691 8689.8125 -7505.8877 8689.7832 C
-7505.9785 8690.0176 -7506.3521 8689.8555 -7506.4209 8690.1191 C
-7506.5742 8690.1426 -7506.7441 8689.9648 -7506.8906 8689.9395 C
-7506.8623 8689.9199 L
-7507.0415 8689.7891 -7507.2793 8689.875 -7507.4297 8690.0254 C
-7507.4219 8689.9766 L
-7507.5195 8689.959 -7507.7505 8689.9941 -7507.8735 8690.125 C
-7508.1201 8689.957 -7507.9561 8689.2842 -7508.2295 8689.5645 C
-7508.48 8689.5723 -7508.6221 8689.9727 -7508.5215 8690.1152 C
-7508.9717 8689.9648 -7509.4834 8690.3281 -7509.9009 8689.9824 C
-7509.9658 8690.0723 -7509.9248 8690.1289 -7510.0586 8690.1816 C
-7510.7197 8690.0938 -7511.4551 8690.4453 -7511.9814 8690.0078 C
-7511.79 8689.9141 -7511.9688 8689.7842 -7511.9727 8689.6582 C
-7512.1309 8689.8574 -7512.1631 8689.4512 -7512.2197 8689.793 C
-7512.2041 8689.9941 -7512.2197 8690.0918 -7512.0337 8690.1729 C
-7512.4282 8690.2813 -7513.0283 8690.2813 -7513.2471 8690.0938 C
-7513.1377 8690.1865 -7513.2227 8690.248 -7513.3086 8690.3086 C
-7513.2803 8689.9873 -7513.5713 8689.9395 -7513.7915 8690.0527 C
-7513.8223 8690.248 L
-7513.9658 8690.0469 L
-7514.0503 8690.1094 -7514.0591 8690.457 -7514.2773 8690.2695 C
-7514.2891 8690.1934 -7514.3018 8690.1162 -7514.3418 8690.0605 C
-7514.5693 8690.2207 -7514.8906 8690.4922 -7515.1377 8690.3262 C
-7515.3398 8690.041 L
-7515.4453 8690.0723 -7515.6235 8690.2441 -7515.4375 8690.3262 C
-7515.8594 8690.1543 -7516.1309 8690.1328 -7516.2646 8689.8857 C
-7516.9912 8690.4873 -7518.0459 8690.5117 -7518.8906 8690.4688 C
-7518.8652 8690.3223 L
-7519.0923 8690.1855 -7518.9834 8690.5781 -7519.1416 8690.4766 C
-7519.0684 8690.3369 -7519.3145 8690.1729 -7519.1362 8690.002 C
-7519.4609 8689.8477 -7519.5547 8690.2559 -7519.7656 8690.3223 C
-7519.7979 8690.5146 -7519.5957 8690.1992 -7519.6367 8690.4434 C
-7519.6729 8690.5117 -7520.0859 8690.293 -7520.1362 8690.584 C
-7520.2178 8690.4697 -7520.1543 8690.2559 -7520.1104 8690.1377 C
-7520.3086 8690.2793 L
-7520.5513 8689.9395 -7519.7559 8689.6719 -7520.0107 8689.2529 C
-7520.1934 8689.2979 L
-7520.3682 8688.9941 -7519.71 8688.9551 -7520.1689 8688.8506 C
-7520.3682 8688.9941 -7520.5381 8689.416 -7520.3608 8689.5449 C
-7520.7754 8689.625 -7520.5527 8690.2383 -7520.9985 8690.2139 C
-7521.1201 8690.043 -7520.6416 8690.1729 -7520.7275 8689.9336 C
-7520.9375 8689.6992 -7521.1484 8690.0645 -7521.3354 8689.9824 C
-7521.1279 8690.0918 -7521.3032 8690.3857 -7521.4375 8690.4395 C
-7521.6641 8690.3018 -7521.29 8690.1641 -7521.6113 8690.1338 C
-7521.6641 8690.3018 -7521.9595 8690.4277 -7521.7041 8690.5449 C
-7521.8203 8690.9258 -7522.0381 8690.4395 -7522.2129 8690.7344 C
-7522.3174 8690.4658 -7521.8823 8690.1152 -7522.2354 8689.9814 C
-7522.1792 8690.2393 -7522.6704 8690.332 -7522.4839 8690.7139 C
-7522.6221 8690.6406 -7522.6367 8690.4375 -7522.5361 8690.2793 C
-7522.7334 8690.1201 -7523.0151 8690.75 -7523.0801 8690.2383 C
-7523.1479 8690.502 L
-7523.21 8690.416 -7523.2983 8690.3506 -7523.3994 8690.209 C
-7523.5732 8690.2041 -7523.96 8690.5664 -7523.9443 8690.168 C
-7524 8690.209 -7524.3975 8690.1914 -7524.2441 8690.4658 C
-7523.9971 8690.6338 -7523.96 8690.2656 -7523.8223 8690.6377 C
-7523.9971 8690.334 -7524.1787 8690.6777 -7524.3213 8690.7793 C
-7524.3447 8690.625 L
-7524.4297 8690.6855 -7524.6255 8690.6514 -7524.6787 8690.8184 C
-7524.6133 8690.7305 -7524.6475 8690.625 -7524.7148 8690.5879 C
-7524.8042 8690.8223 L
-7525.1494 8690.9395 -7524.8857 8690.4102 -7525.2217 8690.4785 C
-7524.9663 8690.2969 L
-7525.0225 8690.3359 -7525.1367 8690.1162 -7525.2979 8690.1895 C
-7525.3604 8690.4033 -7525.4775 8690.6602 -7525.5313 8690.8262 C
-7525.7207 8690.9199 -7525.6162 8690.585 -7525.8027 8690.8047 C
-7525.5586 8690.5469 L
-7525.5215 8690.4766 -7525.7231 8690.1934 -7525.9761 8690.1992 C
-7526.1377 8690.2734 -7526.3887 8690.582 -7526.1338 8690.6992 C
-7526.2607 8690.7031 -7526.4385 8690.5723 -7526.3379 8690.416 C
-7526.6255 8690.4902 -7526.2998 8690.6465 -7526.5479 8690.7793 C
-7526.6494 8690.6367 -7526.9658 8690.4336 -7527.1563 8690.2266 C
-7526.8975 8689.8682 L
-7527.0693 8689.8643 L
-7526.8467 8689.5781 -7527.1826 8689.6465 -7527.0566 8689.3438 C
-7527.1743 8689.2969 -7527.3169 8689.3994 -7527.4307 8689.4785 C
-7527.0864 8689.9629 -7527.8159 8690.1406 -7527.7158 8690.582 C
-7528.1875 8690.7031 -7528.0107 8689.5078 -7528.5024 8690.1992 C
-7528.4219 8690.3145 -7528.6533 8690.6504 -7528.3564 8690.5225 C
-7528.6494 8690.4746 -7528.5557 8690.9658 -7528.9014 8690.7832 C
-7528.6455 8690.6016 -7529.1763 8690.3359 -7528.8066 8690.0723 C
-7528.8311 8690.2178 -7528.6001 8690.1826 -7528.5435 8690.1426 C
-7528.6641 8689.9727 -7528.5186 8689.6973 -7528.8184 8689.6973 C
-7529.0015 8689.7393 -7529.2524 8689.748 -7529.2158 8689.9785 C
-7529.2085 8690.2314 -7528.9365 8689.9512 -7529.0537 8690.207 C
-7529.4185 8690.2949 -7529.4795 8689.9102 -7529.6304 8690.3594 C
-7529.3999 8690.3232 -7529.3423 8690.584 -7529.3467 8690.7578 C
-7529.6143 8690.8633 L
-7529.5625 8690.6953 L
-7529.9922 8690.5742 -7529.6895 8691 -7530.1055 8690.9551 C
-7530.3008 8690.623 L
-7530.2017 8690.3369 -7529.6953 8690.75 -7529.7695 8690.2842 C
-7530.04 8690.2656 -7530.1299 8690.502 -7530.3848 8690.3818 C
-7530.3281 8690.3418 -7530.2505 8690.3301 -7530.1943 8690.2891 C
-7530.2915 8690.2734 -7530.3877 8689.6563 -7530.7734 8690.0176 C
-7530.9727 8690.1582 -7530.8262 8690.1826 -7530.8311 8690.3574 C
-7531.2656 8690.4102 -7531.3955 8690.5879 -7531.6753 8690.6152 C
-7531.6177 8690.2754 -7532.1699 8690.582 -7531.8608 8690.2344 C
-7531.7188 8690.4336 -7531.0903 8690.4141 -7530.9365 8690.0898 C
-7531.0947 8689.6865 -7530.5952 8690.1465 -7530.5024 8689.7383 C
-7530.8506 8689.7285 -7530.8335 8689.332 -7530.8896 8689.0723 C
-7530.9863 8689.0537 -7531.0801 8689.1641 -7531.1377 8689.2041 C
-7531.1787 8689.4482 -7531.0522 8689.4453 -7531.0449 8689.6973 C
-7531.4336 8689.6309 -7531.8081 8689.7666 -7532.0225 8690.0059 C
-7532.1523 8689.8848 -7532.1113 8689.6406 -7531.9575 8689.6162 C
-7532.4199 8689.6895 -7532.9141 8689.6563 -7533.3535 8689.582 C
-7533.0693 8689.9814 -7533.8433 8689.6758 -7533.6494 8690.0078 C
-7533.4141 8690.0977 -7533.2119 8690.3818 -7533.3418 8690.5605 C
-7533.4888 8690.5352 -7533.3369 8690.3857 -7533.3984 8690.3008 C
-7533.5859 8690.5186 -7533.6895 8689.9512 -7533.8735 8690.2949 C
-7533.4512 8690.166 -7533.7915 8689.8086 -7533.7139 8689.4961 C
-7534.0186 8689.6719 -7533.7007 8689.2734 -7534.0024 8689.2734 C
-7534.3057 8689.4473 -7534.6787 8689.584 -7535.0161 8689.6514 C
-7535.4399 8689.3555 -7536.0898 8689.6465 -7536.4683 8689.6582 C
-7536.6665 8689.5 -7536.5322 8689.1465 -7536.7471 8689.085 C
-7536.9995 8689.0918 -7536.5601 8689.4658 -7536.9336 8689.3047 C
-7536.8975 8689.2344 L
-7537.0107 8689.3154 -7537.5825 8688.9941 -7537.6929 8689.502 C
-7537.5776 8689.1191 L
-7537.6475 8689.084 -7537.7119 8689.1719 -7537.7695 8689.2129 C
-7537.7725 8689.0879 -7537.8535 8688.9746 -7537.7402 8688.8926 C
-7537.9707 8688.6289 -7538.2241 8688.9346 -7538.4746 8688.9453 C
-7538.3135 8689.1719 L
-7538.7422 8689.3496 -7539.0293 8689.125 -7539.4443 8689.2041 C
-7539.4316 8688.9824 L
-7539.6787 8689.1152 L
-7539.6182 8688.8994 -7539.8447 8688.7617 -7539.9751 8688.9414 C
-7539.3335 8688.3984 L
-7539.1553 8688.5293 -7539.5283 8688.666 -7539.4165 8688.8848 C
-7539.3213 8689.0762 -7538.9375 8689.0146 -7538.8755 8688.8018 C
-7539.0225 8688.7773 -7539.0293 8688.8262 -7539.1436 8688.9063 C
-7539.1919 8688.5977 -7538.9688 8688.6094 -7538.8584 8688.4033 C
-7538.9355 8688.416 -7539.0449 8688.3223 -7539.0615 8688.4199 C
-7538.9102 8688.2695 -7538.7578 8688.2461 -7538.5059 8688.2383 C
-7538.6763 8688.3594 -7538.4131 8688.4297 -7538.4775 8688.5176 C
-7538.4575 8688.2461 -7538.2168 8688.1621 -7537.9053 8688.2383 C
-7537.6831 8688.5527 -7537.3208 8688.0361 -7536.96 8688.123 C
-7537.1064 8688.3984 -7537.2935 8688.6191 -7537.5127 8688.7305 C
-7537.2861 8688.8682 -7537.2607 8688.7227 -7537.0337 8688.8613 C
-7536.9238 8688.6563 -7536.8457 8688.3418 -7536.5503 8688.2168 C
-7536.5342 8688.4199 L
-7536.2666 8688.3154 -7536.2666 8688.0146 -7535.9258 8688.0723 C
-7535.3418 8688.1719 -7534.7407 8688.1719 -7534.2949 8688.1973 C
-7534.2783 8688.3994 L
-7534.0303 8687.9658 -7533.4521 8688.2393 -7533.1182 8688.0469 C
-7532.5503 8688.2422 -7531.8848 8687.8535 -7531.5938 8688.2031 C
-7530.5913 8688.0469 -7529.7148 8687.8945 -7528.6768 8687.9688 C
-7528.8516 8688.2637 L
-7528.6655 8688.0469 -7528.7305 8688.4336 -7528.5479 8688.3896 C
-7528.7578 8688.1543 -7528.2949 8688.084 -7528.1665 8687.9033 C
-7527.7041 8688.1328 -7527.1104 8687.8818 -7526.7007 8687.6758 C
-7526.6846 8687.8789 L
-7526.2705 8687.498 -7525.7759 8687.832 -7525.2598 8687.8945 C
-7525.2007 8687.9785 -7525.1074 8688.1689 -7524.9536 8688.1465 C
-7524.6738 8687.8184 -7524.5273 8687.8418 -7524.1167 8687.6367 C
-7523.8169 8687.6367 -7523.3301 8687.7178 -7523.0254 8687.8457 C
-7521.8975 8687.3848 -7520.7456 8687.6797 -7519.5732 8687.4023 C
-7519.4888 8687.6406 L
-7518.3521 8687.1309 -7516.9541 8687.5938 -7515.9839 8687.332 C
-7516.0776 8687.7393 L
-7515.7734 8687.8643 -7515.3843 8687.6328 -7515.4619 8687.3438 C
-7515.1567 8687.4688 -7514.7007 8687.1465 -7514.5068 8687.4814 C
-7514.1953 8687.5566 -7514.1255 8687.293 -7513.8662 8687.2383 C
-7513.2422 8687.3926 -7513.0107 8687.3574 -7512.4224 8687.2813 C
-7512.5684 8687.2559 L
-7512.6328 8687.3457 -7512.6387 8687.5186 -7512.4922 8687.5449 C
-7512.2725 8687.4307 -7511.6846 8687.6543 -7511.9033 8687.168 C
-7511.2754 8687.4482 -7510.4385 8686.9395 -7509.8271 8687.3184 C
-7509.8789 8687.1855 -7509.7246 8687.1602 -7509.6602 8687.0703 C
-7509.1089 8687.0645 -7508.5293 8687.3359 -7508.0898 8687.1094 C
-7508.0024 8687.1758 -7508.2295 8687.3359 -7508.0049 8687.3496 C
-7507.8721 8687.2979 -7508.0024 8687.1758 -7507.8384 8687.1016 C
-7506.9453 8686.8535 -7506.0303 8687.3574 -7505.2188 8687.293 C
-7503.7754 8687.0361 -7502.2695 8687.166 -7500.8867 8687.123 C
-7500.9023 8687.2207 L
-7500.4395 8686.8477 -7499.8159 8687.6025 -7499.4463 8687.041 C
-7499.3369 8687.1338 -7499.0283 8687.085 -7499.1094 8687.2734 C
-7498.7407 8687.0098 -7498.0771 8687.5215 -7497.5439 8687.1865 C
-7497.5928 8687.1777 -7497.6211 8687.1973 -7497.6777 8687.2393 C
-7497.1392 8687.4551 -7496.6641 8687.1602 -7496.0957 8687.3555 C
-7496.1533 8687.3975 -7496.2583 8687.4277 -7496.2754 8687.5254 C
-7496.0557 8687.7129 -7495.7549 8687.1133 -7495.6348 8687.584 C
-7495.5088 8687.5801 -7495.5449 8687.3477 -7495.6221 8687.3613 C
-7494.3779 8687.5449 -7493.0498 8687.2441 -7491.7549 8687.1367 C
-7490.8271 8687.418 -7491.6982 8687.9297 -7490.9663 8687.5781 C
-7490.9063 8687.6689 -7490.9229 8687.3984 -7490.9131 8687.4961 C
-7490.6299 8687.3643 -7490.4717 8688.0215 -7490.2754 8687.7754 C
-7490.3564 8687.4863 -7490.1445 8687.6133 -7490.1387 8687.4375 C
-7489.5713 8687.625 -7489.4575 8687.8857 -7489.0098 8687.666 C
-7489.0435 8687.8184 L
-7488.5186 8687.3887 -7487.9102 8687.6191 -7487.4673 8687.123 C
-7484.5728 8687.0322 -7481.7983 8686.7578 -7478.9761 8686.7002 C
-7476.1865 8686.7949 -7473.4551 8686.5723 -7470.6221 8686.8359 C
-7469.9585 8687.2354 -7469.9087 8687.2246 -7469.1797 8687.0625 C
-7469.2095 8687.127 -7469.2549 8687.1426 -7469.2061 8687.2031 C
-7469.1699 8686.875 -7468.6929 8687.1719 -7468.6235 8686.8594 C
-7467.5762 8686.9199 -7466.6113 8686.8301 -7465.5337 8686.8281 C
-7465.7041 8686.8633 -7465.7896 8687.1309 -7465.5869 8687.1094 C
-7465.3755 8686.8994 L
-7465.3408 8686.9922 L
-7465.2021 8686.9434 -7465.0513 8686.7813 -7465.1943 8686.6758 C
-7462.4873 8686.3926 -7459.8242 8687.0498 -7457.1729 8686.9697 C
-7456.5435 8687.1064 -7455.6475 8686.9814 -7454.9629 8686.9141 C
-7452.9355 8687.3506 -7451.1079 8687.7041 -7449.0479 8687.3984 C
-7449.3169 8688.2461 -7450.1675 8688.4414 V
f
-7540.2578 8688.2422 m
-7540.1855 8688.4063 -7539.9497 8688.4961 -7540.1377 8688.7139 C
-7540.1611 8688.5605 -7540.2822 8688.3887 -7540.2578 8688.2422 C
f
-7533.9619 8689.9297 m
-7533.9536 8689.8809 -7533.8721 8689.9961 -7533.8521 8690.0225 C
-7533.9297 8690.0352 -7534.0024 8690.1729 -7534.0645 8690.0879 C
-7533.9854 8690.0762 -7533.9976 8689.998 -7533.9619 8689.9297 C
f
-7532.3521 8690.0273 m
-7532.3765 8690.1729 -7532.7207 8690.2891 -7532.9238 8690.3066 C
-7532.3521 8690.0273 L
f
-7530.8521 8690.6289 m
-7530.7227 8690.752 -7530.7583 8690.8193 -7530.9326 8690.8154 C
-7530.9453 8690.7383 -7530.8877 8690.6992 -7530.8521 8690.6289 C
f
-7530.7456 8690.2969 m
-7530.6211 8690.293 -7530.5591 8690.3789 -7530.4985 8690.4629 C
-7530.5029 8690.3369 -7530.7871 8690.541 -7530.7456 8690.2969 C
f
-7527.4893 8690.7207 m
-7527.4111 8690.709 -7527.2417 8690.5879 -7527.1689 8690.75 C
-7527.2505 8690.6367 -7527.5498 8690.9346 -7527.4893 8690.7207 C
f
-7525.9761 8690.5 m
-7525.9272 8690.5098 -7525.9072 8690.5361 -7525.8506 8690.4961 C
-7525.7607 8690.5625 -7525.8555 8690.6689 -7525.9312 8690.6826 C
-7525.9761 8690.5 L
f
-7498.4287 8689.9141 m
-7498.5923 8689.9863 L
-7498.5684 8689.8418 L
-7498.4287 8689.9141 L
f
-7486.3574 8689.9063 m
-7486.1943 8689.8145 -7486.2441 8690.043 -7486.2168 8690.0645 C
-7486.3643 8690.0801 -7486.1621 8689.8848 -7486.3574 8689.9063 C
f
-7479.8486 8689.1777 m
-7479.8984 8689.1816 L
-7479.8818 8688.8818 L
-7479.8486 8689.1777 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 \357\362., \357\353\356\361\352\350\351/ Adobe ArtOnPat) -
(h Brush Tool/ \323\343\356\353\374\355\356-\361\345\360\373\351/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 \757\762., \757\753\756\761\752\750\751)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(\723\743\756\753\774\755\756-\761\745\760\773\751)
(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([\721\756\742\754\745\771\745\755\750\745]) 0 Xs
([\721\756\742\754\745\771\745\755\750\745])
Pc
0 0 0 0 1 1 1 Xa
(\701\745\753\773\751)
Pc
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
(\727\745\760\755\773\751)
Pc
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa
(CMYK \752\760\740\761\755\773\751)
Pc
0.039216 0 0.933333 0 1 0.94902 0 Xa
(CMYK \746\745\753\762\773\751)
Pc
0.827451 0.066667 0.956863 0.003922 0 0.65098 0.317647 Xa
(CMYK \747\745\753\745\755\773\751)
Pc
0.694118 0.141176 0 0 0 0.682353 0.937255 Xa
(CMYK \743\756\753\763\741\756\751)
Pc
0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa
(CMYK \761\750\755\750\751)
Pc
0.007843 0.988235 0.003922 0 0.92549 0 0.54902 Xa
(CMYK \757\763\760\757\763\760\755\773\751)
Pc
0.176471 1 0.913725 0.07451 0.74902 0.117647 0.176471 Xa
(C=15 M=100 Y=90 K=10)
Pc
0 0.898039 0.847059 0 0.937255 0.254902 0.211765 Xa
(C=0 M=90 Y=85 K=0)
Pc
0 0.8 0.941176 0 0.945098 0.352941 0.160784 Xa
(C=0 M=80 Y=95 K=0)
Pc
0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa
(C=0 M=50 Y=100 K=0)
Pc
0 0.34902 0.847059 0 0.984314 0.690196 0.25098 Xa
(C=0 M=35 Y=85 K=0)
Pc
0.054902 0 0.898039 0 0.976471 0.929412 0.2 Xa
(C=5 M=0 Y=90 K=0)
Pc
0.196078 0 0.984314 0 0.843137 0.87451 0.137255 Xa
(C=20 M=0 Y=100 K=0)
Pc
0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa
(C=50 M=0 Y=100 K=0)
Pc
0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa
(C=75 M=0 Y=100 K=0)
Pc
0.862745 0.164706 1 0.031373 0 0.580392 0.270588 Xa
(C=85 M=10 Y=100 K=10)
Pc
0.901961 0.333333 0.976471 0.258824 0 0.407843 0.219608 Xa
(C=90 M=30 Y=95 K=30)
Pc
0.74902 0 0.74902 0 0.168627 0.713726 0.45098 Xa
(C=75 M=0 Y=75 K=0)
Pc
0.788235 0.105882 0.45098 0 0 0.654902 0.615686 Xa
(C=80 M=10 Y=45 K=0)
Pc
0.698039 0.156863 0 0 0.160784 0.666667 0.886275 Xa
(C=70 M=15 Y=0 K=0)
Pc
0.85098 0.498039 0 0 0.105882 0.458824 0.737255 Xa
(C=85 M=50 Y=0 K=0)
Pc
0.996078 0.929412 0.062745 0.003922 0.164706 0.223529 0.564706 Xa
(C=100 M=95 Y=5 K=0)
Pc
1 1 0.305882 0.219608 0.14902 0.133333 0.380392 Xa
(C=100 M=100 Y=25 K=25)
Pc
0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa
(C=75 M=100 Y=0 K=0)
Pc
0.505882 0.992157 0.015686 0 0.568627 0.152941 0.560784 Xa
(C=50 M=100 Y=0 K=0)
Pc
0.356863 1 0.356863 0.086275 0.623529 0.121569 0.388235 Xa
(C=35 M=100 Y=35 K=10)
Pc
0.094118 0.996078 0.486274 0.003922 0.854902 0.109804 0.360784 Xa
(C=10 M=100 Y=50 K=0)
Pc
0 0.945098 0.207843 0 0.933333 0.168627 0.482353 Xa
(C=0 M=95 Y=20 K=0)
Pc
0.25098 0.247059 0.4 0 0.760784 0.709804 0.607843 Xa
(C=25 M=25 Y=40 K=0)
Pc
0.392157 0.439216 0.498039 0.062745 0.607843 0.521569 0.470588 Xa
(C=40 M=45 Y=50 K=5)
Pc
0.517647 0.513725 0.611765 0.231373 0.443137 0.396078 0.345098 Xa
(C=50 M=50 Y=60 K=25)
Pc
0.545098 0.603922 0.647059 0.396078 0.352941 0.290196 0.258824 Xa
(C=55 M=60 Y=65 K=40)
Pc
0.235294 0.392157 0.643137 0.015686 0.768627 0.603922 0.419608 Xa
(C=25 M=40 Y=65 K=0)
Pc
0.305882 0.498039 0.74902 0.094118 0.662745 0.486275 0.313726 Xa
(C=30 M=50 Y=75 K=10)
Pc
0.356863 0.607843 0.807843 0.239216 0.545098 0.364706 0.231373 Xa
(C=35 M=60 Y=80 K=25)
Pc
0.392157 0.643137 0.886274 0.352941 0.458824 0.298039 0.160784 Xa
(C=40 M=65 Y=90 K=35)
Pc
0.419608 0.694118 0.976471 0.490196 0.376471 0.223529 0.07451 Xa
(C=40 M=70 Y=100 K=50)
Pc
0.517647 0.701961 0.792157 0.690196 0.235294 0.141176 0.082353 Xa
(C=50 M=70 Y=80 K=70)
Pc
Bb
2 (\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 1)
Pc
Bb
0 0 0 0 Bh
2 (\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 1)
Pc
Bb
2 (\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\713\750\755\745\751\755\773\751 \743\760\740\744\750\745\755\762 2)
Pc
Bb
0 0 0 0 Bh
2 (\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(\720\740\744\750\740\753\774\755\773\751 \743\760\740\744\750\745\755\762 2)
Pc
(\723\747\756\760 "\721\754\745\771\745\755\755\773\745 \752\742\740\744\760\740\762\773") 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(\723\747\756\760 "\721\754\745\771\745\755\755\773\745 \752\742\740\744\760\740\762\773")
Pc
0 g
(K=100)
Pc
0.100006 g
(K=90)
Pc
0.200012 g
(K=80)
Pc
0.300003 g
(K=70)
Pc
0.400009 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.600006 g
(K=40)
Pc
0.700012 g
(K=30)
Pc
0.800003 g
(K=20)
Pc
0.900009 g
(K=10)
Pc
0.950012 g
(K=5)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(\321\353\356\351 1) Ln
0 A
1 Ap
0 O
0 J 0 j 1 w 4 M []0 d0 XR
224.9883 801.6274 m
7.54297 498.7363 663.042 56.1289 Y
-264.541 594.3516 178.7422 889.7202 v
463.7861 1079.6519 682.4121 788.4248 Y
405.5723 1053.1763 224.9883 801.6274 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 899.1689 630.9346 0 113.4841 4.15117 0 0 3.16554 -27124.9688 -17328.5801 Bg
471.0913 0 0 -359.2389 370.5815 505.0825 Bm
f
0 BB
1073.3262 785.793 m
1290.7725 482.9053 579.9214 31.8496 Y
1562.8564 578.5249 1119.5732 873.8901 v
834.5293 1063.8218 615.9038 772.5938 Y
892.7422 1037.3413 1073.3262 785.793 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1028.4316 624.5991 0 115.5621 4.15117 0 0 3.16554 -27124.9688 -17328.5801 Bg
479.7174 0 0 -365.8169 907.1729 485.0273 Bm
f
0 BB
338.481 737.8135 m
191.8359 487.6924 656.0693 126.7861 Y
8.34131 566.6533 307.2905 810.5664 v
499.5332 967.4097 646.9766 716.6714 Y
460.271 945.5425 338.481 737.8135 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) -340.1519 627.584 0 89.8453 -4.15117 0 0 3.16554 37875.1914 -17328.5801 Bg
-372.9629 0 0 -284.4093 442.269 494.4756 Bm
f
0 BB
951.4268 734.647 m
1098.0713 484.5254 618.6685 112.0449 Y
1281.5693 563.4854 982.6172 807.4033 v
790.3789 964.2432 606.835 696.2246 Y
829.6406 942.3755 951.4268 734.647 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1168.0059 624.3828 0 91.6846 4.15117 0 0 3.16554 -27778.0859 -17328.5801 Bg
380.598 0 0 -290.2316 833.4512 484.3428 Bm
f
0 BB
425.0229 651.9463 m
319.3711 459.748 653.832 182.4219 Y
187.166 520.4248 402.5479 707.8472 v
541.0532 828.3677 647.2808 635.7041 Y
512.7651 811.5669 425.0229 651.9463 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) -354.0098 618.2598 0 68.349 -4.15117 0 0 3.16554 37875.1914 -17328.5801 Bg
-283.7283 0 0 -216.362 499.7954 464.96 Bm
f
0 BB
866.623 649.5127 m
972.2754 457.3164 626.8818 171.0967 Y
1104.4766 517.9893 889.0947 705.416 v
750.5938 825.9365 618.3604 619.9854 Y
778.877 809.1357 866.623 649.5127 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1155.5215 615.8003 0 69.6921 4.15117 0 0 3.16554 -27778.0859 -17328.5801 Bg
289.3033 0 0 -220.6133 781.626 457.1738 Bm
f
0 BB
499.3306 574.9971 m
430.771 438.3936 647.8159 241.2813 Y
344.9751 481.5186 484.749 614.7319 v
574.6274 700.3911 643.5674 563.4526 Y
556.271 688.4556 499.3306 574.9971 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) -365.5874 611.0376 0 47.9804 -4.15117 0 0 3.16554 37875.1914 -17328.5801 Bg
-199.1745 0 0 -151.884 547.856 442.0977 Bm
f
0 BB
785.9072 573.269 m
854.4736 436.6611 630.3276 233.2295 Y
940.2627 479.79 800.4932 613.0073 v
710.6104 698.667 624.7979 552.2827 Y
728.9668 686.7231 785.9072 573.269 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1143.2656 609.2896 0 48.8742 4.15117 0 0 3.16554 -27778.0859 -17328.5801 Bg
202.885 0 0 -154.7135 730.75 436.5645 Bm
f
0 BB
549.6475 523.0049 m
504.021 420.875 648.4565 273.5186 Y
446.9302 453.1201 539.9424 552.7061 v
599.7529 616.7437 645.6265 514.373 Y
587.543 607.8184 549.6475 523.0049 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) -373.7979 605.209 0 35.3976 -4.15117 0 0 3.16554 37875.1914 -17328.5801 Bg
-146.9415 0 0 -112.0528 581.939 423.6465 Bm
f
0 BB
740.3535 521.7109 m
785.9805 419.5859 636.8218 267.4971 Y
843.0742 451.8271 750.0547 551.4136 v
690.2441 615.4536 633.1411 506.0283 Y
702.4619 606.5254 740.3535 521.7109 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1136.7363 603.9014 0 36.0172 4.15117 0 0 3.16554 -27778.0859 -17328.5801 Bg
149.5132 0 0 -114.0139 703.6465 419.5078 Bm
f
0 BB
583.6631 478.835 m
553.1494 404.9932 649.7451 298.4482 Y
514.9624 428.3027 577.1729 500.3076 v
617.1768 546.6182 647.8564 472.5898 Y
609.0039 540.1621 583.6631 478.835 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) -379.415 599.9492 0 25.4036 -4.15117 0 0 3.16554 37875.1914 -17328.5801 Bg
-105.4548 0 0 -80.4164 605.2568 406.9971 Bm
f
0 BB
711.2021 477.9023 m
741.7197 404.0635 641.9624 294.0967 Y
779.9033 427.3721 717.6963 499.375 v
677.6934 545.6782 639.5015 466.5537 Y
685.8652 539.2207 711.2021 477.9023 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1132.6436 599.0039 0 25.8311 4.15117 0 0 3.16554 -27778.0859 -17328.5801 Bg
107.2293 0 0 -81.7696 686.6563 404.0039 Bm
f
0 BB
612.6807 444.9287 m
594.9858 400.6436 650.998 336.7412 Y
572.8472 414.624 608.9146 457.8105 v
632.1113 485.5811 649.8994 441.1885 Y
627.3765 481.7158 612.6807 444.9287 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) -384.2197 598.3213 0 15.1917 -4.15117 0 0 3.16554 37875.1914 -17328.5801 Bg
-63.0633 0 0 -48.09 625.2021 401.8438 Bm
f
0 BB
686.6357 444.3701 m
704.3271 400.0869 646.4863 334.1357 Y
726.4688 414.0693 690.3984 457.25 v
667.2012 485.0244 645.0591 437.5723 Y
671.9404 481.1465 686.6357 444.3701 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1129.209 597.7559 0 15.4437 4.15117 0 0 3.16554 -27778.0859 -17328.5801 Bg
64.1093 0 0 -48.8877 672.3984 400.0537 Bm
f
0 BB
629.4517 416.374 m
619.5117 391.9238 650.978 356.6377 Y
607.0786 399.6445 627.3398 423.4961 v
640.3691 438.8252 650.3613 414.3115 Y
637.7056 436.6875 629.4517 416.374 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) -386.9385 595.3975 0 8.40134 -4.15117 0 0 3.16554 37875.1914 -17328.5801 Bg
-34.8754 0 0 -26.5948 636.4878 392.5879 Bm
f
0 BB
670.9961 416.0664 m
680.9355 391.6152 648.4399 355.1953 Y
693.373 399.335 673.1074 423.1797 v
660.083 438.5166 647.6416 412.3105 Y
662.7422 436.375 670.9961 416.0664 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 138) 1126.9453 595.084 0 8.54142 4.15117 0 0 3.16554 -27778.0859 -17328.5801 Bg
35.4569 0 0 -27.0383 663.002 391.5957 Bm
f
0 BB
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
