%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (\714\756\751 \752\756\754\757\774\776\762\745\760) ()
%%Title: (heart.eps)
%%CreationDate: 10/17/2008 10:29 PM
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 0.74902 0.678431 0.670588 0.901961 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 250.5 249.5 250.5 249.5
%AI3_TileBox: -47.6001 -170.96 547.5996 670.96
%AI3_DocumentPreview: Header
%AI5_ArtSize: 500 500
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -273.3838 776.3838 0.6667 1406 907 18 0 0 562 293 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 16137 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C4527274B274B274B274B274B274B274B274B274B274B274B274B274B
%274B274B274B274B274B274B274B274B274B274B274B274B274B274B274B
%274B274B274B274B274B274B274B274B274B274B274B274B274B274B274B
%274B274B274B274B274B274B274B274B274B274B274B274B274B274B274B
%274B274B274B274B274BF8F8FD7DFFA82027FD7EFF20F8FD7DFFA82027FD
%7EFF20F8FD7DFFA82027FD7EFF20F8FD7DFFA82027FD42FFCAFD3BFF20F8
%FD3DFFA1FFFD07A8FD37FFA82027FD3CFFA8767DCAFD05FFA8A8FD37FF20
%F8FD37FFA8FD04FFCA4B76FD04FFA8A87DFD37FFA82027FD36FF52272752
%7DFFFFA176FFA8A8A8CAA8FD39FF20F8FD37FF20F8F827267DCAA1FFA8A1
%FFA8FD39FFA82027FD37FFA82727264B51A87DA1CFCAA1CAFD3AFF20F8FD
%2FFFA8A1A1A8A8FD05FF272626514A7576A0A7CAFD3AFFA82027FD2EFFA1
%A1A8CFA1A1A8FD05FF76514B7575CBA8A8A7CFFD3AFF20F8FD2DFFCA7DA1
%A1A8FFA8A1A1FFFFFFCFFFA0755075A1CAA8A79EC8CFFD37FFA82027FD2E
%FF76764BCAFFFFCBA1A8FFFFFFCFCFC9A1517CA0C99FC7C6C8CEFD37FF20
%F8FD2DFFA876757676FF7D7DA7A1A87CCACFA8CEC8A7527574FD04C7C8C9
%FD35FFA82027FD2CFFA8A1FD047675764BA1766F4AFFCBCFC9CEC8CDA77D
%7BC7C7CDC8CDC9FD35FF20F8FD29FFA87D2727207676764B755176444420
%6FCACFC9CEC8C8C7C7C7A77C9FC7CDC8C9C9CFFD32FFA82027FD2AFFF820
%F8274B767551507B4B44204476CFCECEC9CDC8CDC7C79FC9A7A0C8CEC9CE
%C9FD33FF20F8FD2AFFA12720F826264B4A75504A20444A7B517DA6CEC8C8
%C7C79F9F749F4B51C8CEC9CFA7CFFD30FFA82027FD2CFFA87D5152527C7C
%7E7D76A1FFA87D7D7DA0CDC7CDC7C79F9F757B4B7CA7CFCFFFCFFD31FF20
%F8FD2FFFA8CFA7CAC9CFC9CAA8CFA7CF7D5251C7C7C79F9F747B51512651
%52A7CAFFA8FD06FFCAA1A1A8FD25FFA82027FD30FFCFCFC9CEC8CDC7C79F
%A59F9F755127759FC79F7B757551512627F84B525252FD05FFA0A1A0A1CF
%FD25FF20F8FD2FFFCACFC9CEC8C8FD04C79E9F74755051F827509F74754A
%512627F827F8F8F827A8FD04FFA176A176A8FD24FFA82027FD30FFCFCFC9
%CEC8CDC7C79FC79F9F757551512727275151754B4B26272727202727FD05
%FFA7A1A1A1A8FD25FF20F8FD2FFFCFCFC9CEC8C8FD04C79F9F7575505126
%27F827F827264B2627F827F827F87DFD04FFA8CA76A1A1FFFFFFA8FD21FF
%A82027FD2EFFCFFFCFCFC9CEC8C8C7C79FA57B9F75754A512727F827F827
%2727F827F827F827A8FD04FFCACAA776A1FFFFA0A1FD22FF20F8FD2BFFA8
%FFFFFFCACFC9CEC8C8C7C79FC79F9F747550512627F827F82052FF7D7D27
%27F827A8FD05FFA8CAA1A076A176A076A17CA1A1FD1DFFA82027FD2CFFA8
%FFA8CFCACFC9CEC8CDC7CCC7C79F9F75754B512627F852A8FD10FFCAA1A1
%A0A7A7CAA1A176A1CAFD1DFF20F8FD19FFA8CACAFFA8767DFD0DFFA8A87D
%7D7C7C517C517550754A4B2627F820F85252A8FD14FFA8CAA8FFFFFFCACA
%A1FD1DFFA82027FD18FFA8CAA8FFFFA1F82052FD11FFA8A87D7D5252284C
%2753527D84A8A8FD0BFFCAFFCAFD0FFFA8CAFD1EFF20F8FD17FFA8A8A1CA
%FFFF522052204BFD0BFFA8FFA8FFA8FD07FFA876FFA876CAA1A876767CFD
%09FFA8FFA8CAA8FFFFFFCAFD07FFA8767DA87DA8A1FD19FFA82027FD18FF
%A8CACAFFFF7620FFA84B7DFD0AFFCFA8FFA8FD09FFA1A1A87576FFA8FD04
%76FFFFFFA8FD07FFA8FF7D7C76A17DCAFD06FF7676A1FFA1A176FD19FF20
%F8FD13FFCACAA1FFA8A8A8FFCAFF5120FFFFA876767675A8FD06FFA8FFFF
%CAA8FD07FFA8FF76A151A1FFFFA1767676A1FFFFFF4B767DFFA8A176A876
%754BA1A8A87676A1FF7DFD0476FFFFA74B7676FD17FFA82027FD12FFA1CA
%A8CAA8CAA8CAFFFFFF7620FFCAFFA144204444FD05FFA8FD04FFCAA8FFFF
%FFA8CAA8FFFFFF7676A1FD0AFFCA517676767DFFA8764BA1FD04FFA87C76
%A1A8A875A1FFFFFFA1757676FD17FF20F8FD11FFA8CAA8FFFFCAA8FFCAFF
%FFFF5220A17CFFA820442044A8FD04FFCAFFFFA8FFFFA8A8FFA1A8A1A8A8
%CAFFFF7D767CFD09FFA17676A8FFFFFFA87DA8FFFFA8A8FFFFFFA1FD04A8
%4BA8FFFFFFA876A1A8FD15FFA82027FD1DFF7D20764BFFCA4B444444FD05
%FFCAFFA8FD06FFCAA8CAA8FFA8FFFFFFA8A17676A1CFA8CAA1A176A1A8FF
%FFFFA8CAA8A8A8CA5120204B7DFFFFFFA8767DA175A1A8FD1BFF20F8FD16
%FFCAA1A8A8FFFFFF7D20204BFFFF4B444444A1FD05FFA8CAA8FFFFFFA8FF
%CAFD04FFCAFD04FFCACA7DFD0476A1A1FFFFCF7D7D76A1A1FFFFFF762051
%7D202020A1FFFF764B51A17576A1CAA1A87DA8A8FD13FFA82027FD14FFA1
%6F444B444B6FCAFFFF20446FFFFFCA4444206FFD04FFA8FFCAFD05FFA8FD
%05FFA8FFFFFFCAFD05FFA8CFFFFFA1762020202620202076A15220FFFFFF
%A84BF84BA8FF7676A8FF764B2044FD04204BA8FD12FF20F8FD13FF7C204B
%CAFFFFA1762076FF4B20A8FD04FF76754AA1FD04FFA8FD07FFA8FFFFFFA8
%CAFD04FFA8CAA8CAA8FFA87D2020205276A17DA776762020F84BFD05FFA1
%202027764B522720204B4B7D7DA87626F8A1FD10FFA82027FD12FFA84476
%FD06FFA844767620A8FD09FFCAFFCAFD09FFA8FFFFCFFD06FFA8CACAFFA8
%51F84B7DFD09FFA8767DFD07FF7D512026204B7CCAFD07FF4B20FD11FF20
%F8FD12FF764AFD05FFA876444B204B2076FD0AFFA8CAA8FD08FFCAA8A8A8
%FD05FFA8A8FFFF7D20F8A1FFCA7DFD0DFFCAFD07FFA8FD0BFFA82051FD0F
%FFA82027FD12FF44A7FD06FFA876FD044420FD05FFA1FD05FFCAFFA8FD0F
%FFA8CAFFFF512020A8FFA8A176A1FFFFFF76764B7676A8CAFFCAFD05FFCA
%CAFD08FFA8A8A1FFFFFF4B4AFD10FF20F8FD11FFA844A8FD08FF9A449344
%204BC3A1CAA86F7DFD06FFA8A8FD0DFFA8CACAFF27204BA77DA1A1764BFF
%FFA82020204B202020264BA8FFA8525227524452527DA8FD04FFA1204444
%A1FF5220FD0FFFA82027FD11FFA844FD07FF9A9A939A939A20206FBC9AC3
%446FCAFD05FFCAFD11FF4B207DCA76A8764A20CAFFA8204AA1FD04FFA120
%2020A15220F827F84A4444F82727A8FD04FF444444A84B4BFD10FF20F8FD
%11FFA14ACFCAA8FFFFCA688C6893939A939A204A9AC37644209AA1A1A1FF
%FFFFA8FFFFFFA8FFFFFFA8FFA8CF766F6F76764B7DFF4BFF7D2020A1FFFF
%2020A8FFA8CAFFA84A4444442044202020272044444AF820F852A8FFFFA8
%4444202076FD0FFFA82027FD12FF44FF756FA7A168FD04939A93936F6F20
%6F9A6F444476CA9A76A1CACAFFA8FFFFFFA8FD05FF4B2020442044A1FFA1
%A1FFA044A1FFFFA12052CA766F44A14A44444A4444202720202027204444
%272727F827A8FFA87620204BFD11FF20F8FD12FF4BA1A120442044689393
%93444420442044206F4444209AA1A1A0A1A1CAA8CAA8FFA8CAA8FFFFFF7D
%76764B204475FFFF76A1FD06FF76F86FFD044420442044204A2027F827F8
%FD0920F8202020F84B7DFD11FFA82027FD12FF7676FFA1938C446F939393
%9A6F6F444A4444204A444AA0CAA1A1FD06CAA8CAA8FFFFFFA8FFFFA12076
%4BCFFFA875FD07FF764B446F686F446F444B4B76754B2027272721272027
%202720272027204B7DCFFD14FF20F8FD13FF44A8CA8C6868206E9393939A
%9A6F2044444B20444AC3A1A176A17DFD04A1CAA1A8A8CAA8FFA852F84B4B
%76A8A84BCAFFFFFFCAA8CAA8FF7D6844684444444B204B517620272027F8
%27F827F827F827F827F82727FD15FFA82027FD13FFA14A9A68936844206F
%939A93BC9A9A6FA1A19A204A76A1CAA176A1A8CAA1A176A1A1CAA1CA7D26
%F876A1A8A8A176FFFFFFCA9A689393A1A8A14468446F444B444B7676204B
%202720272727F8272727F827204A20444BA1CAFD13FF20F8FD14FF76446F
%6F6F44444493939A939A9AC39AC36F4B202026A1A1A176FD05CAA1A19A76
%2020207DFFFFFFCA7DFFFFCA9A93688C688C68A1A86F4468FD05444B2020
%20272027F827F827F827F827204444442051A176A8FD11FFA82027FD14FF
%CA684476514A444A6FBC9ABC9AC39AC36F6FA1CAA14B204B4B7CA1CAA8A8
%A1A14B20F8204BA1A1CAA8A8A1FFFFC3FD04938C93688CA8FF6F44446F44
%6F444B444B204B21272027272720272727204B444A444B27FF7DA1FD12FF
%20F8FD14FFC3686844764444206F93FD049AA1764BA1CAA1CACAA14B4B20
%4BFD0420F820207576A19A9A769AA8FFA19A93936F93688C688C68CAA144
%447644684444204B202720272027F827F827F827F827F827F827F827A8CA
%76FD11FFA82027FD14FF9A8C8C6F444B444A44BC9A9A9AC3A19A6FCAA1CA
%A1CACAFFCACAA1A14B767DA1A1CACACAA1C3A1C39AC39A9A939AFD04938C
%8C688C9AA1204B764B446F444B204B204B20272127F8272727F8272727F8
%272727F8A876A1FD12FF20F8FD14FF9A688C6893444A446F93FD049AC39A
%6FA1CAA1CAA8A776A1A8FFFFCA7CA7A1A0A1A19AA19AA19A76759A939A6F
%936F936893688C688C6F4420764BFD04204420444B764B522727F827F827
%F827F8202044202020A1FD12FFA82027FD14FF9A8C8CFD04939A93BC9ABC
%9AC3A1C36F9ACACACAA14B4A2075CAFFFFA86FA17C7676C3A19A767676A0
%9A9A939AFD04938C93688C688C444A4B76444B20A17544444A4B76757626
%272027204B2026204A444A444A76FD13FF20F8FD14FF9A689368936F9393
%9A93FD049AC3A1C34B9ACACA4BA17D4A20A1FFFFA8A1A1CAA1CAA1C37676
%9A9A769A9A9AFD04936893688C688C6868446844684476FFA12044444420
%26FD072026202620444444204444A8FD10FFA82027FD14FF9A8C68FD0493
%9A939A9ABC9AC39AC3A1C36F76A17676FF7D4BA8FFFFFFFD04CAA1CAA1C3
%76A09A9A76769A9AFD04936893688C688C6868446F4444A1FFA144444A44
%44F8272027F8272727F8272727204B446F6F754AA8FD10FF20F8FD14FF9A
%688C68936F936F9A93FD049AA19AC3A1CA76766F76766FA1FFA8FFA8CAA8
%CAA1CAA1C3A1A19AA09A9A6F7693936F93688C688CFD04684468444444A8
%A14B204420442020F827F827F827F827F827F827F8207DFFFFFFA1FD0FFF
%A82027FD14FFA18C68FD04939A939A9AC39AC39AC3A1CAA1CACACAA0A1CA
%FFCAFFCAFFFD04CAA1CAA1C3A1C39ABC9A9A769A767693938C938C8C6893
%686F686F44447676204B2052A1A14B27272720272727202727272027F8A8
%FD14FF20F8FD14FFC3688C68FD04939A93FD049AA19AC3A1C3A1FD04CAFF
%CAFFA8FFCACAA8CAA1C3A1C3A1A19AA19A9A939A93767676688C688CFD06
%684469444B444B202020A8FF52F827F827F827F827F827F827F827A8FD13
%FFA82027FD14FFA88C8C938CFD0493FD049AC39AC3A1C3A1CAA1FD04CAFF
%CAFFCAFFCACAA1CAA1C3A1C3A1C39ABC9A9A939A937676938C8C688C6868
%686F686E446F444B204B20274BFF7D27F8272727F8272727F8FD0427FD15
%FF20F8FD15FF688C689368FD0493FD049AA19AA1A1C3A1CAA1CAA8CAA8CA
%A8CAA8CAA1CAA1C3A1A19AA1FD049A939A6F936F936893688CFD04684468
%FD0644204B202027A12721F827F827F827F827F827F827FD14FFA82027FD
%15FF938C938C93939A93FD049AC39AC3A1C3A1CAA1FD04CAFFFD06CAA1CA
%A1C3A1C3A1C39ABC9A9A939AFD04938C8C688C6868686F686F446F444B44
%4B204B2027212720272727202727272027272752FD15FF20F8FD15FF9A8C
%689368FD0493FD049AA19AA1A1C3A1C3A1CAA1CAA1CAA8CAA1CAA1CAA1C3
%A1A19AC3FD049AFD06936893688CFD046844684444444B4444204B202720
%27F827F827F827F827F827F827F87DFD14FFA82027FD15FFCA68938CFD04
%939A93FD049AC3A1C3A1CAA1CAA1CACACAA8CACACAA1CAA1C3A1C3A1C39A
%C39A9A939AFD0693688C688CFD0468446F444B444B444B204B2027202727
%27F8272727F8272727F827A8FD15FF20F8FD15FFCA8C689368936F93939A
%93FD049AA19AA1A1C3A1C3A1CAA1CAA1CAA1C3A1C3A1A19AA1FD049A939A
%FD04936893688C688CFD04684468FD0444204B202720272027F827F827F8
%27F827F827F82027FD15FFA82027FD16FF938C8CFD04939A93BC9ABC9AC3
%9AC3A1C3A1CAA1CAC3CAA1CAC3CAA1CAA1C3A1C3A1C39AC39A9A939AFD06
%93688C688C686F686F446F444B444B444B204B2727202727272027272720
%272727F87DFD16FF20F8FD16FFC3689368936F93939A93FD049AC39AA19A
%C3A1C3A1CAA1C3A1CAA1C3A1C3A1A19AC3FD049A939AFD04936893688C68
%8CFD04684468444B4444204B202720272027F827F827F827F827F827F827
%A8FD15FFA82027FD17FF9368FD04939A939A93BC9A9A9AC3A1C3A1C3A1C3
%A1CAA1C3A1CAA1C3A1C3A1C39AC3FD049A939AFD049368938C8C688C6868
%686F446F444B444B204B202720272727F8272727F8272727F82752FD17FF
%20F8FD17FF9A8C689368936F93939A93FD049AA19AA19AC3A1A1A1C3A1A1
%A1C3A1A19AA1FD069A939A93936893688C688CFD066844684444444B2044
%20272027F827F827F827F827F827F827F8A8FD16FFA82027FD18FF68FD04
%939A939A93BC9A9A9AC39AC39AC3A1C3A1C3A1C3A1C3A1C3A1C39AC39AC3
%9A9A939A939AFD049368938C8C68936869686F446F444B444B204B202720
%2727272027272720272727F852FD18FF20F8FD18FF9A689368936F93939A
%93FD049AA19AA19AC39AA19AC3A1A19AC39AA19AA1FD049A939AFD049368
%93688C688CFD066844684444444B204B20272027F827F827F827F827F827
%F8F87DFD17FFA82027FD18FFCA9368FD04939A939A93FD049AC39AC39AC3
%A1C39AC3A1C39AC39AC39AC39A9A939A939AFD049368938C8C688C686868
%6F6869446F444B444B204B20272127F8272727F8272727F82727FD19FF20
%F8FD19FF9A8C689368936F93939A93FD089AA19AA19AA1FD089A939A939A
%939368936893688CFD06684468444444452044204B20272027F827F827F8
%27F827F827F87DFD18FFA82027FD1AFF8CFD04939A939A93FD049ABC9AC3
%9AC39AC39AC39AC39AC39ABC9ABC9A9A939AFD06938C938C8C6893686868
%6F446F446F444B444B204B202727272027272720272727F852FD1AFF20F8
%FD1AFFA1689368936FFD04939A939A93FD0F9A939AFD06936893688C688C
%FD066844684444444B2044204B20272027F827F827F827F827F8207DFD19
%FFA82027FD1BFF9368FD04939A939A93FD049ABC9A9A9ABC9A9A9ABCFD06
%9A939AFD069368938C8C688C6868686F6868446F444B444B204B204B2027
%F8272727F8272727F82752FD1BFF20F8FD1BFFA18C689368936F9393936F
%9A939A939A9A9A939A9A9A939A939A939A93936F9393936893688C688CFD
%06684468FD0644204B20272027F827F827F827F827F820F8FD1BFFA82027
%FD1CFF9A8C8CFD06939A939A93BC9A9A9ABC9A9A9ABC9A9A939A939A939A
%FD069368938C8C68936868686F686F446F444B444B204B204B2727202727
%2720272727F8A8FD1CFF20F8FD1DFF6F8C689368FD04939A939A939A939A
%939A939A939A939A939A93936F9393936893688C688CFD06684468444444
%4B4444204B20272027F827F827F827F827F852FD1CFFA82027FD1DFFCA68
%FD08939A939A939A939A939A939A939A939A939AFD069368938C8C688C68
%68686F6868446F444B444B444B204B202720272727F8272727F827FD1EFF
%20F8FD1EFFA16893689368936F936F9393936F9393936F9A93936F939393
%6F9368936893688C688CFD06684468FD0644204B202720272027F827F827
%F827F8207DFD1DFFA82027FD1FFFC368938CFD08939A939A939A939A939A
%FD06938C938C936893688C68936868686F686F446F444B444B444B204B21
%2720272727202727277DFD1FFF20F8FD20FF93689368936893689393936F
%9393936F9393936F939393689368936893688C688CFD066844684444444B
%4444204B202720272027F827F827F82052FD1FFFA82027FD20FFCA936893
%68FD139368938C93688C688C688C6868686F6868446F444B444B444B204B
%202720272727F827272127FD21FF20F8FD21FFA88C688C68936893689368
%9368936893689368936893688C688C688C688CFD06684468FD0644204B20
%2120272027F827F827F82027FD21FFA82027FD22FFCA8C68938C938C9393
%938CFD07938C938C9368938C8C688C688C6893686F686F446F446F444B44
%4B444B204B212720272727202727FD23FF20F8FD23FFA18C6893688C6893
%6893689368936893688C6893688C688CFD0A6844684444444B4444204B20
%2720272027F827F820F8A8FD22FFA82027FD24FFA18C68938C9368938C93
%68938C9368938C8C688C688C688CFD07686F686F446F444B444B444B204B
%202720272727F82727A8FD24FF20F8FD25FF9A68688C688C688C688C688C
%688C688C688C688CFD086844684468FD0644204B202120272027F827F820
%F8A8FD24FFA82027FD26FFA18C688C68938C8C68938C8C688C688C688C68
%8C68936868686F686F446F446F446F444B444B204B204B21272027272721
%A8FD26FF20F8FD27FF9A8C688C688C688C688C688C688CFD0A6844684468
%44694444444B4444204B202720272027F827F8A8FD26FFA82027FD28FFA1
%8C688C688C688C688C688C688CFD07686F6868446F446F446F444B444B44
%4B204B20272027272720A8FD28FF20F8FD29FFA1FD136844684468FD0544
%452044204B202720272027F82027A8FD28FFA82027FD2AFFCA936893688C
%6893686868936868686F686F686F686F446F446F444B444B204B204B204B
%2127202727FD2BFF20F8FD2BFFA86FFD0C684468446844684444444B4444
%204B2045204B20272027F8F827FD2BFFA82027FD2DFF9AFD05686F686868
%6F6868446F446F446F444B444B444B204B204B204B2027202752FD2DFF20
%F8FD2EFF9A4468446844684468446844684468FD0644204B2044204B2027
%2027F82052FD2DFFA82027FD2FFFA16868686F686F446F446F446F446F44
%6F444B444B444B204B204B202720277DFD2FFF20F8FD30FFCA4444446844
%6844684444444B4444444B4444204B202720272027F84BA8FD2FFFA82027
%FD32FF6F44446F446F446F444B444B444B444B444B204B202720272076FD
%32FF20F8FD33FF76FD0944204B2044204B202120272020F87DFD32FFA820
%27FD34FFA16F444B446F444B444B444B204B204B204B202027FD35FF20F8
%FD35FFA8762044444B4444204B204B204B2027202052FD35FFA82027FD37
%FFA14444444B444B204B204B204B204B7DFD37FF20F8FD38FFCA4B20204B
%202020272020F876A8FD37FFA82027FD3AFF7D4B204B204B202027A8FD3A
%FF20F8FD3BFFA8762020202752FD3BFFA82027FD3DFFA8274BA8FD3DFF20
%F8FD7DFFA82027FD7EFF20F8FD7DFFA82027FD7EFF20F8FD7DFFA82027FD
%7EFF20F8FD7DFFA82027FD7EFF20F8FD7DFFA82027FD7EFF20F8FD7DFFA8
%2727A8FD7DFFF8F820F820F820F820F820F820F820F820F820F820F820F8
%20F820F820F820F820F820F820F820F820F820F820F820F820F820F820F8
%20F820F820F820F820F820F820F820F820F820F820F820F820F820F820F8
%20F820F820F820F820F820F820F820F820F820F820F820F820F820F820F8
%20F820F820F820F820F820F820F820
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
3 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 1 3 Bd
[
<
00000000000001010102010101020202020202020303030404040405050405050505060605060606
06070707080808080909090A0A09090A0A0A0B0B0B0B0D0D0C0D0D0D0D0E0E0E0F0F0F0F10101011
111010111111121212121313131414141415151516161616171717181818181A1A1A1B1B1B1B1C1C
1C1D1D1D1D1E1E1D1F1F1F20201F1F20202021212120212121222222222322222323232324242324
24242324242425242424252524252525252525252626262626262627272727282727282828282928
28292929292929292A2A2A2A2B2B2B2B2B2B2B2C2C2C2D2D2D2D2D2D2D2E2E2E2E2E2E2E2F2F2E2E
2F2F2F2F2F2F2F303030303030303131
>
<
0000000102030405060708090B0B0C0E0E10111213151617181A1B1C1D1E1F21222324252727292A
2B2C2D2F2F30323334353637383A3B3C3D3E3F414244454648484A4B4C4D4F505152535455575859
5B5C5D5E60616263656667686A6B6C6D6F70717273757678797A7B7C7E808183858687898A8C8D8E
90919293959697999A9B9D9E9FA1A2A3A5A6A7A9AAABADAEAFB0B2B3B4B5B6B7B8BABBBCBDBEC0C1
C2C3C4C5C7C8C9CACBCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFDFE0E1E2E3E5E6E7E8E9EAEB
ECEDEEEFF0F1F2F3F4F4F5F6F7F7F8F9F9FAFBFBFCFDFDFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
0000000001010202030303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151516
171818191A1A1B1B1C1D1D1E1F20212122232425262728292A2B2B2C2D2E2F2F3031323334353536
3738393A3B3C3D3D3E3F40414143434445464748494A4B4C4D4E4F50525354555657585A5B5C5D5E
5F60616264656667696A6B6C6E6F70717274757678797A7B7D7E808183848687898A8C8E8F919294
959698999B9C9E9FA1A2A4A5A7A9AAACAEAFB1B3B4B6B8BABBBDBFC1C2C4C6C7C9CBCCCED1D3D4D6
D9DBDDDFE1E3E5E7E9EBEDF0F2F4F6F9FBFDFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000001010101010101010101020202020202020203030303
0303030404040404040405050506060606070707080808080909090A0A0A0A0B0B0B0C0C0C0C0D0D
0D0D0D0D0D0E0E0E0F0F0F0F10101011111212121313131414141515151616161618181819191919
1A1A1A1B1B1B1B1C1D1D1E1E1E1E1F1F
>
<
FFFFFEFEFEFEFDFDFDFCFCFCFCFBFBFBFAFAFAFAF9F9F9F8F8F8F8F7F7F7F6F6F6F6F5F5F5F4F4F4
F4F3F3F3F2F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEEEEEDEDEDECECECECEBEBEBEAEAEAEAE9E9E9E8
E8E8E8E7E7E7E6E6E6E6E5E5E5E4E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0E0DFDFDFDEDEDEDEDDDD
DDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D5D4D4D4D3D3D3D3D2D2D2D1
D1D1D1D0D0D0CFCFCFCFCECECECDCDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6
C6C5C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBB
BABABAB9B9B9B9B8B8B8B7B7B7B7B6B6
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
0F0E0D0C0B0A09080706050403020100
>
4 %_Br
<
3131323333343435353636373838393A3A3B3B3C3C3C3C3D3D3D3E3E3E3F3F404041414242434344
44454545464646474747484849494A4A4A4B4B4C4C4D4D4E4E4F4F4F505051515152525353545455
565657575859595A5B5B5C5C5D5D5E5F60626264656667686A6B6B6C6D6E6F70707273737576787A
7B7D7F8081838587898B8D90929495979B9D9EA0A2A5A7A9ABAEB0B2
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFEFDFDFCFAF9F9F8F8F6
F6F7F6F5F4F3F3F2F0EFEEEEEDEBEAE9E8E7E5E3E2E1DFDEDDDCDBD9D8D7D7D6D5D4D4D3D2D0CFCE
CDCAC9C8C7C6C3C2C1C0BFBDBCBBBABAB8B7B6B5B2B3B2B1B0AEADAC
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBF8F6F4EEEDEBEB
EAE7E6E5E4E1E0DFDFDEDAD9D8D7D6D2D0CECDCAC8C7C7C6C2C1C0C0BDBCBCBBBCB9B9B9B8B8B5B4
B3B4B0AFAEADAEABAAAAA9A8A8A7A7A7A6A5A5A5A7A4A3A3A3A3A3A3
>
<
1F202122232425262728292A2B2D2E2F3031323435363738393A3B3C3E3F40414244454647494A4B
4C4E4F50515354555758595A5C5D5F60616364656768696B6C6D6F707173747677797A7B7D7E8081
8284858688898B8C8D8F909293959697999A9B9C9E9FA0A2A3A4A5A6A7A9AAABACADAEAFB0B1B1B2
B3B4B4B5B6B7B8B8B9B9BAB9BABBBBBCBBBBBCBDBDBCBDBDBDBCBCBD
>
<
B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F
8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867
666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F
3E3D3C3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
00000001010101010202020203030303030404040404050505050506060606070707070708080808
0809090909090A0A0A0A0B0B0B0B0B0C0C0C0C0C0D0D0D0D0D0E0E0E0E0F0F0F0F0F101010101011
11111112121212121313131313141414141415151515161616161617171717171818181818191919
191A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1D1D1D1D1E1E1E1E1E1F1F1F
>
<
00000001010101020202020203030303030404040405050505050606060607070707070808080808
090909090A0A0A0A0A0B0B0B0B0C0C0C0C0C0D0D0D0D0D0E0E0E0E0F0F0F0F0F1010101011111111
11121212121313131313141414141415151515161616161617171717181818181819191919191A1A
1A1A1B1B1B1B1B1C1C1C1C1D1D1D1D1D1E1E1E1E1E1F1F1F1F202020
>
4 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0.192157 1 1 0.121569 0.713726 0 0 2 50 58.2418 %_BS
%_0.192157 1 1 0.121569 0.713726 0 0 2 50 58.2418 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 3)
(Unnamed gradient 3) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 4)
(Unnamed gradient 4) 0 3 Bd
[
<
000102030405050708090A0B0C0E0F1011121315161718191A1B1D1E1F202122232425262728292A
2B2C2D2E2F3031323334353637383A3B3C3D3D3E3F4041424343444546474748494A4B4C4C4D4E4F
4F50515253535455555656575859595A5B5C5C5D5D5E5F5F60606262636364656566666868696969
6B6B6B6C6C6E6E6F6F707071717173737374747576767678787879797A7B7B7B7B7D7D7D7D7F7F80
80808282828283848585858787878788898A8A8A8B8C8D8D8E8F8F90909092939394949697979899
9A9B9C9C9E9FA0A1A1A3A4A5A7A9AAABACADAFB0B2
>
<
31323333343536373738393A393B3C3C3D3D3E3F4041414243444344454647464748494A4A4B4C4D
4C4D4E4F504F5051525353545556555758595A595A5B5C5D5D5D5E5F5F6060616261626364656465
6667666768696A696A6B6B6C6C6D6D6E6E6F6F7071707172737473747576757677787978797A7A7B
7A7B7C7D7E7D7E7E7F7E7F80818281828384858485858685868787888788898A8B8A8A8B8C8B8C8D
8E8E8D8E8F909090909192919293939493949495959595969796979798999899999A9B9A9B9C9D9C
9D9E9F9F9E9FA1A2A3A2A3A5A6A5A7A7A9AAAAABAC
>
<
E4E5E5E5E6E7E8E9E9EAEBEBEBECEDEDEEEEF0F0F1F1F1F1F1F1F2F2F2F3F3F3F3F3F3F4F5F6F7F8
F8FAFBFBFCFCFCFCFBFBFBFBFBFCFCFDFDFEFEFEFEFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFEFDFCFEFDFCFBFBFCFBFBFAFBFAFBFAF8F8F7F5F3F2F2F1F0EFF2F1EF
EEEDEDECEAE8E6E6E7E6E5E5E4E3E1DEDEDCD9D7D8D8D7D6D4D4D2D1CECCCCCACBCAC8C8C6C4C2C2
C0BEBCBCBCBAB9B6B4B4B2B0AEAEABACAAA7A7A5A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000001
0101010101010101020202020202030303040404050506060607070808090A0A0B0B0C0C0D0E0E0F
101011111213141415161718191A1B1C1C1D1E1F20212223242525262729292A2B2D2E2E2F313233
3435363839393B3C3E3E3F414244444647494A4B4C4E4F50515254555658595B5D5D5F6162636566
686A6A6C6E70717274757778797B7D7F7F8183858787898B8D8E9091939596989A9B9D9E9FA1A3A3
A5A7A8AAABACAEAFB1B1B3B4B5B5B6B8B9BABABCBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A29282726252423
>
<
CCCBCACAC9C8C7C6C6C5C4C3C3C2C1C0BFBFBEBDBCBBBBBAB9B8B8B7B6B5B4B4B3B2B1B0B0AFAEAD
ADACABAAA9A9A8A7A6A5A5A4A3A2A2A1A09F9E9E9D9C9B9A9A9998979796959493939291908F8F8E
8D8C8C8B8A898888878685848483828181807F7E7D7D7C7B7A797978777676757473727271706F6E
6E6D6C6B6A6A6968676766656463636261605F5F5E5D5C5C5B5A595858575655545453525151504F
4E4D4D4C4B4A494948474646454443424241403F3E3E3D3C3B3B3A39383737363534333332313030
2F2E2D2C2C2B2A292828272625252423222121201F
>
<
33333333333332323232323232323232323231313131313131313131313030303030303030303030
302F2F2F2F2F2F2F2F2F2F2F2F2E2E2E2E2E2E2E2E2E2E2E2D2D2D2D2D2D2D2D2D2D2D2D2C2C2C2C
2C2C2C2C2C2C2C2B2B2B2B2B2B2B2B2B2B2B2B2A2A2A2A2A2A2A2A2A2A2A2A292929292929292929
29292828282828282828282828282727272727272727272727262626262626262626262626252525
25252525252525252424242424242424242424242323232323232323232323232222222222222222
222222212121212121212121212121202020202020
>
4 %_Br
0
<
00000000000000010101010101010102020202030303030403030304040404040404040505050405
050505060606060707070708080808090909090A0A0A0A0B0B0A0A0C0C0B0B0D0D0C0C0E0E0E0D0F
0F0F0E1010100F111110101212111113121212131313131514141416161515171716161818171719
1918181A1A1A191B1B1B1B1C1C1C1C1D1D1D1D1E1E1E1E1F1F1F1F21212020222222222323232324
242424262625252727272628282828292929292A2A2A2A2B2B2B2B2C2C2C2C2D2D2D2D2F2F2F2E30
3030303131
>
<
0000010102030404050708080A0B0C0C0E0F10111214151617181A1B1C1D1F202123242527282A2B
2C2E2F3031333435363739393B3C3D3E3F41424344454748494B4C4D4F50515254555658595B5C5D
5F60616263646666686A6B6C6D6F70717274757677787A7A7C7D7F80818283848687898A8B8D8E8F
91929394969798999A9B9C9D9E9FA0A1A2A4A5A6A7A9AAABACADAEAFB0B1B2B3B4B5B7B8B9BABBBC
BDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECECFD0D1D2D2D3D4D5D6D6D7D8D9DADBDCDDDDDEDFE0
E0E1E2E3E4
>
0
1
<
FFFFFFFEFEFEFEFDFDFDFDFCFCFCFCFBFBFBFBFAFAFAFAF9F9F9F9F8F8F8F8F7F7F7F7F6F6F6F6F5
F5F5F5F4F4F4F4F3F3F3F3F2F2F2F2F1F1F1F1F0F0F0F0EFEFEFEFEEEEEEEEEDEDEDEDECECECECEB
EBEBEBEAEAEAEAE9E9E9E9E8E8E8E8E7E7E7E7E6E6E6E6E5E5E5E5E4E4E4E4E3E3E3E3E2E2E2E2E1
E1E1E1E0E0E0E0DFDFDFDFDEDEDEDEDDDDDDDDDCDCDCDCDBDBDBDBDADADADAD9D9D9D9D8D8D8D8D7
D7D7D7D6D6D6D6D5D5D5D5D4D4D4D4D3D3D3D3D2D2D2D2D1D1D1D1D0D0D0D0CFCFCFCFCECECECECD
CDCDCDCCCC
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
3736353433
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
0 0.192157 0.894118 0 1 0.8 0.2 2 50 47.8022 %_BS
%_0 0.192157 0.894118 0 1 0.8 0.2 2 50 47.8022 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
4 Bn
%AI5_BeginGradient: (Linear Gradient 1)
(Linear Gradient 1) 0 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
0 0 50 100 %_BS
%_0 0 50 100 Bs
1 0 50 0 %_BS
%_1 0 50 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Linear Gradient 2)
(Linear Gradient 2) 0 6 Bd
[
<
C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2
D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADA
DADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADBDBDADBDA
DADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6
>
<
3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E7072
7476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3
B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCF
CFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7
>
<
232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000
>
0
<
0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F1010
1111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F202020212122
22232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F30303131323232333334
3435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242
>
<
A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D
7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F
2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
>
<
C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9
C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCC
CCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCF
D0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2
>
4 %_Br
<
8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E
8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C
9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9
AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9
B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3
C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E1010121213131616
18181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5
D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4
A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C
59575553514E4D4A484644413F3C3A373633312E2C29282523
>
0
<
737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665
656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A5959585857575656555554545353
5252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E
3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827
272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F
0F0E0E0D0C0C0B0B0A09090807070606050404030302010100
>
<
F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEE
EDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBE
BEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACAC
ABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0
>
<
0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425
252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F40414142
4344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F6061626363
6465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F808182838485868687
88898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACAD
AEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6
>
4 %_Br
<
0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F3031
32343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A
5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575
757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282
>
<
444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18
181515141212100F0F0C0C0B09090606060404020201000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000
>
1
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2
B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D
8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473
>
<
BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECF
CFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDE
DFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDED
EEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8
>
<
00000000000101010101010101010102020202020202020203030303030303030304040404040404
04040405050505050505050505060606060606060606070707070707070707070808080808080808
0808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F
>
4 %_Br
0
<
9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A
6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444
>
1
0
1
<
7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4
A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF
>
0
4 %_Br
0
<
FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2
F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDE
DDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6
C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AE
AEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1
A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E
>
1
0
1
<
000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F202122232424
25262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444
454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E
5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F707070717172
72727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D
7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F
>
0
4 %_Br
[
0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS
%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs
0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS
%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs
0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS
%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs
0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS
%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs
0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS
%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs
0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS
%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 1)
(Radial Gradient 1) 1 2 Bd
[
<
00000001020304050506070809090A0B0C0D0F10111213141516171818191A1B1C1C1D1F20212223
24252627292A2A2B2D2E2F30323334353637383A3B3C3D3E3F40424344454647484A4B4C4D4E4F51
52535455555658595B5C5D5F6061626364666768696A6B6C6D6E6F6F707172737475767778797A7B
7C7D7E7F7F8081828383848586878788898A8B8C8B8C8D8E8E8F9090919293949495969697989899
9A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A5A6A6A7A7A8A8A9A9AAAAAAABABAAAAAB
ABABABACACACACADADADADAEAEAEAFAFAFB0B0B0B1B1B1B2B2
>
<
00000000010202030304040506060708090A0A0B0C0D0D0E0F1010111213141516171818191A1B1C
1D1D1E1F202122222324262728292A2B2C2D2E2F2F30313233343536373838393A3B3C3D3E3F4041
434445464748494A4C4D4E4F505152535455565758595A5A5B5C5D5E5F6061626364646566676869
6A6B6C6C6D6E6F6F70717272737475767778797A7B7C7C7D7E7F808081828383848586878788898A
8A8B8C8D8E8E8F8F9090919292939494959696979899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A2A2A3
A3A3A4A4A5A5A6A6A7A7A7A8A8A9A9A9AAAAAAABABABACACAC
>
<
00000000010202030304040506060708090A0B0B0C0D0E0F1011121213141515161718191A1B1B1C
1D1E1F20202122232425262728292A2B2C2D2E2F30313233343536373738393A3B3C3D3E3F404142
434445464748494A4C4D4E4F505152535455565758595A5B5C5C5D5E5F6061616161626364656566
676869696A6B6B6C6D6E6E6F70717172737474757677777879797A7B7C7C7D7E7F7F808181828383
8485858686878888898A8B8B8C8D8D8E8E8F8F90909191929293939494959596969797989899999A
9A9B9B9C9C9C9D9D9E9E9E9F9F9FA0A0A1A1A1A1A2A2A2A3A3
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000010101010101020202020203030304040505060606070708090A0A0B
0C0D0E0F0F101112131415161718191A1B1D1E1F20212324252728292B2C2E2F303233353637393B
3C3E4041434546484A4B4D4F51525456585A5C5E5F61636567696B6D6F717375777A7C7E80828587
898B8E90929497999B9DA0A2A4A6A8ABADAFB1B3B5B7B9BBBD
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDCDBDAD9
D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1
B0AFAEADADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A
898887868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766656463
6261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3E3D3C
3B3A393837363534333231302F2E2D2C2B2A29282726252423
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988
87868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160
5F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A3938
37363534333231302F2E2D2C2B2A292827262524232221201F
>
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0
AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A99989796959493929190908F8E8D8C8B8A89
8887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261
605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A39
3837363534333231302F2E2D2C2B2A29282726252423222120
>
4 %_Br
[
1 0 50 0 %_BS
%_1 0 50 0 Bs
0 0 50 100 %_BS
%_0 0 50 100 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Radial Gradient 2)
(Radial Gradient 2) 1 6 Bd
[
0
<
FDFDFDFDFDFCFCFCFCFCFBFBFBFBFBFAFAFAFAFAF9F9F9F8F8F8F7F7F6F6F5F5F5F5F4F4F3F3F2F2
F1F1F0F0EFEFEFEEEEEDEDECECECEBEBEAE9E9E9E8E7E7E7E6E6E5E5E4E3E3E3E2E1E0E0E0DFDEDE
DDDDDCDCDBDADAD9D8D8D7D7D6D6D5D4D4D3D2D2D1D1D0CFCFCECDCDCCCCCBCACAC9C9C8C7C7C6C6
C5C5C4C3C3C2C2C1C1C0C0BEBEBDBDBCBCBBBBBABAB9B9B7B7B6B6B5B5B3B3B3B2B2B1B1B1B0B0AE
AEAEADADACACACABABABAAAAAAA9A9A9A8A8A8A6A6A6A6A5A5A5A5A4A4A4A4A2A2A2A2A2A1A1A1A1
A19F9F9F9F9F9F9F9F9E9E9E9E9E9E9E9E9E
>
1
0
1
<
000102030405060708090A0B0C0D0E0F10111112131415161718191A1B1C1D1D1E1F202122232424
25262728292A2A2B2C2D2E2F2F3031323334343536373838393A3B3B3C3D3E3E3F40414142434444
454647474849494A4B4B4C4D4E4E4F505051525253535455555657575858595A5A5B5B5C5D5D5E5E
5F5F606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6E6F6F707070717172
72727373747474757575767676777777787878797979797A7A7A7A7B7B7B7B7C7C7C7C7C7D7D7D7D
7D7E7E7E7E7E7E7E7E7F7F7F7F7F7F7F7F7F
>
0
4 %_Br
0
<
9E9D9B999896959392908F8E8C8B8A88878684838181807E7D7B7A79777675737272706F6D6C6B6A
6A68676564626261605E5D5D5C5A595757565555535251514F4E4E4D4B4B4A4A4848474745454444
>
1
0
1
<
7F808182838485868788898A8B8C8D8E8F90919293939495969798999A9B9C9D9E9E9FA0A1A2A3A4
A4A5A6A7A8A9A9AAABACADADAEAFB0B1B1B2B3B3B4B5B6B6B7B8B8B9BABABBBBBCBCBDBDBEBEBFBF
>
0
4 %_Br
<
0001030405050608090A0B0D0E0F111213151618191A1C1D1E1F202123242627282A2B2C2D2F3031
32343536373838393B3C3D3E3F4141434445464748494A4B4C4D4F4F51525353535455565758595A
5B5C5C5D5E5F60616162626364656667676869696A6A6B6B6C6D6D6E6F7070707172737374757575
757576767778787879797A7B7B7B7C7C7D7D7D7D7E7E7F80808081818182828282
>
<
444341413F3E3E3C3C3A3939373634343232312F2E2C2C2B292927262624232120201E1D1B1B1A18
181515141212100F0F0C0C0B09090606060404020201000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000
>
1
0
<
FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8
D7D6D5D4D3D2D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBABAB9B8B7B6B5B4B3B2
B1B0AFAEADACABAAAAA9A8A7A6A5A4A3A2A1A09F9E9E9D9C9B9A99989796959594939291908F8E8D
8D8C8B8A8988878786858483828281807F7E7D7D7C7B7A79797877767675747473
>
<
BFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C6C6C6C7C7C8C8C8C9C9CACACACBCBCCCCCCCDCDCECECECF
CFD0D0D0D1D1D2D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDCDDDDDEDEDE
DFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E4E5E5E6E6E6E7E7E7E8E8E9E9E9EAEAEAEBEBEBECECECEDED
EEEEEEEFEFEFF0F0F0F1F1F1F2F2F2F3F3F3F4F4F4F5F5F5F6F6F6F7F7F7F7F8F8
>
<
00000000000101010101010101010102020202020202020203030303030303030304040404040404
04040405050505050505050505060606060606060606070707070707070707070808080808080808
0808090909090909090909090A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C
0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F
>
4 %_Br
<
8282828383838384848485858586868686878787878788888989898A8A8A8B8B8C8C8C8D8D8D8D8E
8E8E8F8F8F8F90909091919292939394949595959696969697979898989899999A9A9A9A9B9B9C9C
9C9C9D9D9E9E9E9E9F9E9F9FA0A0A0A1A1A1A2A2A2A2A3A3A3A4A4A5A5A5A6A6A6A7A7A8A8A8A9A9
AAAAAAAAABABABABACACACADADADADADAEAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B9
B8B9B9BABABBBBBBBCBCBDBDBDBDBEBEBFBFBFBFBFC0C0C0C0C1C1C1C1C1C1C1C2C2C2C2C2C2C3C3
C3C3C3C3C3C3C3C3C3C4C3C4C4C4C4C4C4C5C5C5C5C5C5C5C5
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000001010203030405060608080A0A0B0C0C0E0E1010121213131616
18181A1B1B1C1C1E1E2020232325252828292A2B2C2E2E3030
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFEFEFCFBFAF9F9F7F5F4F1F1F0EEEDECEBEBEBEAE8E7E6E6E4E2E1DFDDDCDBDAD9D8D7D6D5D5
D3D2D1D0CECDCBCBCAC8C7C6C5C4C3C2C2C0BFBEBCBBBAB8B7B5B5B4B2B1B0AEADACAAA9A7A6A6A4
A3A1A09E9C9A9997959492908E8E8C8A88868582817E7D7A79767572706F6C6A6866646462605D5C
59575553514E4D4A484644413F3C3A373633312E2C29282523
>
0
<
737373727272727171717070706F6F6F6E6E6E6D6D6D6C6C6B6B6B6A6A6A69696868686767666665
656564646363626262616160605F5F5E5E5D5D5C5C5C5B5B5A5A5959585857575656555554545353
5252515150504F4F4E4E4D4D4C4C4B4B4A4A494948484747464545444443434242414140403F3E3E
3D3D3C3C3B3B3A3A39383837373636353534333332323131302F2F2E2E2D2D2C2B2B2A2A29292827
272626252424232322222120201F1F1E1D1D1C1C1B1A1A191918171716161514141313121111100F
0F0E0E0D0C0C0B0B0A09090807070606050404030302010100
>
<
F8F8F8F8F7F7F7F7F7F6F6F6F6F5F5F5F5F4F4F4F3F3F3F3F2F2F2F1F1F1F0F0F0F0EFEFEFEEEEEE
EDEDEDECECECEBEBEBEAEAEAE9E9E9E8E8E7E7E7E6E6E6E5E5E5E4E4E4E3E3E2E2E2E1E1E1E0E0DF
DFDFDEDEDDDDDDDCDCDCDBDBDADADAD9D9D8D8D8D7D7D6D6D6D5D5D4D4D4D3D3D2D2D1D1D1D0D0CF
CFCFCECECDCDCCCCCCCBCBCACAC9C9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C3C2C2C1C1C0C0BFBFBFBE
BEBDBDBCBCBBBBBBBABAB9B9B8B8B7B7B6B6B6B5B5B4B4B3B3B2B2B1B1B1B0B0AFAFAEAEADADACAC
ABABAAAAAAA9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A0
>
<
0F0F10101011111212131314141515161617171819191A1A1B1C1C1D1D1E1F1F2021212223232425
252627272829292A2B2C2C2D2E2E2F303131323334343536373738393A3A3B3C3D3D3E3F40414142
4344454546474849494A4B4C4D4D4E4F5051525253545556575758595A5B5C5D5D5E5F6061626363
6465666768696A6A6B6C6D6E6F70717272737475767778797A7B7B7C7D7E7F808182838485868687
88898A8B8C8D8E8F90919293949495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACAD
AEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6
>
4 %_Br
<
C5C5C5C5C6C6C7C7C8C8C8C8C9C9C9CACBCBCCCCCCCCCCCCCDCDCECECFCFD0D0D1D1D1D1D1D2D2D2
D3D3D3D4D4D4D4D4D4D5D5D5D5D5D6D6D6D6D7D6D7D7D7D7D7D8D8D8D9D9D9DAD9DADADADADADADA
DADADBDBDADBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDBDADBDBDADBDA
DADADADADADADADADADAD9D9D9D9D8D8D8D8D8D7D7D7D7D7D7D6D6D6D6D6D6
>
<
3032343436383A3B3D3F3F4143444648494B4D4F4F51535557595B5C5E6062646567686A6C6E7072
7476787A7D7F81838587898B8D8D8E9092949597999A9C9E9FA1A2A3A5A6A8A9ABACAEAFB0B1B2B3
B4B5B6B7B7B8B9BABBBCBDBEBFC0C0C1C2C2C3C4C4C5C6C7C7C8C9C9C9CACACBCCCCCDCDCECECFCF
CFD0D0D0D1D1D1D2D2D2D3D3D4D3D4D4D4D5D5D5D6D6D6D6D6D6D6D6D6D7D7
>
<
232120201F1E1C1B18171716141312100F0E0D0C0C09080706050402010000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000
>
0
<
0000010101020203030304040505060606070708080809090A0A0B0B0B0C0C0D0D0E0E0E0F0F1010
1111111212131314141415151616171718181819191A1A1B1B1C1C1C1D1D1E1E1F1F202020212122
22232324242425252626272728282829292A2A2B2B2C2C2D2D2D2E2E2F2F30303131323232333334
3435353636373737383839393A3A3B3B3C3C3C3D3D3E3E3F3F404041414242
>
<
A09F9E9E9D9C9B9A99989897969594939291908F8F8E8D8C8B8A89888786858483828281807F7E7D
7C7B7A79787776757473727170706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A59585756
555453525251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F
2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413121110
>
<
C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9
C9C9C9C9C9C9C9CACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCC
CCCCCCCCCDCDCDCDCDCDCDCDCDCDCDCDCECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCF
D0D0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2
>
4 %_Br
[
0 0.992157 1 0 1 0 0 2 33.3333 0 %_BS
%_0 0.992157 1 0 1 0 0 2 33.3333 0 Bs
0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 %_BS
%_0 0.619608 1 0 1 0.498039 0 2 42.6471 20.0599 Bs
0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 %_BS
%_0 0.266667 1 0 1 0.74902 0 2 47.0588 40.4192 Bs
0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 %_BS
%_0.509804 0 1 0 0.45098 0.972549 0.058824 2 56.7164 58.982 Bs
0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 %_BS
%_0.772549 0.188235 0.137255 0 0 0.627451 0.776471 2 51.5625 80.8383 Bs
0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 %_BS
%_0.839216 0.843137 0 0 0.258824 0.062745 0.823529 2 50 100 Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI3_BeginPattern: (Offset Squares Pattern)
(Offset Squares Pattern) 0 0 55.0781 55.0801 [
%AI3_Tile
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
0 0 m
0 55.0801 L
55.0781 55.0801 L
55.0781 0 L
0 0 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa
 0.043137 0 0.713725 0 1 1 0.4 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
26.1436 52.3262 m
26.1436 29.4307 L
3.03125 29.4307 L
3.03125 52.3262 L
26.1436 52.3262 L
f
25.0264 50.123 m
5.89063 50.123 L
5.89063 32.4961 L
25.0264 32.4961 L
25.0264 50.123 L
f
*U
*u
5.89063 50.123 m
25.0264 50.123 L
25.0264 32.4961 L
5.89063 32.4961 L
5.89063 50.123 L
n
10.0313 34.2578 m
24.1338 34.2578 L
24.1338 48.3613 L
10.0313 48.3613 L
10.0313 34.2578 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa
 0 0.501961 0.984314 0 0.968627 0.576471 0.117647 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
22.4082 48.793 m
8.30566 48.793 L
8.30566 34.6895 L
22.4082 34.6895 L
22.4082 48.793 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 Xa
 0.003922 0.984314 0.976471 0 0.929412 0.12549 0.141176 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
52.6943 24.7852 m
52.6943 1.67578 L
28.9355 1.67578 L
28.9355 24.7852 L
52.6943 24.7852 L
f
47.6777 22.582 m
30.0527 22.582 L
30.0527 4.95703 L
47.6777 4.95703 L
47.6777 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
 0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
30.0527 22.582 m
50.6982 22.582 L
50.6982 4.95703 L
30.0527 4.95703 L
30.0527 22.582 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa
 0.501961 0 0.992157 0 0.54902 0.776471 0.247059 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
47.4199 21.252 m
32.2393 21.252 L
32.2393 6.50293 L
47.4199 6.50293 L
47.4199 21.252 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa
 0.698039 0.14902 0 0 0.160784 0.670588 0.886275 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
27.5391 27.5391 m
27.5391 0 L
0 0 L
0 27.5391 L
27.5391 27.5391 L
f
25.4316 26.1445 m
2.75293 26.1445 L
2.75293 2.16992 L
25.4316 2.16992 L
25.4316 26.1445 L
f
*U
*u
4.95605 7.40039 m
22.582 7.40039 L
22.582 25.0273 L
4.95605 25.0273 L
4.95605 7.40039 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa
 0.188235 0 0.980392 0 0.85098 0.878431 0.129412 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
22.582 5.67383 m
4.95605 5.67383 L
4.95605 25.0273 L
22.582 25.0273 L
22.582 5.67383 L
f
20.3887 21.3281 m
7.58105 21.3281 L
7.58105 10.0313 L
20.3887 10.0313 L
20.3887 21.3281 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa
 0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
6.93555 8.73633 m
21.0371 8.73633 L
21.0371 22.8379 L
6.93555 22.8379 L
6.93555 8.73633 L
f
%AI6_EndPatternLayer
) &
(0 O 0 R 0.623529 0 0.003922 0 0.2 0.776471 0.956863 Xa
 0.623529 0 0.003922 0 0.2 0.776471 0.956863 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
55.0781 55.0801 m
55.0781 27.5391 L
27.5391 27.5391 L
27.5391 55.0801 L
55.0781 55.0801 L
f
52.3252 50.9688 m
30.292 50.9688 L
30.292 28.9355 L
52.3252 28.9355 L
52.3252 50.9688 L
f
*U
*u
30.292 50.9688 m
52.3252 50.9688 L
52.3252 28.9355 L
30.292 28.9355 L
30.292 50.9688 L
n
32.4951 30.0527 m
50.1221 30.0527 L
50.1221 47.6777 L
32.4951 47.6777 L
32.4951 30.0527 L
n
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0.043137 0 0.713725 0 1 1 0.4 Xa
 0.043137 0 0.713725 0 1 1 0.4 XA
) @
(
%AI6_BeginPatternLayer
*u
0 J 0 j 1 w 4 M []0 d0 XR
50.1221 30.0527 m
32.4951 30.0527 L
32.4951 48.9727 L
50.1221 48.9727 L
50.1221 30.0527 L
f
*U
%AI6_EndPatternLayer
) &
(0 O 0 R 0 0.901961 0 0 1 0.2 0.6 Xa
 0 0.901961 0 0 1 0.2 0.6 XA
) @
(
%AI6_BeginPatternLayer
0 J 0 j 1 w 4 M []0 d0 XR
34.9063 33.749 m
49.0078 33.749 L
49.0078 47.8506 L
34.9063 47.8506 L
34.9063 33.749 L
f
%AI6_EndPatternLayer
) &
] E
%AI3_EndPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7940.8833 8440.9551 m
-7849.0479 8440.9551 L
-7849.0479 8436.6758 L
-7940.8833 8436.6758 L
-7940.8833 8440.9551 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
-7940.6631 8438.2754 m
-7941 8438.3418 -7940.4814 8438.5313 -7940.8833 8438.3887 C
-7940.8379 8438.2705 -7940.7725 8438.1816 -7940.6631 8438.2754 C
f
-7850.1675 8438.4414 m
-7851.2529 8439.2041 -7852.6816 8438.4336 -7853.8701 8438.9199 C
-7854.0098 8438.9521 -7853.8354 8438.502 -7854.1484 8438.6025 C
-7855.3008 8439.1953 -7857.1162 8438.8418 -7858.5195 8438.3848 C
-7858.4346 8438.2666 L
-7858.7021 8438.1816 -7859.0283 8438.5723 -7859.3115 8438.5176 C
-7859.3135 8438.4395 -7859.2207 8438.4063 -7859.2861 8438.2979 C
-7859.3574 8438.5352 -7859.7979 8438.4082 -7859.9189 8438.584 C
-7860.0303 8438.4922 -7860.0195 8438.3047 -7860.1641 8438.2002 C
-7860.3262 8438.4697 L
-7860.7769 8439.1094 -7861.4209 8438.4258 -7862.0361 8438.7559 C
-7862.0063 8438.6934 -7861.9453 8438.6445 -7861.9941 8438.584 C
-7862.9814 8438.9727 -7864.2168 8438.8994 -7865.3208 8439.043 C
-7865.2769 8438.9482 -7865.2363 8438.7754 -7865.3008 8438.668 C
-7865.3555 8438.9512 -7865.6963 8439.0225 -7865.9922 8439.0781 C
-7866.1255 8438.7871 -7866.4995 8439.3438 -7866.8467 8439.1826 C
-7866.8169 8439.1191 L
-7867.0732 8439.4238 -7867.1973 8438.9434 -7867.4053 8439.3086 C
-7867.5684 8439.0801 L
-7867.6807 8439.4902 -7867.9395 8438.8672 -7868.1514 8439.0762 C
-7868.1445 8439.1602 L
-7868.3442 8439.2598 -7868.4482 8439.0537 -7868.6338 8439.123 C
-7868.6514 8439.0762 L
-7869.0854 8439.1826 -7869.3379 8438.9551 -7869.3271 8439.2754 C
-7869.4795 8439.0186 -7868.9063 8439.1582 -7869.1455 8438.7842 C
-7870.5732 8439.1152 -7872.0459 8439.0498 -7873.4834 8439.0566 C
-7873.6465 8438.9277 -7873.7505 8438.8887 -7873.7871 8438.7666 C
-7873.9307 8438.832 -7874.3281 8438.8262 -7874.4585 8438.9902 C
-7874.4102 8438.9834 -7874.5513 8438.8262 -7874.6274 8438.8105 C
-7874.8887 8438.6895 -7874.9131 8439.1621 -7875.2002 8439.0186 C
-7875.0859 8438.9336 -7875.0469 8438.8301 -7875.0854 8438.7109 C
-7875.3301 8438.9609 -7875.6577 8438.9209 -7875.9473 8439.002 C
-7875.9023 8438.9482 -7875.8325 8438.916 -7875.8433 8438.8154 C
-7876.1602 8439.0986 -7876.4209 8438.7559 -7876.6982 8438.9346 C
-7876.5947 8438.75 L
-7877.0415 8438.5254 -7876.7266 8439.1367 -7877.1128 8439.0039 C
-7877.02 8438.9453 -7877.0527 8438.873 -7877.0361 8438.7979 C
-7877.3965 8439.1338 -7877.9795 8439.0225 -7878.3389 8439.1367 C
-7878.3174 8439.1113 -7878.3232 8439.0605 Y
-7878.7148 8439.1025 -7879.1245 8438.998 -7879.5552 8439.1445 C
-7879.7119 8439.0625 -7879.5039 8438.6934 -7879.9185 8438.7617 C
-7879.9033 8439.1328 -7880.6221 8438.9141 -7880.3779 8439.334 C
-7880.7319 8439.2734 -7881.2925 8439.1338 -7881.5283 8439.2598 C
-7881.3691 8439.1191 -7881.7007 8438.8066 -7881.4063 8438.7754 C
-7881.6289 8438.5498 L
-7881.5957 8438.3984 -7881.3999 8438.6016 -7881.4707 8438.4102 C
-7881.6182 8438.4258 -7882.0479 8438.5723 -7882.1797 8438.5117 C
-7882.4531 8438.7393 -7882.7041 8439.1641 -7883.1465 8439.2109 C
-7882.9385 8439.0664 -7883.2646 8438.8018 -7883.1235 8438.7383 C
-7883.7407 8439.4482 L
-7883.8877 8439.4658 -7883.7725 8439.1563 -7883.9854 8439.2529 C
-7883.9746 8439.3506 -7884.0674 8439.4121 -7884.1318 8439.4922 C
-7884.1875 8439.4482 -7884.7441 8439.584 -7884.8081 8439.2178 C
-7884.8735 8439.0762 -7884.5684 8439.1426 -7884.7314 8439.0117 C
-7885.0029 8439.0146 -7885.0151 8439.1406 -7885.2871 8439.1465 C
-7885.2925 8439.0977 L
-7885.4717 8439.043 -7885.8213 8439.2529 -7885.6265 8439.4551 C
-7885.5015 8439.4658 -7885.6738 8439.2354 -7885.4888 8439.3418 C
-7885.6152 8439.5537 -7885.9312 8439.6133 -7886.2031 8439.6162 C
-7886.1104 8439.5586 -7886.1216 8439.4609 -7886.0845 8439.3574 C
-7886.4497 8439.6445 -7886.8369 8439.7354 -7887.2451 8439.8555 C
-7887.2515 8440.0293 -7887.0928 8439.5391 -7887.0327 8439.6309 C
-7887.5557 8439.3896 -7888.1128 8439.9727 -7888.5479 8439.6201 C
-7888.4766 8439.5898 -7888.5098 8439.8672 -7888.5146 8439.8184 C
-7888.7666 8439.7969 -7888.7549 8439.5449 -7888.9189 8439.6377 C
-7888.9355 8439.4902 -7889.1255 8439.6855 -7889.2944 8439.7305 C
-7889.3818 8439.8369 -7889.3384 8439.6582 -7889.1914 8439.6426 C
-7889.4268 8439.7666 -7890.3691 8439.9941 -7890.9131 8439.7793 C
-7890.9023 8439.877 -7891.2471 8440.1377 -7891.3721 8440.127 C
-7891.3232 8439.8984 L
-7891.4375 8439.7617 -7891.7422 8439.918 -7891.7632 8439.7227 C
-7892.0303 8440 -7890.7344 8439.4863 -7891.0957 8439.7002 C
-7891.1895 8439.5098 -7891.5991 8440.0645 -7891.5215 8439.7529 C
-7891.7725 8439.7617 -7892.0161 8440.0186 -7892.2559 8439.8047 C
-7892.1865 8439.8418 -7892.0522 8439.4873 -7892.2549 8439.5039 C
-7892.6123 8439.5449 -7892.3564 8439.6133 -7892.6465 8439.6895 C
-7892.8281 8439.7832 L
-7892.8398 8440.0059 -7893.1475 8439.7529 -7893.0146 8440.002 C
-7893.0586 8439.8184 -7893.5337 8440.1152 -7893.4971 8439.7461 C
-7893.4473 8439.4551 L
-7893.6016 8439.4766 -7893.7002 8439.7617 -7893.8213 8439.8896 C
-7893.8418 8439.8633 -7893.8823 8439.8047 -7893.8745 8439.7578 C
-7893.8994 8440.2031 -7894.2432 8439.7207 -7894.4268 8440.0645 C
-7894.7505 8439.9102 -7895.2495 8440.0498 -7895.4023 8439.7734 C
-7895.6514 8439.9082 -7895.8784 8440.0674 -7896.1621 8439.9727 C
-7896.1055 8439.9307 -7896.0283 8439.918 -7896.0122 8439.8223 C
-7896.1904 8439.6914 -7896.2344 8439.8086 -7896.3975 8439.8809 C
-7896.3608 8439.8145 -7896.7539 8439.6201 -7896.9521 8439.4629 C
-7897.1992 8439.5957 -7897.1143 8439.8359 -7897.1392 8439.9824 C
-7897.3652 8439.543 -7897.8379 8440.2656 -7898.1211 8439.8672 C
-7898.0352 8439.8066 -7897.7598 8439.6514 -7897.9658 8439.541 C
-7898.1919 8439.1025 -7898.4219 8439.8643 -7898.7861 8439.6543 C
-7898.6968 8440.0186 L
-7898.8594 8439.793 -7899.2334 8440.2305 -7899.1963 8439.8594 C
-7899.3184 8439.9902 -7899.6265 8439.7383 -7899.5859 8440.0938 C
-7900.1846 8439.793 -7901.0425 8440.2754 -7901.4102 8439.6377 C
-7901.4961 8439.6973 -7901.7104 8439.6367 -7901.6665 8439.8193 C
-7901.5239 8440.0176 -7901.4673 8439.6777 -7901.4141 8439.8125 C
-7901.4912 8439.8232 -7901.5078 8439.9209 -7901.5161 8439.9697 C
-7901.7021 8439.8887 -7901.8486 8439.8633 -7901.6729 8439.5674 C
-7902.0869 8439.3477 -7902.1001 8440.1719 -7902.6274 8440.0322 C
-7902.6035 8439.8857 -7902.6436 8439.8301 -7902.7979 8439.8535 C
-7903.0903 8440.1055 L
-7903.4312 8440.0469 -7903.2842 8439.7705 -7903.2925 8439.5215 C
-7903.4746 8439.5645 -7903.6973 8439.5527 -7903.7803 8439.7383 C
-7904.0015 8439.4258 L
-7903.8398 8439.6514 -7904.1514 8439.5762 -7904.2368 8439.6367 C
-7904.1514 8439.5762 L
-7904.1846 8439.4697 -7904.3955 8439.5352 -7904.5024 8439.5664 C
-7904.4766 8439.7207 -7904.2617 8439.7832 -7904.1445 8439.8281 C
-7904.2373 8439.9375 -7904.3823 8439.9121 -7904.5059 8440.041 C
-7904.4648 8439.7969 -7904.8027 8439.8672 -7904.9473 8439.8418 C
-7905.1133 8439.7891 -7905.1348 8440.0605 -7905.1831 8440.0527 C
-7905.1875 8439.9258 -7905.4541 8440.0313 -7905.3247 8439.8535 C
-7905.2681 8439.8125 -7905.1953 8439.9766 -7905.1016 8439.8643 C
-7905.2109 8439.7705 -7905.1982 8439.5498 -7905.4258 8439.7109 C
-7905.5967 8439.832 -7905.3818 8440.1934 -7905.7061 8440.0391 C
-7905.6211 8439.9785 -7905.6055 8439.8809 -7905.5391 8439.793 C
-7905.8433 8439.666 L
-7905.8564 8439.8887 L
-7905.8975 8439.832 -7905.8691 8439.8125 -7905.8877 8439.7832 C
-7905.9785 8440.0176 -7906.3521 8439.8555 -7906.4209 8440.1191 C
-7906.5742 8440.1426 -7906.7441 8439.9648 -7906.8906 8439.9395 C
-7906.8623 8439.9199 L
-7907.0415 8439.7891 -7907.2793 8439.875 -7907.4297 8440.0254 C
-7907.4219 8439.9766 L
-7907.5195 8439.959 -7907.7505 8439.9941 -7907.8735 8440.125 C
-7908.1201 8439.957 -7907.9561 8439.2842 -7908.2295 8439.5645 C
-7908.48 8439.5723 -7908.6221 8439.9727 -7908.5215 8440.1152 C
-7908.9717 8439.9648 -7909.4834 8440.3281 -7909.9009 8439.9824 C
-7909.9658 8440.0723 -7909.9248 8440.1289 -7910.0586 8440.1816 C
-7910.7197 8440.0938 -7911.4551 8440.4453 -7911.9814 8440.0078 C
-7911.79 8439.9141 -7911.9688 8439.7842 -7911.9727 8439.6582 C
-7912.1309 8439.8574 -7912.1631 8439.4512 -7912.2197 8439.793 C
-7912.2041 8439.9941 -7912.2197 8440.0918 -7912.0337 8440.1729 C
-7912.4282 8440.2813 -7913.0283 8440.2813 -7913.2471 8440.0938 C
-7913.1377 8440.1865 -7913.2227 8440.248 -7913.3086 8440.3086 C
-7913.2803 8439.9873 -7913.5713 8439.9395 -7913.7915 8440.0527 C
-7913.8223 8440.248 L
-7913.9658 8440.0469 L
-7914.0503 8440.1094 -7914.0591 8440.457 -7914.2773 8440.2695 C
-7914.2891 8440.1934 -7914.3018 8440.1162 -7914.3418 8440.0605 C
-7914.5693 8440.2207 -7914.8906 8440.4922 -7915.1377 8440.3262 C
-7915.3398 8440.041 L
-7915.4453 8440.0723 -7915.6235 8440.2441 -7915.4375 8440.3262 C
-7915.8594 8440.1543 -7916.1309 8440.1328 -7916.2646 8439.8857 C
-7916.9912 8440.4873 -7918.0459 8440.5117 -7918.8906 8440.4688 C
-7918.8652 8440.3223 L
-7919.0923 8440.1855 -7918.9834 8440.5781 -7919.1416 8440.4766 C
-7919.0684 8440.3369 -7919.3145 8440.1729 -7919.1362 8440.002 C
-7919.4609 8439.8477 -7919.5547 8440.2559 -7919.7656 8440.3223 C
-7919.7979 8440.5146 -7919.5957 8440.1992 -7919.6367 8440.4434 C
-7919.6729 8440.5117 -7920.0859 8440.293 -7920.1362 8440.584 C
-7920.2178 8440.4697 -7920.1543 8440.2559 -7920.1104 8440.1377 C
-7920.3086 8440.2793 L
-7920.5513 8439.9395 -7919.7559 8439.6719 -7920.0107 8439.2529 C
-7920.1934 8439.2979 L
-7920.3682 8438.9941 -7919.71 8438.9551 -7920.1689 8438.8506 C
-7920.3682 8438.9941 -7920.5381 8439.416 -7920.3608 8439.5449 C
-7920.7754 8439.625 -7920.5527 8440.2383 -7920.9985 8440.2139 C
-7921.1201 8440.043 -7920.6416 8440.1729 -7920.7275 8439.9336 C
-7920.9375 8439.6992 -7921.1484 8440.0645 -7921.3354 8439.9824 C
-7921.1279 8440.0918 -7921.3032 8440.3857 -7921.4375 8440.4395 C
-7921.6641 8440.3018 -7921.29 8440.1641 -7921.6113 8440.1338 C
-7921.6641 8440.3018 -7921.9595 8440.4277 -7921.7041 8440.5449 C
-7921.8203 8440.9258 -7922.0381 8440.4395 -7922.2129 8440.7344 C
-7922.3174 8440.4658 -7921.8823 8440.1152 -7922.2354 8439.9814 C
-7922.1792 8440.2393 -7922.6704 8440.332 -7922.4839 8440.7139 C
-7922.6221 8440.6406 -7922.6367 8440.4375 -7922.5361 8440.2793 C
-7922.7334 8440.1201 -7923.0151 8440.75 -7923.0801 8440.2383 C
-7923.1479 8440.502 L
-7923.21 8440.416 -7923.2983 8440.3506 -7923.3994 8440.209 C
-7923.5732 8440.2041 -7923.96 8440.5664 -7923.9443 8440.168 C
-7924 8440.209 -7924.3975 8440.1914 -7924.2441 8440.4658 C
-7923.9971 8440.6338 -7923.96 8440.2656 -7923.8223 8440.6377 C
-7923.9971 8440.334 -7924.1787 8440.6777 -7924.3213 8440.7793 C
-7924.3447 8440.625 L
-7924.4297 8440.6855 -7924.6255 8440.6514 -7924.6787 8440.8184 C
-7924.6133 8440.7305 -7924.6475 8440.625 -7924.7148 8440.5879 C
-7924.8042 8440.8223 L
-7925.1494 8440.9395 -7924.8857 8440.4102 -7925.2217 8440.4785 C
-7924.9663 8440.2969 L
-7925.0225 8440.3359 -7925.1367 8440.1162 -7925.2979 8440.1895 C
-7925.3604 8440.4033 -7925.4775 8440.6602 -7925.5313 8440.8262 C
-7925.7207 8440.9199 -7925.6162 8440.585 -7925.8027 8440.8047 C
-7925.5586 8440.5469 L
-7925.5215 8440.4766 -7925.7231 8440.1934 -7925.9761 8440.1992 C
-7926.1377 8440.2734 -7926.3887 8440.582 -7926.1338 8440.6992 C
-7926.2607 8440.7031 -7926.4385 8440.5723 -7926.3379 8440.416 C
-7926.6255 8440.4902 -7926.2998 8440.6465 -7926.5479 8440.7793 C
-7926.6494 8440.6367 -7926.9658 8440.4336 -7927.1563 8440.2266 C
-7926.8975 8439.8682 L
-7927.0693 8439.8643 L
-7926.8467 8439.5781 -7927.1826 8439.6465 -7927.0566 8439.3438 C
-7927.1743 8439.2969 -7927.3169 8439.3994 -7927.4307 8439.4785 C
-7927.0864 8439.9629 -7927.8159 8440.1406 -7927.7158 8440.582 C
-7928.1875 8440.7031 -7928.0107 8439.5078 -7928.5024 8440.1992 C
-7928.4219 8440.3145 -7928.6533 8440.6504 -7928.3564 8440.5225 C
-7928.6494 8440.4746 -7928.5557 8440.9658 -7928.9014 8440.7832 C
-7928.6455 8440.6016 -7929.1763 8440.3359 -7928.8066 8440.0723 C
-7928.8311 8440.2178 -7928.6001 8440.1826 -7928.5435 8440.1426 C
-7928.6641 8439.9727 -7928.5186 8439.6973 -7928.8184 8439.6973 C
-7929.0015 8439.7393 -7929.2524 8439.748 -7929.2158 8439.9785 C
-7929.2085 8440.2314 -7928.9365 8439.9512 -7929.0537 8440.207 C
-7929.4185 8440.2949 -7929.4795 8439.9102 -7929.6304 8440.3594 C
-7929.3999 8440.3232 -7929.3423 8440.584 -7929.3467 8440.7578 C
-7929.6143 8440.8633 L
-7929.5625 8440.6953 L
-7929.9922 8440.5742 -7929.6895 8441 -7930.1055 8440.9551 C
-7930.3008 8440.623 L
-7930.2017 8440.3369 -7929.6953 8440.75 -7929.7695 8440.2842 C
-7930.04 8440.2656 -7930.1299 8440.502 -7930.3848 8440.3818 C
-7930.3281 8440.3418 -7930.2505 8440.3301 -7930.1943 8440.2891 C
-7930.2915 8440.2734 -7930.3877 8439.6563 -7930.7734 8440.0176 C
-7930.9727 8440.1582 -7930.8262 8440.1826 -7930.8311 8440.3574 C
-7931.2656 8440.4102 -7931.3955 8440.5879 -7931.6753 8440.6152 C
-7931.6177 8440.2754 -7932.1699 8440.582 -7931.8608 8440.2344 C
-7931.7188 8440.4336 -7931.0903 8440.4141 -7930.9365 8440.0898 C
-7931.0947 8439.6865 -7930.5952 8440.1465 -7930.5024 8439.7383 C
-7930.8506 8439.7285 -7930.8335 8439.332 -7930.8896 8439.0723 C
-7930.9863 8439.0537 -7931.0801 8439.1641 -7931.1377 8439.2041 C
-7931.1787 8439.4482 -7931.0522 8439.4453 -7931.0449 8439.6973 C
-7931.4336 8439.6309 -7931.8081 8439.7666 -7932.0225 8440.0059 C
-7932.1523 8439.8848 -7932.1113 8439.6406 -7931.9575 8439.6162 C
-7932.4199 8439.6895 -7932.9141 8439.6563 -7933.3535 8439.582 C
-7933.0693 8439.9814 -7933.8433 8439.6758 -7933.6494 8440.0078 C
-7933.4141 8440.0977 -7933.2119 8440.3818 -7933.3418 8440.5605 C
-7933.4888 8440.5352 -7933.3369 8440.3857 -7933.3984 8440.3008 C
-7933.5859 8440.5186 -7933.6895 8439.9512 -7933.8735 8440.2949 C
-7933.4512 8440.166 -7933.7915 8439.8086 -7933.7139 8439.4961 C
-7934.0186 8439.6719 -7933.7007 8439.2734 -7934.0024 8439.2734 C
-7934.3057 8439.4473 -7934.6787 8439.584 -7935.0161 8439.6514 C
-7935.4399 8439.3555 -7936.0898 8439.6465 -7936.4683 8439.6582 C
-7936.6665 8439.5 -7936.5322 8439.1465 -7936.7471 8439.085 C
-7936.9995 8439.0918 -7936.5601 8439.4658 -7936.9336 8439.3047 C
-7936.8975 8439.2344 L
-7937.0107 8439.3154 -7937.5825 8438.9941 -7937.6929 8439.502 C
-7937.5776 8439.1191 L
-7937.6475 8439.084 -7937.7119 8439.1719 -7937.7695 8439.2129 C
-7937.7725 8439.0879 -7937.8535 8438.9746 -7937.7402 8438.8926 C
-7937.9707 8438.6289 -7938.2241 8438.9346 -7938.4746 8438.9453 C
-7938.3135 8439.1719 L
-7938.7422 8439.3496 -7939.0293 8439.125 -7939.4443 8439.2041 C
-7939.4316 8438.9824 L
-7939.6787 8439.1152 L
-7939.6182 8438.8994 -7939.8447 8438.7617 -7939.9751 8438.9414 C
-7939.3335 8438.3984 L
-7939.1553 8438.5293 -7939.5283 8438.666 -7939.4165 8438.8848 C
-7939.3213 8439.0762 -7938.9375 8439.0146 -7938.8755 8438.8018 C
-7939.0225 8438.7773 -7939.0293 8438.8262 -7939.1436 8438.9063 C
-7939.1919 8438.5977 -7938.9688 8438.6094 -7938.8584 8438.4033 C
-7938.9355 8438.416 -7939.0449 8438.3223 -7939.0615 8438.4199 C
-7938.9102 8438.2695 -7938.7578 8438.2461 -7938.5059 8438.2383 C
-7938.6763 8438.3594 -7938.4131 8438.4297 -7938.4775 8438.5176 C
-7938.4575 8438.2461 -7938.2168 8438.1621 -7937.9053 8438.2383 C
-7937.6831 8438.5527 -7937.3208 8438.0361 -7936.96 8438.123 C
-7937.1064 8438.3984 -7937.2935 8438.6191 -7937.5127 8438.7305 C
-7937.2861 8438.8682 -7937.2607 8438.7227 -7937.0337 8438.8613 C
-7936.9238 8438.6563 -7936.8457 8438.3418 -7936.5503 8438.2168 C
-7936.5342 8438.4199 L
-7936.2666 8438.3154 -7936.2666 8438.0146 -7935.9258 8438.0723 C
-7935.3418 8438.1719 -7934.7407 8438.1719 -7934.2949 8438.1973 C
-7934.2783 8438.3994 L
-7934.0303 8437.9658 -7933.4521 8438.2393 -7933.1182 8438.0469 C
-7932.5503 8438.2422 -7931.8848 8437.8535 -7931.5938 8438.2031 C
-7930.5913 8438.0469 -7929.7148 8437.8945 -7928.6768 8437.9688 C
-7928.8516 8438.2637 L
-7928.6655 8438.0469 -7928.7305 8438.4336 -7928.5479 8438.3896 C
-7928.7578 8438.1543 -7928.2949 8438.084 -7928.1665 8437.9033 C
-7927.7041 8438.1328 -7927.1104 8437.8818 -7926.7007 8437.6758 C
-7926.6846 8437.8789 L
-7926.2705 8437.498 -7925.7759 8437.832 -7925.2598 8437.8945 C
-7925.2007 8437.9785 -7925.1074 8438.1689 -7924.9536 8438.1465 C
-7924.6738 8437.8184 -7924.5273 8437.8418 -7924.1167 8437.6367 C
-7923.8169 8437.6367 -7923.3301 8437.7178 -7923.0254 8437.8457 C
-7921.8975 8437.3848 -7920.7456 8437.6797 -7919.5732 8437.4023 C
-7919.4888 8437.6406 L
-7918.3521 8437.1309 -7916.9541 8437.5938 -7915.9839 8437.332 C
-7916.0776 8437.7393 L
-7915.7734 8437.8643 -7915.3843 8437.6328 -7915.4619 8437.3438 C
-7915.1567 8437.4688 -7914.7007 8437.1465 -7914.5068 8437.4814 C
-7914.1953 8437.5566 -7914.1255 8437.293 -7913.8662 8437.2383 C
-7913.2422 8437.3926 -7913.0107 8437.3574 -7912.4224 8437.2813 C
-7912.5684 8437.2559 L
-7912.6328 8437.3457 -7912.6387 8437.5186 -7912.4922 8437.5449 C
-7912.2725 8437.4307 -7911.6846 8437.6543 -7911.9033 8437.168 C
-7911.2754 8437.4482 -7910.4385 8436.9395 -7909.8271 8437.3184 C
-7909.8789 8437.1855 -7909.7246 8437.1602 -7909.6602 8437.0703 C
-7909.1089 8437.0645 -7908.5293 8437.3359 -7908.0898 8437.1094 C
-7908.0024 8437.1758 -7908.2295 8437.3359 -7908.0049 8437.3496 C
-7907.8721 8437.2979 -7908.0024 8437.1758 -7907.8384 8437.1016 C
-7906.9453 8436.8535 -7906.0303 8437.3574 -7905.2188 8437.293 C
-7903.7754 8437.0361 -7902.2695 8437.166 -7900.8867 8437.123 C
-7900.9023 8437.2207 L
-7900.4395 8436.8477 -7899.8159 8437.6025 -7899.4463 8437.041 C
-7899.3369 8437.1338 -7899.0283 8437.085 -7899.1094 8437.2734 C
-7898.7407 8437.0098 -7898.0771 8437.5215 -7897.5439 8437.1865 C
-7897.5928 8437.1777 -7897.6211 8437.1973 -7897.6777 8437.2393 C
-7897.1392 8437.4551 -7896.6641 8437.1602 -7896.0957 8437.3555 C
-7896.1533 8437.3975 -7896.2583 8437.4277 -7896.2754 8437.5254 C
-7896.0557 8437.7129 -7895.7549 8437.1133 -7895.6348 8437.584 C
-7895.5088 8437.5801 -7895.5449 8437.3477 -7895.6221 8437.3613 C
-7894.3779 8437.5449 -7893.0498 8437.2441 -7891.7549 8437.1367 C
-7890.8271 8437.418 -7891.6982 8437.9297 -7890.9663 8437.5781 C
-7890.9063 8437.6689 -7890.9229 8437.3984 -7890.9131 8437.4961 C
-7890.6299 8437.3643 -7890.4717 8438.0215 -7890.2754 8437.7754 C
-7890.3564 8437.4863 -7890.1445 8437.6133 -7890.1387 8437.4375 C
-7889.5713 8437.625 -7889.4575 8437.8857 -7889.0098 8437.666 C
-7889.0435 8437.8184 L
-7888.5186 8437.3887 -7887.9102 8437.6191 -7887.4673 8437.123 C
-7884.5728 8437.0322 -7881.7983 8436.7578 -7878.9761 8436.7002 C
-7876.1865 8436.7949 -7873.4551 8436.5723 -7870.6221 8436.8359 C
-7869.9585 8437.2354 -7869.9087 8437.2246 -7869.1797 8437.0625 C
-7869.2095 8437.127 -7869.2549 8437.1426 -7869.2061 8437.2031 C
-7869.1699 8436.875 -7868.6929 8437.1719 -7868.6235 8436.8594 C
-7867.5762 8436.9199 -7866.6113 8436.8301 -7865.5337 8436.8281 C
-7865.7041 8436.8633 -7865.7896 8437.1309 -7865.5869 8437.1094 C
-7865.3755 8436.8994 L
-7865.3408 8436.9922 L
-7865.2021 8436.9434 -7865.0513 8436.7813 -7865.1943 8436.6758 C
-7862.4873 8436.3926 -7859.8242 8437.0498 -7857.1729 8436.9697 C
-7856.5439 8437.1064 -7855.6475 8436.9814 -7854.9629 8436.9141 C
-7852.9355 8437.3506 -7851.1084 8437.7041 -7849.0479 8437.3984 C
-7849.3174 8438.2461 -7850.1675 8438.4414 V
f
-7940.2578 8438.2422 m
-7940.1855 8438.4063 -7939.9497 8438.4961 -7940.1377 8438.7139 C
-7940.1611 8438.5605 -7940.2822 8438.3887 -7940.2578 8438.2422 C
f
-7933.9619 8439.9297 m
-7933.9536 8439.8809 -7933.8721 8439.9961 -7933.8521 8440.0225 C
-7933.9297 8440.0352 -7934.0024 8440.1729 -7934.0645 8440.0879 C
-7933.9854 8440.0762 -7933.9976 8439.998 -7933.9619 8439.9297 C
f
-7932.3521 8440.0273 m
-7932.3765 8440.1729 -7932.7207 8440.2891 -7932.9238 8440.3066 C
-7932.3521 8440.0273 L
f
-7930.8521 8440.6289 m
-7930.7227 8440.752 -7930.7583 8440.8193 -7930.9326 8440.8154 C
-7930.9453 8440.7383 -7930.8877 8440.6992 -7930.8521 8440.6289 C
f
-7930.7456 8440.2969 m
-7930.6211 8440.293 -7930.5591 8440.3789 -7930.4985 8440.4629 C
-7930.5029 8440.3369 -7930.7871 8440.541 -7930.7456 8440.2969 C
f
-7927.4893 8440.7207 m
-7927.4111 8440.709 -7927.2417 8440.5879 -7927.1689 8440.75 C
-7927.2505 8440.6367 -7927.5498 8440.9346 -7927.4893 8440.7207 C
f
-7925.9761 8440.5 m
-7925.9272 8440.5098 -7925.9072 8440.5361 -7925.8506 8440.4961 C
-7925.7607 8440.5625 -7925.8555 8440.6689 -7925.9312 8440.6826 C
-7925.9761 8440.5 L
f
-7898.4287 8439.9141 m
-7898.5923 8439.9863 L
-7898.5684 8439.8418 L
-7898.4287 8439.9141 L
f
-7886.3574 8439.9063 m
-7886.1943 8439.8145 -7886.2441 8440.043 -7886.2168 8440.0645 C
-7886.3643 8440.0801 -7886.1621 8439.8848 -7886.3574 8439.9063 C
f
-7879.8486 8439.1777 m
-7879.8984 8439.1816 L
-7879.8818 8438.8818 L
-7879.8486 8439.1777 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -
(ush Tool/ Charcoal/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -
(1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 1 1 1 Xa
(White)
Pc
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
(Black)
Pc
0 0.992157 1 0 1 0 0 Xa
(RGB Red)
Pc
0.062745 0 0.964706 0 1 1 0 Xa
(RGB Yellow)
Pc
0.627451 0 1 0 0 1 0 Xa
(RGB Green)
Pc
0.517647 0 0.12549 0 0 1 1 Xa
(RGB Cyan)
Pc
0.882353 0.768627 0 0 0 0 1 Xa
(RGB Blue)
Pc
0.270588 0.815686 0 0 1 0 1 Xa
(RGB Magenta)
Pc
0.168627 0.980392 0.92549 0.066667 0.756863 0.152941 0.176471 Xa
(R=193 G=39 B=45)
Pc
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 Xa
(R=237 G=28 B=36)
Pc
0 0.796078 0.968627 0 0.945098 0.352941 0.141176 Xa
(R=241 G=90 B=36)
Pc
0 0.501961 0.984314 0 0.968627 0.576471 0.117647 Xa
(R=247 G=147 B=30)
Pc
0 0.34902 0.870588 0 0.984314 0.690196 0.231373 Xa
(R=251 G=176 B=59)
Pc
0.047059 0 0.933333 0 0.988235 0.933333 0.129412 Xa
(R=252 G=238 B=33)
Pc
0.188235 0 0.980392 0 0.85098 0.878431 0.129412 Xa
(R=217 G=224 B=33)
Pc
0.501961 0 0.992157 0 0.54902 0.776471 0.247059 Xa
(R=140 G=198 B=63)
Pc
0.745098 0 0.996078 0 0.223529 0.709804 0.290196 Xa
(R=57 G=181 B=74)
Pc
0.862745 0.176471 1 0.039216 0 0.572549 0.270588 Xa
(R=0 G=146 B=69)
Pc
0.901961 0.333333 0.988235 0.258824 0 0.407843 0.215686 Xa
(R=0 G=104 B=55)
Pc
0.760784 0 0.74902 0 0.133333 0.709804 0.45098 Xa
(R=34 G=181 B=115)
Pc
0.784314 0.090196 0.458824 0 0 0.662745 0.615686 Xa
(R=0 G=169 B=157)
Pc
0.698039 0.14902 0 0 0.160784 0.670588 0.886275 Xa
(R=41 G=171 B=226)
Pc
0.87451 0.52549 0 0 0 0.443137 0.737255 Xa
(R=0 G=113 B=188)
Pc
0.992157 0.964706 0.035294 0.003922 0.180392 0.192157 0.572549 Xa
(R=46 G=49 B=146)
Pc
1 1 0.262745 0.247059 0.105882 0.078431 0.392157 Xa
(R=27 G=20 B=100)
Pc
0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
0.494118 0.992157 0.011765 0 0.576471 0.152941 0.560784 Xa
(R=147 G=39 B=143)
Pc
0.34902 1 0.372549 0.109804 0.619608 0 0.364706 Xa
(R=158 G=0 B=93)
Pc
0.117647 1 0.494118 0.007843 0.831373 0.078431 0.352941 Xa
(R=212 G=20 B=90)
Pc
0 0.968627 0.203922 0 0.929412 0.117647 0.47451 Xa
(R=237 G=30 B=121)
Pc
0.227451 0.27451 0.4 0 0.780392 0.698039 0.6 Xa
(R=199 G=178 B=153)
Pc
0.4 0.427451 0.52549 0.066667 0.6 0.52549 0.458824 Xa
(R=153 G=134 B=117)
Pc
0.505882 0.529412 0.607843 0.235294 0.45098 0.388235 0.341176 Xa
(R=115 G=99 B=87)
Pc
0.576471 0.603922 0.639216 0.419608 0.32549 0.278431 0.254902 Xa
(R=83 G=71 B=65)
Pc
0.227451 0.384314 0.635294 0.011765 0.776471 0.611765 0.427451 Xa
(R=198 G=156 B=109)
Pc
0.317647 0.490196 0.741176 0.098039 0.65098 0.486275 0.321569 Xa
(R=166 G=124 B=82)
Pc
0.360784 0.572549 0.839216 0.227451 0.54902 0.384314 0.223529 Xa
(R=140 G=98 B=57)
Pc
0.392157 0.639216 0.933333 0.356863 0.458824 0.298039 0.141176 Xa
(R=117 G=76 B=36)
Pc
0.415686 0.698039 0.968627 0.490196 0.376471 0.219608 0.07451 Xa
(R=96 G=56 B=19)
Pc
0.478431 0.733333 0.835294 0.682353 0.258824 0.129412 0.043137 Xa
(R=66 G=33 B=11)
Pc
Bb
2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 1)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 1)
Pc
Bb
2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Linear Gradient 2)
Pc
Bb
0 0 0 0 Bh
2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg
0 BB
(Radial Gradient 2)
Pc
(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p
(Offset Squares Pattern)
Pc
0 g
(K=100)
Pc
0.1 g
(K=90)
Pc
0.2 g
(K=80)
Pc
0.3 g
(K=70)
Pc
0.4 g
(K=60)
Pc
0.5 g
(K=50)
Pc
0.6 g
(K=40)
Pc
0.7 g
(K=30)
Pc
0.8 g
(K=20)
Pc
0.9 g
(K=10)
Pc
0.95 g
(R=241 G=241  B=242)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
0 O
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
0 J 0 j 1 w 4 M []0 d0 XR
178.7183 437.4292 m
170.0757 439.209 168.2217 438.7188 167.5645 442.1519 c
166.9077 445.5928 170.5308 447.6602 175.7334 447.7773 c
180.8384 447.9199 176.3857 443.1602 185.8848 442.6401 C
185.9683 444.4985 185.9888 446.7456 185.062 448.8149 c
182.7773 453.8989 189.3789 448.584 190.811 452.1655 c
194.7231 461.9766 202.6733 455.5479 198.5723 452.9395 c
190.998 448.1172 190.4619 443.7148 189.6348 441.0771 C
191.1626 442.0796 192.2617 442.6304 192.4448 442.4077 c
192.7046 442.0874 190.5034 439.9458 187.498 437.6245 c
184.48 435.3149 181.8193 433.7012 181.543 434.0332 c
181.4741 434.125 181.5781 434.3418 181.8193 434.6724 C
180.8862 434.3418 179.4209 434.0234 177.7285 433.832 c
174.7275 433.5117 175.0723 435.8564 175.7749 435.8115 c
182.7505 435.3267 174.002 434.0059 178.1528 434.084 c
180.5034 434.125 181.9399 435.2251 182.5718 435.4849 C
183.0103 435.9189 183.5942 436.4482 184.2554 437.019 C
182.8418 436.8564 181.021 436.9624 178.7183 437.4292 c
f
1 Ap
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
265.3457 461.3159 m
269.582 459.2349 271.6602 453.9868 y
269.1582 457.1621 263.3564 455.251 v
258.6367 453.6919 256.3291 461.5796 y
261.1094 463.4087 265.3457 461.3159 v
f
0.623529 0.721569 0.666667 0.839216 0.101961 0 0 Xa
500 0 m
0 0 L
0 500 L
500 500 L
500 0 L
f
0 0 0 0 1 1 1 Xa
495.8555 4.10156 m
4.14893 4.10156 L
4.14893 496.1646 L
495.8555 496.1646 L
495.8555 4.10156 L
f
415.584 260.5298 m
415.584 144.5205 249.6509 50.4756 y
83.7139 144.5205 83.7139 260.5298 v
83.7139 376.5405 247.1919 272.2007 y
415.584 376.5405 415.584 260.5298 v
Bb
0 0 0 0 Bh
1 (Unnamed gradient 1) 49.4941 286.5586 -30.5477 94.4408 1.84372 0 0 2.50065 -6605.5186 -12209.2607 Bg
149.9555 -120.0312 -88.4987 -203.3853 185.7358 258.8633 Bm
f
0 BB
u
0 Ap
0.345098 0.627451 0.560784 0.129412 0.607843 0.4 0.376471 Xa
146.0244 272.3257 m
150.2729 279.5903 157.1074 285.835 167.2881 288.5103 c
175.937 290.7847 184.7461 289.9229 192.2227 288.2129 c
206.4482 284.9404 216.4087 274.7837 233.0806 275.3428 c
249.7236 275.9014 260.0518 288.9849 265.0781 299.5869 c
268.0166 305.8198 270.166 312.1274 274.2422 318.1924 c
279.3096 325.7461 288.5215 332.3291 298.457 336.231 c
315.7256 342.98 334.2314 340.3013 348.4648 335.7427 c
349.6895 335.3496 350.7949 336.9658 349.5879 337.3682 c
334.2188 342.2842 315.2061 344.5 296.7822 337.292 c
288.2266 333.9351 280.0039 328.1689 274.8018 321.9966 c
270.2197 316.5449 267.6973 310.6382 265.1836 304.8271 c
262.4424 298.4927 259.626 292.0137 253.9219 286.314 c
247.5908 279.9985 238.3125 276.4209 229.1875 277.144 c
220.9106 277.8203 214.062 281.4702 207.6641 284.5923 c
201.3911 287.6328 194.6108 289.9619 186.8223 291.0229 c
179.3999 292.043 171.2334 291.6851 163.3472 288.9966 c
154.2246 285.8721 147.8955 279.4146 144.0459 272.8198 c
143.4365 271.7549 145.3989 271.2471 146.0244 272.3257 c
146.0244 272.3257 l
f
U
u
0.14902 0.223529 0.192157 0 0.843137 0.760784 0.74902 Xa
285.8926 328.603 m
269.9414 335.2969 257.3477 323.6592 245.8594 311.334 c
235.8867 300.646 225.6519 287.4766 212.353 287.9395 c
200.3706 288.3677 187.98 304.4951 180.5449 323.8882 c
177.0967 332.9053 175.6523 343.0034 177.8599 351.0654 c
179.8052 358.1074 184.0474 362.2573 189.0195 360.5928 c
195.5171 358.4004 201.8838 347.6382 207.0757 339.6699 c
212.189 331.811 217.9136 321.5532 224.2178 323.1318 c
228.5059 324.2026 232.0391 332.1904 231.1392 340.6431 c
229.7256 353.9453 218.8301 344.1973 216.4146 341.792 c
215.4214 340.7935 213.9331 343.8203 214.9517 344.8184 c
218.7305 348.5918 231.7109 358.2031 233.1865 339.7129 c
234.2031 326.8208 227.9985 317.9541 221.1079 319.5757 c
216.7534 320.6035 212.4844 327.3447 208.9673 332.6475 c
204.1221 339.9277 199.3975 347.9917 193.958 353.5508 c
187.6494 359.9868 182.5591 357.4312 179.6558 348.6191 c
176.2197 338.3081 182.3267 323.4053 187.2173 314.2646 c
194.4717 300.7534 203.2783 291.8574 212.5278 291.5249 c
221.9331 291.2085 229.8755 299.0049 237.0483 306.4883 c
251.3262 321.4009 265.7451 340.5571 285.8506 332.1201 c
287.1543 331.5864 287.2002 328.0557 285.8926 328.603 c
285.8926 328.603 l
f
U
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
90.9741 276.3545 m
75.2061 288.731 70.249 306.875 75.626 321.6997 c
80.6147 335.4648 95.5093 341.3545 111.6372 332.208 c
119.8638 327.5518 126.5508 319.853 132.1982 312.4868 c
134.0107 310.105 130.5039 308.6221 128.7061 310.9883 c
117.9248 325.0469 100.3008 339.4668 86.5737 329.1069 c
76.9023 321.8325 74.8945 305.9805 81.4272 292.9004 c
85.5303 284.686 93.333 278.5449 101.103 273.6504 c
106.7671 270.0825 112.3936 268.7695 111.2754 276.0029 c
109.8784 285.1045 96.8252 304.8667 88.3862 294.8311 c
87.3013 293.5376 84.8359 295.1787 84.6387 296.8145 c
84.3062 299.5205 83.4434 302.1973 83.9922 304.7256 c
84.5181 307.1543 88.7231 305.5112 88.1992 303.0767 c
88.0454 302.3418 88.0454 301.5664 88.1309 300.7788 C
97.48 306.2676 109.5088 291.5522 113.7593 281.4116 c
115.6963 276.7905 117.4634 269.4316 113.063 267.0459 c
106.8438 263.6465 96.4697 272.0464 90.9741 276.3545 c
f
0.501961 0.792157 0.760784 0.756863 0.219608 0.039216 0 Xa
419.4102 297.4941 m
406.5 293.0962 389.918 294.335 375.1973 296.1558 c
361.9922 297.813 348.3096 306.2266 335.3643 310.4663 c
327.4951 313.0518 319.1182 314.5347 312.0908 312.2173 c
303.2646 309.2822 300.6982 298.7388 300.9912 290.335 c
301.5088 274.9224 320.4111 268.832 333.8984 266.3662 c
357.4697 262.0615 382.6973 263.5703 404.2617 267.7925 c
407.8369 268.4863 409.4873 263.0034 405.9766 262.3213 c
381.1504 257.4521 350.5498 255.6548 323.3584 263.4272 c
311.9766 266.6865 301.4238 272.8101 296.6797 283.4902 c
291.2598 295.6519 296.7109 311.0234 306.9873 316.4961 c
317.8174 322.2739 333.668 316.8833 346.1748 312.0532 c
360.3711 306.5703 371.668 301.502 386.2617 300.4976 c
401.2393 299.458 431.8359 298.9951 426.6475 318.7627 c
420.7568 341.2329 393.6777 326.9556 381.0176 324.4468 c
372.8779 322.8623 365.2783 326.6958 357.4014 331.0376 c
352.8486 333.5503 348.4883 336.356 343.7158 338.3257 c
335.6533 341.6631 335.1357 332.585 334.7754 327.7783 c
334.6592 326.1235 333.0732 324.9336 331.0488 325.8086 c
278.4102 348.6426 255.0908 292.3926 220.0625 276.7144 c
197.6353 266.6865 166.9824 272.7261 145.4448 292.0078 c
122.1108 312.8657 115.3369 344.2617 120.2129 368.1855 c
120.502 369.6313 122.3271 370.0146 123.8506 369.4536 c
135.0479 365.4619 143.3413 348.3804 y
132.2563 359.3833 125.5737 363.0898 V
121.3687 336.79 132.4995 303.8896 161.8525 286.0503 c
189.1816 269.4414 217.0693 279.1001 235.0342 293.395 c
260.6484 313.7588 284.7871 349.123 329.1367 332.0967 C
330.7148 342.249 336.1309 348.0347 349.6143 341.2134 c
356.5801 337.6943 363.0146 333.2495 370.3008 330.4492 c
378.4482 327.3447 387.3066 332.2607 394.1328 334.1479 c
405.5967 337.3525 421.0215 339.7754 429.6221 326.2427 c
438.1484 312.7896 431.6719 301.6582 419.4102 297.4941 c
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
180.9775 252.7744 m
175.5381 246.9346 165.3281 248.5029 155.854 255.0273 c
147.043 261.1021 141.6909 270.7979 145.1558 277.6089 c
146.916 281.0713 150.6909 282.957 154.3906 284.3501 c
155.5859 284.7998 156.8955 282.4863 155.7212 282.0425 c
148.6475 279.4067 142.2437 273.0273 150.0923 262.894 c
155.6172 255.7837 165.3052 250.8677 172.2935 251.3911 c
176.6812 251.7153 179.377 254.6074 181.3413 257.7534 c
182.7798 260.0669 182.8608 262.8901 178.6909 263.9902 c
173.4404 265.395 163.2578 262.8257 170.2998 255.7407 c
171.1895 254.8145 170.5161 253.8394 169.5747 254.1074 c
167.9907 254.582 166.5024 254.7363 164.9434 255.6431 c
163.4136 256.5205 163.8774 258.4683 165.3989 257.5986 c
165.8521 257.3369 166.3091 257.1475 166.7808 257.0068 C
162.3599 263.5215 169.6558 266.7217 175.1577 266.665 c
177.6812 266.6436 181.8462 265.8735 183.7983 262.855 c
186.5981 258.5776 182.8711 254.8027 180.9775 252.7744 c
f
293.0635 316.7388 m
291.4668 314.7866 286.2666 303.5728 281.2783 301.9238 c
279.2012 301.2476 276.9863 301.0718 275.2275 302.1543 c
273.2363 303.3872 277.8633 310.834 280.2676 311.3984 c
282.9844 312.0493 294.8701 318.2275 292.1924 320.5996 c
289.168 323.3037 286.2705 318.4424 284.5313 316.7661 c
283.4248 315.7109 281.8701 315.502 280.2324 315.3335 c
279.293 315.2417 278.3428 315.1987 277.4102 315.0073 c
275.834 314.6714 276.6094 313.29 277.0195 312.5474 c
277.1436 312.2915 277.0088 311.9478 276.6094 311.875 c
266.252 309.8491 267.8965 299.208 263.916 293.3345 c
261.374 289.5791 256.0234 287.3301 250.8462 287.957 c
245.2275 288.6411 241.2202 292.5645 239.728 296.5664 c
239.6426 296.8086 239.8921 297.0508 240.1729 297.1309 c
242.2949 297.6797 243.5171 296.8242 245.2026 296.019 c
245.8242 295.7183 245.186 294.9307 244.5791 295.2178 c
243.3945 295.7886 242.4468 296.4995 241.0435 296.3667 C
242.8604 292.0801 247.7031 288.3853 253.9619 288.7583 c
259.7842 289.1196 263.2256 293.3911 264.6807 297.3164 c
266.7617 302.9165 267.2002 310.5679 275.7197 312.6099 C
275.0156 314.2568 275.3086 315.6563 278.0684 316.0273 c
279.4902 316.2227 280.8994 316.2227 282.3047 316.5664 c
283.8555 316.9341 284.7871 318.5674 285.6768 319.5269 c
287.1504 321.1895 289.3301 323.1045 291.9473 321.9966 c
294.5391 320.9004 294.585 318.5986 293.0635 316.7388 c
f
0.345098 0.627451 0.560784 0.129412 0.607843 0.4 0.376471 Xa
389.583 334.0288 m
383.9561 334.6602 379.9551 338.6655 375.9023 343.0542 c
373.5596 345.6118 371.4102 348.3003 368.7979 350.5337 c
364.3789 354.3086 361.9199 348.623 360.5479 345.6118 c
360.0762 344.5742 358.7666 344.1523 357.6709 345.1274 c
329.1143 370.4873 300.8057 339.3203 274.5078 336.5005 c
257.6641 334.6641 239.3306 344.8027 229.9751 361.5347 c
219.8506 379.6436 222.877 401.0859 231.667 415.377 c
232.2056 416.2251 233.4526 416.0923 234.3257 415.4277 c
240.605 410.5996 240.6924 404.8745 241.9146 397.9756 c
242.376 395.4351 238.6304 395.3335 238.1729 397.8696 c
237.3086 402.6807 237.3643 407.2739 233.9268 411.0044 C
225.0156 395.0698 224.4482 371.7886 239.1626 354.3691 c
252.8643 338.1812 273.1318 338.6187 288.0977 344.0762 c
309.4316 351.833 333.3398 369.479 357.9355 349.5254 C
361.3232 355.6846 366.1787 358.2832 373.2793 351.1592 c
376.9414 347.4702 380.043 343.3354 384.083 340.0527 c
388.6123 336.4028 395.4922 337.7119 400.3379 337.5225 c
408.4814 337.2393 398.3506 333.0381 389.583 334.0288 c
f
263.334 246.0156 m
260.3516 247.1689 257.7754 249.582 255.1025 252.1611 c
253.5625 253.6538 252.1035 255.168 250.4531 256.5889 c
247.6802 258.9492 247.1709 256.7939 246.8574 255.6626 c
246.7637 255.2695 246.1484 255.2793 245.4541 255.8833 c
227.4126 271.5947 216.9736 262.0732 203.8188 264.8599 c
195.4087 266.6318 184.6401 273.9824 177.5996 282.8867 c
169.9985 292.5176 168.7305 301.6055 171.356 306.6289 c
171.5054 306.9121 172.1685 306.6641 172.7007 306.2344 c
176.5732 303.1157 177.3711 300.5601 178.9199 297.2852 c
179.4976 296.0757 177.5771 296.6133 177.0015 297.8169 c
175.9243 300.0908 175.355 302.1289 173.0771 304.3311 C
170.6118 298.5845 173.395 288.3125 183.2783 278.2695 c
192.4697 268.9414 202.8418 266.0146 209.8135 266.1455 c
219.7549 266.3037 229.7173 270.4927 245.0029 257.8179 C
245.9404 260.0352 248.0815 260.4478 252.6797 256.1626 c
255.0566 253.9644 257.1914 251.6294 259.7217 249.5625 c
262.5127 247.2314 265.8818 246.749 268.4033 245.9199 c
272.6309 244.5332 267.9775 244.2305 263.334 246.0156 c
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
401.4932 288.2129 m
410.6973 290.6729 418.6621 287.3867 422.2949 281.1533 c
425.6602 275.376 423.2393 268.0874 415.083 264.6035 c
410.9219 262.8159 406.1406 262.478 401.8135 262.4546 c
400.4121 262.4312 400.001 267.9331 401.4014 267.937 c
409.666 267.9995 421.1025 266.8232 421.6055 274.9321 c
421.9463 280.6377 416.9434 286.8667 410.2998 287.1348 c
396.0313 287.7051 410.0713 285.2021 410.7012 284.8115 c
411.7715 284.1685 412.9814 283.731 413.709 282.8145 c
414.416 281.9312 412.5508 280.7979 411.8447 281.7046 c
411.6299 281.9702 411.3564 282.189 411.0586 282.3784 C
410.165 277.3042 401.2666 276.9272 396.374 278.207 c
394.1377 278.7832 390.9922 280.1982 391.4707 282.5371 c
392.1631 285.8545 398.3086 287.3789 401.4932 288.2129 c
f
1 Ap
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
210.3867 303.1938 m
206.1216 308.272 199.6035 309.5835 y
204.1577 307.1211 204.9868 298.856 v
205.6499 292.1152 215.0635 291.2124 y
214.6582 298.1216 210.3867 303.1938 v
f
0.14902 0.223529 0.192157 0 0.843137 0.760784 0.74902 Xa
212.0562 349.1621 m
209.2603 345.4067 213.2847 336.9346 y
212.4614 342.2021 222.4053 339.8672 v
230.5054 337.9546 223.3926 350.5884 y
214.8516 352.9292 212.0562 349.1621 v
f
0.345098 0.627451 0.560784 0.129412 0.607843 0.4 0.376471 Xa
267.2773 238.9307 m
271.3838 237.249 276.2627 241.1875 y
272.5273 240 270.1309 247.7178 v
268.1641 253.9976 261.3447 247.2939 y
263.1533 240.6152 267.2773 238.9307 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
173.2266 326.9419 m
167.1509 328.521 161.5596 325.3926 y
166.3569 326.2544 171.73 319.6753 v
176.1035 314.3237 183.584 319.7046 y
179.3062 325.3672 173.2266 326.9419 v
f
188.0156 336.104 m
188.9385 342.4209 185.4297 348.6113 y
186.71 343.4761 180.9482 338.3667 v
176.2656 334.2046 182.104 325.7988 y
187.0884 329.8008 188.0156 336.104 v
f
252.6289 336.0278 m
246.5474 337.6064 240.9707 334.4746 y
245.7471 335.3398 251.1201 328.771 v
255.5039 323.4053 262.9766 328.7788 y
258.7051 334.4492 252.6289 336.0278 v
f
228.144 355.0669 m
224.9932 358.373 220.1665 358.6758 y
223.5298 357.3257 224.1597 351.2725 v
224.6812 346.3564 231.6318 346.6611 y
231.3159 351.7451 228.144 355.0669 v
f
188.0552 304.9722 m
182.9458 306.2969 178.2524 303.6201 y
182.2725 304.3623 186.7871 298.7974 v
190.458 294.2471 196.7432 298.8364 y
193.166 303.6436 188.0552 304.9722 v
f
194.5464 357.5132 m
199.4038 357.6655 203.0225 360.5381 y
199.5806 359.1704 194.3345 362.1714 v
190.063 364.6138 185.4277 360.0298 y
189.6826 357.3882 194.5464 357.5132 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
145.2637 333.2339 m
151.9756 326.9302 163.9023 329.6699 y
155.981 330.7109 156.5942 345.9771 v
157.1011 358.416 139.6162 352.4917 y
138.5586 339.5371 145.2637 333.2339 v
f
414.9893 316.6567 m
408.7744 318.8682 402.3916 315.0601 y
407.5918 315.9922 412.3164 307.4224 v
416.1611 300.4233 424.8916 307.0391 y
421.2041 314.4312 414.9893 316.6567 v
f
0.345098 0.627451 0.560784 0.129412 0.607843 0.4 0.376471 Xa
230.8628 256.5068 m
234.3716 253.6968 239.2188 254.3652 y
235.7163 255.0879 234.4336 261.2432 v
233.3965 266.2725 226.4893 264.5332 y
227.3418 259.3125 230.8628 256.5068 v
f
242.0601 268.1401 m
246.3501 267.8472 249.9272 263.9453 y
246.7202 265.8345 242.4966 261.999 v
239.0669 258.8652 234.3652 265.0454 y
237.7554 268.4512 242.0601 268.1401 v
f
200.2021 259.8516 m
203.1909 256.7803 207.4414 256.272 y
204.3901 257.6338 203.4531 262.9819 v
202.686 267.3198 196.5957 267.4019 y
197.2007 262.9351 200.2021 259.8516 v
f
211.0376 262.5757 m
214.75 261.061 218.4663 262.21 y
215.4023 262.2354 212.4365 266.46 v
210.019 269.9009 204.9785 267.6987 y
207.3188 264.1055 211.0376 262.5757 v
f
179.5371 282.5098 m
183.1206 281.0479 186.7017 282.1831 y
183.7358 282.2007 180.8984 286.2925 v
178.583 289.6279 173.7192 287.4688 y
175.9663 283.979 179.5371 282.5098 v
f
251.873 251.0649 m
254.0137 247.5068 258.0068 245.9805 y
255.3896 247.9893 255.7578 253.1147 v
256.0469 257.2842 250.1914 258.8848 y
249.7236 254.6387 251.873 251.0649 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
132.7715 302.252 m
123.6968 303.0688 116.3867 296.7109 y
123.063 299.3311 132.2417 290.542 v
139.7266 283.3887 149.2295 293.7603 y
141.834 301.4238 132.7715 302.252 v
f
161.0649 303.0103 m
160.04 312.5786 152.5762 320.1855 y
156.3882 313.1826 149.8843 303.4009 v
144.5923 295.4409 156.2822 285.5498 y
162.0835 293.436 161.0649 303.0103 v
f
114.5991 323.6904 m
107.8916 324.2925 102.4727 320.3125 y
107.4175 321.9204 114.2041 316.2461 v
119.7144 311.6152 126.7813 318.1494 y
121.3086 323.0771 114.5991 323.6904 v
f
132.3374 337.9155 m
132.7759 343.9277 129.2173 349.4961 y
130.6953 344.7578 125.8125 339.502 v
121.8218 335.2266 127.6211 327.7549 y
131.8926 331.9287 132.3374 337.9155 v
f
370.8135 306.4785 m
366.709 312.1274 367.0039 319.4858 y
368.3672 314.0439 376.6211 311.502 v
383.3203 309.4463 381.8633 299.0049 y
374.9189 300.814 370.8135 306.4785 v
f
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
340.082 287.9922 m
335.5781 283.5527 328.5508 283.7134 y
333.4268 285.2451 334.1377 293.9907 v
334.709 301.0952 344.8711 299.7822 y
344.5801 292.4277 340.082 287.9922 v
f
369.4277 336.0396 m
365.3115 341.7021 365.6113 349.0566 y
366.9688 343.6187 375.2227 341.0688 v
381.9336 339.002 380.4834 328.5854 y
373.5225 330.3887 369.4277 336.0396 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
416.8662 265.2173 m
427.0723 261.0161 433.5713 251.4263 y
426.8438 257.3721 414.5156 254.5234 v
404.5088 252.208 396.5527 266.5654 y
406.6436 269.3691 416.8662 265.2173 v
f
0 Ap
0.345098 0.627451 0.560784 0.129412 0.607843 0.4 0.376471 Xa
266.4619 362.1929 m
258.2334 366.3921 250.6611 364.6841 246.7949 359.2251 c
243.2114 354.1445 244.8203 346.4502 252.0117 341.4287 c
255.668 338.8511 260.0273 337.5986 263.9932 336.7275 c
265.2695 336.4419 266.1113 341.8115 264.8408 342.085 c
257.2539 343.7422 246.6743 344.7969 246.9028 352.9155 c
247.0757 358.6465 252.1934 363.8364 258.2959 362.8184 c
271.417 360.6143 258.3438 360.8623 257.7285 360.5967 c
256.71 360.1743 255.5537 359.9556 254.8115 359.2056 c
254.0967 358.459 255.7061 356.9819 256.4248 357.73 c
256.6426 357.9551 256.9238 358.1074 257.2041 358.252 C
257.6016 353.0503 265.7051 350.9561 270.3154 351.2764 c
272.4072 351.4229 275.4121 352.2144 275.1689 354.6216 c
274.835 358.0332 269.3135 360.749 266.4619 362.1929 c
f
1 Ap
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
240.7236 358.0176 m
240.0063 362.6016 243.2363 366.6187 y
242.0122 363.1016 247.084 358.8359 v
251.2051 355.3716 245.8657 350.0376 y
241.459 353.4375 240.7236 358.0176 v
f
218.6138 392.0391 m
217.4375 396.5625 220.2124 400.9648 y
219.3682 397.2954 224.7915 393.5947 v
229.2021 390.5737 224.4731 384.6064 y
219.7988 387.5337 218.6138 392.0391 v
f
226.8677 385.5366 m
228.1689 389.7847 232.9248 391.625 y
230.2705 389.2256 233.168 383.1646 v
235.5146 378.2583 228.2148 376.2866 y
225.5747 381.2964 226.8677 385.5366 v
f
0 Ap
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
221.9917 411.8364 m
213.3467 413.6069 211.4927 413.1221 210.8359 416.5376 c
210.1792 419.9609 213.7979 422.0186 219.0068 422.1338 c
224.1074 422.2744 219.6592 417.5381 229.1582 417.0225 C
229.2393 418.8745 229.2622 421.1099 228.333 423.1655 c
226.0488 428.2241 232.6504 422.939 234.0806 426.5029 c
237.9941 436.2646 245.9468 429.8677 241.8438 427.2686 c
234.2695 422.4736 233.7334 418.0913 232.9082 415.4668 C
234.4336 416.4653 235.5376 417.0146 235.7163 416.7915 c
235.9761 416.4692 233.7769 414.3394 230.769 412.0317 c
227.7534 409.7339 225.0928 408.1318 224.814 408.458 c
224.7456 408.5498 224.8516 408.7671 225.0928 409.0933 C
224.1597 408.7671 222.6899 408.4482 221 408.2588 c
217.9966 407.9404 218.3457 410.2734 219.0483 410.2285 c
226.0195 409.748 217.271 408.4287 221.4238 408.5107 c
223.7729 408.5498 225.2109 409.644 225.8452 409.9023 C
226.2798 410.3359 226.8638 410.8594 227.5244 411.4302 C
226.1113 411.2661 224.2925 411.3735 221.9917 411.8364 c
f
0.345098 0.627451 0.560784 0.129412 0.607843 0.4 0.376471 Xa
399.2627 356.4814 m
392.2852 362.8594 384.3574 363.5195 379.0986 359.5903 c
374.2041 355.9209 373.7129 348.2788 379.4463 341.4229 c
382.3496 337.9429 386.3057 335.4453 389.9785 333.4624 c
391.1523 332.8037 393.4385 337.5635 392.2627 338.1968 c
385.2324 342.0186 375.0957 346.1572 377.5029 353.6758 c
379.2031 358.9707 385.6445 362.2847 391.3975 359.5122 c
403.7402 353.5332 390.9199 357.6694 390.2354 357.6069 c
389.1133 357.5132 387.918 357.6655 386.9854 357.1753 c
386.0723 356.6885 387.251 354.8364 388.1719 355.3091 c
388.457 355.4536 388.7539 355.5361 389.082 355.5713 C
388.0781 350.6099 395.5137 346.2197 400.1279 345.1353 c
402.2227 344.6387 405.4033 344.4844 405.8203 346.8115 c
406.3906 350.0942 401.6973 354.2734 399.2627 356.4814 c
f
1 Ap
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
371.3105 359.9868 m
371.8203 364.4712 376.0957 367.2534 y
373.9424 364.3247 377.7939 358.8477 v
380.9199 354.3652 374.2168 350.9951 y
370.791 355.481 371.3105 359.9868 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
320.7461 311.209 m
314.9482 311.1914 310.6543 306.5781 y
314.749 308.7002 321.0508 303.5278 v
326.1934 299.3057 331.6563 306.6641 y
326.5488 311.25 320.7461 311.209 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
331.9658 308.4541 m
323.8389 304.9839 320.2324 295.6089 y
324.8525 301.1851 336.4092 297.207 v
345.8086 293.9595 349.6289 308.1333 y
340.0742 311.9043 331.9658 308.4541 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
346.2725 321.3911 m
342.4521 326.3989 336.0791 327.7744 y
340.4111 325.3184 340.5107 317.2622 v
340.5977 310.6973 349.8828 309.6812 y
350.0801 316.3984 346.2725 321.3911 v
f
u
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
247.7886 289.1099 m
244.0513 286.0269 237.5493 286.9722 y
241.9043 287.6758 241.7251 294.6943 v
241.584 300.4097 251.0996 298.1685 y
251.5322 292.209 247.7886 289.1099 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
227.7241 310.2729 m
222.3677 310.916 218.8633 307.6646 y
222.4282 308.9346 228.749 303.9756 v
233.8911 299.9463 238.2231 305.312 y
233.0767 309.6147 227.7241 310.2729 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
238.3477 306.7148 m
231.1807 304.8447 228.7446 297.6309 y
232.4863 301.6387 243.5171 297.0488 v
252.5088 293.3071 254.6914 304.4053 y
245.5122 308.583 238.3477 306.7148 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
250.3306 315.5859 m
246.3271 320.1108 240.3096 321.979 y
244.5356 319.4644 245.4087 312.897 v
246.1089 307.5474 254.7783 305.6304 y
254.332 311.0762 250.3306 315.5859 v
f
U
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
354.9209 269.1797 m
361.3672 267.8687 366.1055 261.9404 y
361.5703 265.1431 354.5596 260.9458 v
348.8496 257.5381 342.7822 266.7021 y
348.4814 270.4888 354.9209 269.1797 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
350.9951 240.4063 m
355.0352 235.5742 361.4395 234.5537 y
357.002 236.7969 356.5137 244.8652 v
356.0918 251.4419 346.8125 251.9385 y
346.9434 245.1934 350.9951 240.4063 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
345.2725 251.229 m
353.4873 246.3828 362.9844 248.5205 y
355.624 249.2983 350.5918 261.0884 v
346.4951 270.6631 333.252 266.0752 y
337.0684 256.0786 345.2725 251.229 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
325.6904 256.0337 m
324.5908 250.1191 327.998 244.0596 y
326.8271 249 332.7725 253.5171 v
337.6113 257.1748 331.9238 265.4399 y
326.7793 261.9326 325.6904 256.0337 v
f
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
314.915 270.6416 m
316.9316 263.9668 314.1172 257.4756 y
314.6807 262.8979 307.5908 268.3535 v
301.8164 272.7808 306.8193 281.5913 y
312.8975 277.2944 314.915 270.6416 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
298.2578 271.4619 m
302.4209 262.5835 311.7393 258.0444 y
305.9316 263.3765 308.4863 275.2954 v
310.5566 284.999 296.6592 290.1533 y
294.0947 280.3291 298.2578 271.4619 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
289.1455 294.7197 m
283.4707 293.8892 279.8604 288.6548 y
283.5957 291.3804 290.4199 287.0562 v
295.9795 283.5566 300.3857 291.7085 y
294.8076 295.564 289.1455 294.7197 v
f
293.6699 277.9707 m
294.4355 271.8076 299.3965 267.0244 y
296.8281 271.4814 300.9326 277.8594 v
304.2881 283.0762 296.5576 289.2642 y
292.8848 284.104 293.6699 277.9707 v
f
314.0068 365.6416 m
306.7178 367.832 299.916 364.7271 y
305.7178 365.3545 311.9883 357.6421 v
317.1143 351.374 326.25 356.8413 y
321.2803 363.4648 314.0068 365.6416 v
f
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
327.2451 346.9697 m
321.7188 344.3047 315.0049 346.5986 y
320.1094 346.5107 323.1484 354.2598 v
325.6113 360.5537 335.04 356.2373 y
332.7783 349.6289 327.2451 346.9697 v
f
291.9912 349.7485 m
288.4404 352.7378 287.8232 358.2832 y
289.4072 354.6372 295.5303 355.1255 v
300.5127 355.5264 300.6563 347.3843 y
295.541 346.7393 291.9912 349.7485 v
f
99.0474 273.6289 m
92.8408 277.9961 90.4897 286.4604 y
93.834 280.9736 103.0859 282.1753 v
110.6206 283.1211 112.9194 270.6182 y
105.2373 269.2539 99.0474 273.6289 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
109.3608 285.0947 m
105.123 291.3843 97.106 293.1567 y
102.3418 290.0459 101.4336 279.9302 v
100.6914 271.6963 112.4912 270.3716 y
113.6035 278.7891 109.3608 285.0947 v
f
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
178.9507 257.3975 m
175.7729 256.0122 171.894 257.6514 y
174.8394 257.4131 176.6021 261.8955 v
178.0386 265.5688 183.4634 262.6128 y
182.1455 258.7593 178.9507 257.3975 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
176.7124 264.7798 m
173.2266 264.8813 170.6118 261.8799 y
173.0771 263.2241 176.8037 259.6172 v
179.8403 256.6631 183.2036 261.4971 y
180.1836 264.6758 176.7124 264.7798 v
f
u
277.6133 409.0249 m
272.584 388.3208 269.5176 406.8774 226.5063 406.1543 c
196.8848 405.6602 173.9063 386.5469 173.3682 409.6694 c
173.2451 414.709 197.8701 421.2935 227.4956 421.3716 c
257.1191 421.4497 278.79 413.8608 277.6133 409.0249 c
Bb
1 (Unnamed gradient 3) 162.7358 406.5908 -6.62034 54.1592 1 -0.002 0.002 1 -5.8553 8.8049 Bg
53.8106 -6.13641 -5.45059 -47.7966 175.0957 432.8164 Xm
8054.3379 -918.4945 -5.45059 -47.7966 -7879.2422 1351.311 Bc
53.8106 -6.13641 -5.45059 -47.7966 175.0957 432.8164 Bm
8054.3379 -918.4945 -5.45059 -47.7966 228.9063 426.6802 Bc
f
0 BB
/BBAccumRotation (0.002016) XT
0 Ap
277.6133 407.9014 m
280.6797 391.916 223.9971 394.4346 v
167.3154 396.9575 172.8691 407.6279 Y
167.835 407.6162 163.7671 402.2368 163.7754 395.6152 C
163.79 386.9551 L
163.7964 381.2358 166.8516 376.4624 170.9258 375.2783 C
173.7148 370.2568 200.3433 364.4028 228.0962 364.4712 c
234.3257 364.4849 257.4434 364.8774 272.6064 374.9854 C
276.6553 376.6245 279.6777 383.9854 V
280.667 396.2402 L
280.6563 402.8623 282.6455 407.9111 277.6133 407.9014 C
Bb
1 (Unnamed gradient 3) 158.9224 387.6611 -6.62034 54.1525 1 -0.002 0.002 1 -5.8553 8.8049 Bg
53.8039 -6.13565 -6.40764 -56.189 172.3042 422.5073 Xm
8056.9053 -918.7872 -6.40764 -56.189 -7884.6011 1341.2944 Bc
53.8039 -6.13565 -6.40764 -56.189 172.3042 422.5073 Bm
8056.9053 -918.7872 -6.40764 -56.189 226.1079 416.3716 Bc
f
0 BB
/BBAccumRotation (0.002016) XT
1 Ap
275.3379 410.541 m
270.3057 389.8354 261.6777 408.6812 218.6636 407.9639 c
189.0381 407.46 166.062 388.3501 165.5195 411.4712 c
165.4009 416.5142 190.0254 423.0991 219.6489 423.1812 c
249.2769 423.2515 276.5117 415.3789 275.3379 410.541 c
Bb
1 (Unnamed gradient 4) 261.3281 404.584 -179.685 92.1042 1 -0.002 0.002 1 -5.8553 8.8049 Bg
-92.1018 -0.690534 -0.289159 38.5673 271.7334 387.1421 Xm
-8210.1035 -61.5553 -0.289159 38.5673 8481.8359 448.6973 Bc
-44.0267 -0.33009 -0.289159 38.5673 271.7334 387.1421 Bm
-48.0751 -0.360443 -0.289159 38.5673 227.7065 386.812 Bm
-8210.1035 -61.5553 -0.289159 38.5673 179.6318 386.4517 Bc
f
0 BB
/BBAccumRotation (0.002016) XT
0 Ap
274.5771 410.1094 m
275.3584 396.9888 218.6719 399.5054 v
161.9922 402.0239 167.5459 412.6982 Y
162.5117 412.6807 158.4399 407.3052 158.4502 400.6855 C
158.4648 392.0234 L
158.4731 386.3027 161.5308 381.5332 165.6045 380.3511 C
168.396 375.3252 195.0244 369.4731 222.7729 369.5396 c
249.9707 369.6099 270.8809 375.4346 274.373 380.3335 C
279.6797 380.7163 281.4336 392.3423 V
281.417 401 L
281.4092 407.6201 279.6064 410.1289 274.5771 410.1094 C
Bb
1 (Unnamed gradient 4) 170.7515 383.5791 0.369827 78.4534 1 -0.002 0.002 1 -5.8553 8.8049 Bg
78.4508 0.663293 0.404203 -47.807 180.8096 414.8354 Xm
8137.0542 68.798 0.404203 -47.807 -7956.2446 346.0376 Bc
37.5012 0.317069 0.404203 -47.807 180.8096 414.8354 Bm
40.9496 0.346224 0.404203 -47.807 218.3105 415.1523 Bm
8137.0542 68.798 0.404203 -47.807 259.2607 415.4985 Bc
f
0 BB
/BBAccumRotation (0.002016) XT
U
/BBAccumRotation (0.002016) XT
u
1 Ap
310.0947 395.1343 m
299.2363 378.6372 302.4609 397.1021 265.2441 417.3506 c
239.6177 431.29 213.8291 424.9727 220.6631 446.3901 c
222.1558 451.0576 245.4023 445.1162 270.8994 430.7876 c
296.3936 416.4595 312.6328 398.9893 310.0947 395.1343 c
Bb
1 (Unnamed gradient 3) 133.5801 388.9448 -6.62034 53.8633 0.9156 0.4022 -0.4022 0.9156 4006.6299 -2626.4521 Bg
46.4908 -27.2051 -19.37 -33.1013 227.1455 459.2988 Xm
6972.0869 -4079.8762 -19.37 -33.1013 -6744.9414 4539.1748 Bc
46.4908 -27.2051 -19.37 -33.1013 227.1455 459.2988 Bm
6972.0869 -4079.8762 -19.37 -33.1013 273.6367 432.0938 Bc
f
0 BB
0 Ap
310.1475 395.2905 m
309.0186 382.9165 260.8604 412.1455 v
212.7046 441.3779 219.9941 445.9502 Y
215.6646 448.3828 210.894 446.6948 209.3477 442.1772 C
207.3169 436.2744 L
205.9761 432.3726 207.481 427.6382 210.707 424.8516 C
211.9229 420.0762 233.4463 403.1611 257.3223 389.7432 c
262.6934 386.7246 282.6621 375.7729 298.085 375.2979 C
301.958 374.4521 306.293 377.9985 V
310.0332 385.8667 L
311.5791 390.3823 314.4785 392.856 310.1475 395.2905 C
Bb
1 (Unnamed gradient 3) 130.4688 373.9194 -6.62034 53.9968 0.9156 0.4022 -0.4022 0.9156 4006.6299 -2626.4521 Bg
46.606 -27.2725 -18.198 -31.0985 220.2969 450.2856 Xm
6974.7163 -4081.4146 -18.198 -31.0985 -6754.4194 4531.7002 Bc
46.606 -27.2725 -18.198 -31.0985 220.2969 450.2856 Bm
6974.7163 -4081.4146 -18.198 -31.0985 266.9023 423.0132 Bc
f
0 BB
1 Ap
308.6133 397.6274 m
297.7529 381.1343 296.2832 402.5649 259.0703 422.812 c
233.4424 436.7529 207.6494 430.4341 214.4839 451.855 c
215.9761 456.519 239.2271 450.5791 264.7207 436.251 c
290.2197 421.9248 311.1533 401.4844 308.6133 397.6274 c
Bb
1 (Unnamed gradient 4) 230.793 384.1743 -179.685 90.5085 0.9156 0.4022 -0.4022 0.9156 4006.6299 -2626.4521 Bg
-83.0685 35.9464 17.6691 40.8314 296.666 379.4253 Xm
-7506.9639 3248.5061 17.6691 40.8314 7803.6299 -2869.0811 Bc
-39.7086 17.1832 17.6691 40.8314 296.666 379.4253 Bm
-43.3599 18.7632 17.6691 40.8314 256.957 396.6084 Bm
-7506.9639 3248.5061 17.6691 40.8314 213.5977 415.3716 Bc
f
0 BB
0 Ap
308.0586 398.2744 m
305.6348 388.9541 257.4785 418.1831 v
209.3228 447.4116 216.6079 451.9878 Y
212.2783 454.4224 207.5122 452.7305 205.9595 448.2188 C
203.9331 442.3081 L
202.5942 438.4082 204.0972 433.6797 207.3252 430.8911 C
208.5371 426.1157 230.0625 409.2007 253.9385 395.7813 c
277.3535 382.623 296.709 376.4429 300.8623 378.0845 C
305.5244 375.769 309.7686 382.8384 V
311.7949 388.7471 L
313.3457 393.2588 312.3838 395.8418 308.0586 398.2744 C
Bb
1 (Unnamed gradient 4) 142.4844 372.7559 0.369827 77.3142 0.9156 0.4022 -0.4022 0.9156 4006.6299 -2626.4521 Bg
70.9881 -30.6382 -17.489 -40.5217 230.3672 448.7935 Xm
7445.5225 -3213.4595 -17.489 -40.5217 -7215.1553 3662.2529 Bc
33.9339 -14.6457 -17.489 -40.5217 230.3672 448.7935 Bm
37.0542 -15.9925 -17.489 -40.5217 264.3008 434.1479 Bm
7445.5225 -3213.4595 -17.489 -40.5217 301.3555 418.1553 Bc
f
0 BB
U
0.345098 0.627451 0.560784 0.129412 0.607843 0.4 0.376471 Xa
182.9897 427.1729 m
184.3345 438.084 192.3848 441.6968 202.0977 438.248 c
211.1289 435.0239 219.2729 424.9648 219.7485 413.8687 c
220.0146 408.208 218.1211 403.5479 216.0615 399.6167 c
215.4023 398.3486 208.1797 403.9214 208.8428 405.1738 c
212.792 412.6768 219.8296 421.6943 209.73 430.8892 c
202.5903 437.3745 192.2183 439.5864 188.6514 433.916 c
181.0171 421.7041 191.0024 431.6221 191.811 431.7705 c
193.1372 432.0381 194.3071 432.6382 195.812 432.3179 c
197.2881 431.9834 197.8306 429.0938 196.3423 429.4277 c
195.8955 429.5293 195.4941 429.4941 195.0972 429.4531 C
201.1455 423.1616 197.3213 414.7695 193.2949 411.7407 c
191.4741 410.3672 188.1421 409.064 185.3901 412.022 c
181.4868 416.2017 182.5093 423.4097 182.9897 427.1729 c
f
/BBAccumRotation (0.783422) XT
u
0.443137 0.564706 0.552941 0.180392 0.513726 0.4 0.376471 Xa
248.2729 425.8755 m
253.5693 430.438 251.8438 436.7764 249.6758 442.8379 c
247.7988 448.0957 245.103 453.8481 247.7324 458.479 c
250.106 462.6504 258.0332 464.4248 266.1816 463.9224 c
269.9707 463.6821 273.7637 462.5625 276.165 460.4756 c
278.2617 458.647 278.9229 456.4761 277.4199 454.9854 c
275.4502 453.0391 270.5088 452.5273 266.7656 451.978 c
263.0742 451.439 258.4326 451.0752 257.8115 448.5879 c
257.3896 446.894 259.5215 444.3521 262.6377 443.3047 c
267.543 441.6538 266.1631 447.0874 265.7725 448.3301 c
265.6104 448.8442 266.9424 448.8813 267.1006 448.3574 c
267.7158 446.4116 268.6592 440.2622 261.9326 442.7319 c
257.2441 444.4556 255.3047 448.0879 257.1484 450.2646 c
258.3164 451.6362 261.4609 452.0562 263.9639 452.4453 c
267.4033 452.9824 271.0957 453.3496 274.0449 454.3755 c
277.4639 455.5674 277.5156 457.7813 274.9805 460.2373 c
272.0186 463.1196 265.6826 463.3696 261.5859 463.1157 c
255.5244 462.7363 250.7837 461.0581 248.9526 457.8359 c
247.0942 454.5596 248.3433 450.4873 249.6216 446.7397 c
252.1758 439.2734 256.1836 431.0713 249.5073 425.3208 c
249.0771 424.9453 247.8384 425.5005 248.2729 425.8755 c
248.2729 425.8755 l
f
U
1 Ap
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
244.8867 450.3896 m
241.7358 453.7134 236.9092 454.0142 y
240.2764 452.6582 240.8999 446.5776 v
241.4258 441.6357 248.3745 441.9429 y
248.0586 447.0503 244.8867 450.3896 v
f
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
241.7607 455.9956 m
241.0415 460.603 244.2759 464.6396 y
243.0493 461.1069 248.1211 456.8159 v
252.2451 453.3379 246.8989 447.9746 y
242.4922 451.3921 241.7607 455.9956 v
f
0.14902 0.223529 0.192157 0 0.843137 0.760784 0.74902 Xa
263.459 429.5781 m
266.248 433.3594 262.2031 441.8667 y
263.0342 436.5713 253.0889 438.8965 v
244.9844 440.7998 252.1289 428.1187 y
260.6758 425.7856 263.459 429.5781 v
f
0 Ap
0.239216 0.458824 0.431373 0.007843 0.760784 0.568627 0.52549 Xa
335.9355 382.3125 m
332.0547 394.6597 329.9307 396.6289 334.5225 400.1362 c
339.124 403.6475 344.9209 400.6641 349.0186 394.1553 c
353.082 387.7954 342.668 389.7334 349.0635 377.2813 C
351.8799 378.6235 355.2266 380.3472 357.5938 383.1333 c
363.4033 389.9897 360.5088 377.4785 366.8936 378.4556 c
384.3828 381.1323 380.8555 366.0439 373.8965 369.2134 c
361.0361 375.0615 354.1084 372.3145 349.5771 371.3101 C
352.2148 370.1514 353.8594 369.186 353.6699 368.7817 c
353.3896 368.2012 348.5547 369.3247 342.8486 371.3296 c
337.1494 373.3579 332.751 375.4756 333.0342 376.0835 c
333.1211 376.2437 333.5205 376.2808 334.1914 376.2319 C
332.9971 377.1582 331.4209 378.7681 329.8584 380.7651 c
327.123 384.3213 330.8555 385.7104 331.3193 384.7842 c
335.8633 375.5615 327.3076 385.6265 330.5566 380.4253 c
332.3896 377.4746 335.1045 376.5093 335.9648 375.9097 C
336.9355 375.6929 338.1602 375.3643 339.5068 374.9717 C
338.1992 376.6362 336.9814 379.0298 335.9355 382.3125 c
f
0.109804 0.207843 0.176471 0 0.878431 0.784314 0.764706 Xa
105.501 354.5259 m
110.3647 364.2231 112.2563 365.7197 109.4131 368.6587 c
106.5693 371.5933 101.791 369.4067 97.7065 364.3599 c
93.6743 359.4321 101.7036 360.6396 94.9609 350.9404 C
93.0898 352.0991 90.8848 353.5762 89.5752 355.8662 c
86.374 361.5015 86.5073 351.4619 81.9326 352.439 c
69.3945 355.1255 69.5859 343.0132 75.2539 345.313 c
85.73 349.5547 90.4233 347.1494 93.6201 346.2061 C
91.4814 345.3677 90.1055 344.6543 90.1821 344.3281 c
90.2944 343.8574 94.0605 344.5957 98.6108 346.0103 c
103.1626 347.439 106.7627 348.9863 106.6528 349.4785 c
106.6108 349.6094 106.3223 349.6504 105.8169 349.6309 C
106.8521 350.3306 108.2822 351.5615 109.7603 353.1011 c
112.3604 355.8408 109.812 357.0679 109.3237 356.3447 c
104.4722 349.1504 112.4287 356.8882 109.1885 352.8511 c
107.355 350.563 105.1851 349.8833 104.4517 349.4336 C
103.6968 349.291 102.7368 349.0684 101.6724 348.7988 C
102.9131 350.0825 104.1997 351.9463 105.501 354.5259 c
f
u
1 Ap
0.396078 0.658823 0.596078 0.231373 0.521569 0.341176 0.321569 Xa
204.085 418.7339 m
204.1743 423.4214 209.3081 427.292 y
206.9243 423.7944 212.5859 419.1597 v
217.1899 415.3828 209.0068 410.2988 y
204.0059 414.0405 204.085 418.7339 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
234.3213 418.3198 m
238.4453 421.6006 238.2456 426.231 y
236.8408 422.9019 228.6616 421.874 v
222.0103 421.0396 223.3262 414.3901 y
230.1953 415.0527 234.3213 418.3198 v
f
0.352941 0.952941 0.956863 0.560784 0.372549 0.039216 0 Xa
224.3525 413.3608 m
227.7119 419.5996 223.6563 426.1782 y
224.2969 420.8657 213.2344 416.3228 v
204.2158 412.6162 211.5093 403.5811 y
220.9917 407.1196 224.3525 413.3608 v
f
0.066667 0.105882 0.078431 0 0.921569 0.878431 0.87451 Xa
223.2739 399.0283 m
229.5449 398.7393 235.0781 401.6489 y
230.2412 400.416 224.4712 404.2651 v
219.7739 407.4033 212.4136 402.6865 y
217.0112 399.3042 223.2739 399.0283 v
f
U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
