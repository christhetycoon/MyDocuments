%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.2
%%For: (Micheal) ()
%%Title: (Wide-Ruled Notebook Paper Curl.eps)
%%CreationDate: 1/28/2008 7:01 PM
%%BoundingBox: 23 24 889 1155
%%HiResBoundingBox: 23.5684 24.8291 888.7725 1154.3398
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_Cropmarks: 0 0 900 1200
%AI3_TemplateBox: 450 600 450 600
%AI3_TileBox: 58.7998 312 810 887.8799
%AI3_DocumentPreview: Header
%AI5_ArtSize: 14400 14400
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 4
%AI8_OpenToView: -1617.5 2751.5 0.25 937 829 18 0 0 213 117 0 0
%AI5_OpenViewLayers: 7777
%%PageOrigin:-16.3003 33.7012
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade true put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
5 Bn
%AI5_BeginGradient: (Unnamed gradient 58)
(Unnamed gradient 58) 0 3 Bd
[
<
00000000000000000000010101020303040505050607070809090A0B0C
>
<
0000000000000000000000000001020202030303040404050606070809
>
<
0000000000000000000000000001020202030303040404050606070809
>
0
<
FFFFFFFFFFFEFEFEFDFDFCFCFCFBFAFAF9F8F8F7F6F5F5F4F3F2F1F0EF
>
<
FFFFFFFFFFFEFEFEFDFDFCFCFCFBFAFAF9F8F8F7F6F5F5F4F3F2F1F0EF
>
<
FFFFFFFFFFFEFEFEFDFDFCFCFCFBFAFAF9F8F8F7F6F5F5F4F3F2F1F0EF
>
4 %_Br
<
2827262524232121201F1E1D1C1B1A19171615141313131211100E0D0C0B0B0A0909080707060505
050403030201010000000000
>
<
1D1D1C1B1A19181817161514131212111111100F0E0D0C0B0B0A0B0A090807060706050404040303
020202010100000000000000
>
<
1E1D1C1B1A1A1918171615161514131311100F0E0E0D0E0D0C0B0909090807070506050404030303
020202010100000000000000
>
0
<
D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E8E9EAEBECEDEEEFF0F0F1F2F3F4F5F5F6F7F8
F8F9FAFAFBFCFCFDFEFEFFFF
>
<
D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E4E5E6E7E8E9EAEBECEDEDEEEFF0F1F2F2F3F4F5F6F6F7F8
F9F9FAFBFBFCFDFDFEFEFFFF
>
<
D6D7D8D9DADBDCDDDEDFE0E0E1E2E3E4E5E6E7E8E9EAEAEBECEDEEEFEFF0F1F2F3F3F4F5F6F7F7F8
F9F9FAFBFBFCFDFDFEFEFFFF
>
4 %_Br
[
0.047059 0.035294 0.035294 0 0.937255 0.937255 0.937255 2 50 100 %_BS
%_0.047059 0.035294 0.035294 0 0.937255 0.937255 0.937255 2 50 100 Bs
0 0 0 0 1 1 1 2 68.0412 55.4945 %_BS
%_0 0 0 0 1 1 1 2 68.0412 55.4945 Bs
0.156863 0.113725 0.117647 0 0.831373 0.835294 0.839216 2 43.4066 0 %_BS
%_0.156863 0.113725 0.117647 0 0.831373 0.835294 0.839216 2 43.4066 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 64)
(Unnamed gradient 64) 0 3 Bd
[
<
0505050505050606060707080808090909090A0A0B0B0C0C0D0D0F10101111121213141415161617
171819191A1B1B1C1C1C1D1E1E1F20202123242425262627292A2A2B2C2D2D2E2F30303133343535
36373838393B3C3D3D3E3F404143434445464748484A4B4C4D4E4F4F5052535455565657595A5B5D
5E606161626364656768696A6B6C6C6D6E6F70707172737475767778797A7B7B7C7D7E7F80818282
8384848586878889898A8B8C8D8E8F8F
>
<
0303030303030404040404050505060606060707080809090A0A0A0B0B0C0C0D0D0D0E0E0F101010
101112121314141415151617171819191A1B1B1B1C1D1D1E1F202020212222232425252627282929
2A2B2C2C2D2E2F30303132333435353536373839393A3B3C3D3E3F3F404142434445454647484A4B
4C4D4E4E4F50515353545556575858595A5B5B5C5D5E5F6061616263646566666768696A6A6B6C6C
6D6E6F6F70717273747576777778797A
>
<
0303030303030404040404050505060606060707080809090A0A0B0B0B0C0C0D0D0E0F0F10111112
12121313141515161717171818191A1A1B1C1C1C1D1E1E1F20212121222323242526262829292A2A
2B2C2D2D2E2F303131323334353636373838393A3A3B3C3D3E3F40404142434445464647484A4B4C
4E4F505051525354555556575859595A5B5C5D5D5E5F606162636464656667676768696A6A6B6C6C
6D6E6F6F707172727374757576777878
>
<
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000010101010101020202020203030303040405050606070708090A0A0A0B0C0D0E0F101011
12131415161718191A1B1C1D1E202122
>
<
F8F8F8F7F7F7F6F6F6F5F5F4F4F4F3F3F2F2F1F1F0F0EFEFEEEEEDECECEBEBEAEAE9E8E8E7E6E6E5
E5E4E3E3E2E1E1E0DFDFDEDDDDDCDBDBDAD9D8D8D7D6D6D5D4D3D3D2D1D0D0CFCECDCDCCCBCAC9C9
C8C7C6C6C5C4C3C2C2C1C0BFBEBDBDBCBBBAB9B8B8B7B6B5B4B3B2B2B1B0AFAEADACACABAAA9A8A7
A6A5A4A4A3A2A1A09F9E9D9C9B9A9A999897969594939291908F8E8D8C8B8A8A8988878685848382
81807F7E7D7C7B7A7978777675747372
>
<
F8F8F8F7F7F7F6F6F6F5F5F4F4F4F3F3F2F2F1F1F0F0EFEFEEEEEDECECEBEBEAEAE9E8E8E7E6E6E5
E5E4E3E3E2E1E1E0DFDFDEDDDDDCDBDBDAD9D8D8D7D6D6D5D4D3D3D2D1D0D0CFCECDCDCCCBCAC9C9
C8C7C6C6C5C4C3C2C2C1C0BFBEBDBDBCBBBAB9B8B8B7B6B5B4B3B2B2B1B0AFAEADACACABAAA9A8A7
A6A5A4A4A3A2A1A09F9E9D9C9B9A9A999897969594939291908F8E8D8C8B8A8A8988878685848382
81807F7E7D7C7B7A7978777675747372
>
<
F8F8F8F7F7F7F6F6F6F5F5F4F4F4F3F3F2F2F1F1F0F0EFEFEEEEEDECECEBEBEAEAE9E8E8E7E6E6E5
E5E4E3E3E2E1E1E0DFDFDEDDDDDCDBDBDAD9D8D8D7D6D6D5D4D3D3D2D1D0D0CFCECDCDCCCBCAC9C9
C8C7C6C6C5C4C3C2C2C1C0BFBEBDBDBCBBBAB9B8B8B7B6B5B4B3B2B2B1B0AFAEADACACABAAA9A8A7
A6A5A4A4A3A2A1A09F9E9D9C9B9A9A999897969594939291908F8E8D8C8B8A8A8988878685848382
81807F7E7D7C7B7A7978777675747372
>
4 %_Br
<
1211100F0E0C0C0B0A0909080706060505
>
<
0F0F0E0D0C0B0A09080807060605040303
>
<
0F0E0D0C0B0A0909080706060504040303
>
0
<
EAEBECEDEEEFEFF0F1F2F3F4F5F6F6F7F8
>
<
E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8
>
<
E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8
>
4 %_Br
[
0.560784 0.478431 0.470588 0.133333 0.447059 0.447059 0.447059 2 50 100 %_BS
%_0.560784 0.478431 0.470588 0.133333 0.447059 0.447059 0.447059 2 50 100 Bs
0.019608 0.011765 0.011765 0 0.972549 0.972549 0.972549 2 58.8889 51.0989 %_BS
%_0.019608 0.011765 0.011765 0 0.972549 0.972549 0.972549 2 58.8889 51.0989 Bs
0.070588 0.058824 0.058824 0 0.917647 0.909804 0.909804 2 48.3871 0 %_BS
%_0.070588 0.058824 0.058824 0 0.917647 0.909804 0.909804 2 48.3871 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 66)
(Unnamed gradient 66) 0 3 Bd
[
<
6B6A6867646362605E5D5A595756545352504F4D4C4B4A48474645444341403F3E3D3C3B39383737
363534333331302F2E2E2D2C2C2B2A2A292727262525242423212120201F1F1E1E1D1D1C1C1C1C1C
1B1B1A1A1A1919191818181717171616161515151514141414131313131212121212111111111111
101010101010100F0F0F0F0F0F0F0F0F0F0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C
0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C
>
<
5756545351504F4D4C4B48474645434241403F3D3C3B3A39383736353534333231302F2E2D2C2B2B
2A2928272726252423232221212020201F1E1E1D1C1C1B1B1B1A1A19191818171716161515151414
14141313131212121111111010101010100F0F0F0F0E0E0E0E0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C
0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909
0909090909090909090909090909090909090909090909090909090909090909090909090909
>
<
585755555352514F4E4C4A48474644434241403E3D3C3B3A39383837363534333231302F2E2D2C2C
2B2A2929292826252424232222212121201F1F1E1D1D1C1C1C1B1B1A1A1919181817171717171616
1515141414131313121212121212111111101010100F0F0F0F0E0E0E0E0D0D0D0D0D0C0C0C0C0C0C
0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A090909090909
0909090909090909090909090909090909090909090909090909090909090909090909090909
>
<
02020101010101000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000
>
<
9B9C9E9FA1A2A3A5A6A7A9AAABACAEAFB0B1B2B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C7
C8C9CACBCBCCCDCECFCFD0D1D1D2D3D3D4D5D5D6D7D7D8D8D9DADADBDBDCDCDDDDDEDEDFDFDFE0E0
E1E1E2E2E2E3E3E3E4E4E4E5E5E5E6E6E6E7E7E7E7E8E8E8E8E9E9E9E9EAEAEAEAEAEBEBEBEBEBEB
ECECECECECECECEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEF
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
9B9C9E9FA1A2A3A5A6A7A9AAABACAEAFB0B1B2B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C7
C8C9CACBCBCCCDCECFCFD0D1D1D2D3D3D4D5D5D6D7D7D8D8D9DADADBDBDCDCDDDDDEDEDFDFDFE0E0
E1E1E2E2E2E3E3E3E4E4E4E5E5E5E6E6E6E7E7E7E7E8E8E8E8E9E9E9E9EAEAEAEAEAEBEBEBEBEBEB
ECECECECECECECEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEF
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
<
9B9C9E9FA1A2A3A5A6A7A9AAABACAEAFB0B1B2B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C7
C8C9CACBCBCCCDCECFCFD0D1D1D2D3D3D4D5D5D6D7D7D8D8D9DADADBDBDCDCDDDDDEDEDFDFDFE0E0
E1E1E2E2E2E3E3E3E4E4E4E5E5E5E6E6E6E7E7E7E7E8E8E8E8E9E9E9E9EAEAEAEAEAEBEBEBEBEBEB
ECECECECECECECEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEFEFEFEFEFEF
EFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEFEF
>
4 %_Br
0.419608
0.341176
0.345098
0.007843
0.607843
0.607843
0.607843
4 %_Br
[
0.047059 0.035294 0.035294 0 0.937255 0.937255 0.937255 2 50 100 %_BS
%_0.047059 0.035294 0.035294 0 0.937255 0.937255 0.937255 2 50 100 Bs
0.419608 0.341176 0.345098 0.007843 0.607843 0.607843 0.607843 2 18.4211 79.1209 %_BS
%_0.419608 0.341176 0.345098 0.007843 0.607843 0.607843 0.607843 2 18.4211 79.1209 Bs
0.419608 0.341176 0.345098 0.007843 0.607843 0.607843 0.607843 2 85.906 0 %_BS
%_0.419608 0.341176 0.345098 0.007843 0.607843 0.607843 0.607843 2 85.906 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 82)
(Unnamed gradient 82) 0 2 Bd
[
<
FFFFFFFFFFFFFFFFFFFFFFFEFFFEFEFDFEFDFDFCFDFCFCFBFAFBFAFAF9FAF9F8F8F7F7F6F6F6F5F5
F4F5F4F3F3F2F1F1F1F1F0EFEFEEEDEDEDEDECEBEBEBEAEAE9E8E8E7E6E6E6E5E5E4E3E3E2E1E1E0
DFDFDEDEDDDDDBDBDAD9D9D8D7D7D6D5D4D4D4D3D3D2D1D1D0CFCECECDCCCCCBCACAC9C8C7C7C6C5
C5C4C3C2C2C1C0BFBFBE
>
<
C8C8C7C7C8C7C7C5C5C4C5C2C3C2C3C0C1C0C0BEBFBDBDBCBABBBABAB8B9B7B6B6B4B5B3B4B2B0B1
AFB0AEABACAAA9A9A8A8A6A4A4A3A1A2A0A09E9C9D9B9999979596949292908E8F8D8B8B89878785
83848280807E7C7D7B7979777575737270706E6D6D6B696A68666464636162605F5F5E5C5B5B5A58
59575654555452515150
>
<
50504F4F4E4D4D4D4D4C4B4B4A494849474646454443434242403F3F3E3D3C3B3B3B393837373635
3432313331302F2E2D2B2C2C2A292826252325242221201E1D1C1B1C1B1919181615151312121011
110F0E0E0C0B0B090908060605040303020102010000000000000000000000000000000000000000
00000000000000000000
>
<
2A2A2929272626252524222321201F1F1E1D1D1C1A19191817161515141312121211100F0E0E0D0D
0C0B0A0B0A0909080706070605050504030303030303020202020202020101010101010100000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000
>
<
0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010
10101010101111111111111111111111121212121212121212121313131313131313131314141414
14141414141415151515151515151515161616161616161616161717171717171717171818181818
18181818181919191919
>
<
4343444444454546464747484849494A4A4B4B4C4C4D4D4E4F4F5050515152535354545555565757
5858595A5A5B5C5C5D5D5E5F5F6061616262636464656666676868696A6A6B6C6C6D6E6E6F707071
7272737474757676777878797A7A7B7C7D7D7E7F7F80818182838484858686878888898A8B8B8C8D
8D8E8F90909192939394
>
<
707071717273737474757676777879797A7B7B7C7D7E7E7F8081828283848586868788898A8A8B8C
8D8E8F8F90919293949595969798999A9B9C9C9D9E9FA0A1A2A3A4A4A5A6A7A8A9AAABACADAEAFAF
B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6
D7D8D9DADBDCDDDEDFE0
>
4 %_Br
[
0.745098 0.313725 0 0 0.098039 0.580392 0.878431 2 43.4066 100 %_BS
%_0.745098 0.313725 0 0 0.098039 0.580392 0.878431 2 43.4066 100 Bs
1 0.784314 0.313725 0.164706 0.05098 0.262745 0.439216 2 54.9451 0 %_BS
%_1 0.784314 0.313725 0.164706 0.05098 0.262745 0.439216 2 54.9451 0 Bs
BD
%AI5_EndGradient
%AI5_BeginGradient: (Unnamed gradient 85)
(Unnamed gradient 85) 0 2 Bd
[
<
000000000000000000000000000000000000000000000000000000010202030405060608090A0A0A
0B0D0E0F0F10111213131314151718191A1A1B1B1C1D1E1F2020212223232425262627282829292A
2A2B2C2C2C2D2E2E2F3031313233333434343535363637373839393A3B3B3C3C3C3D3D3D3E3E3E3E
3E3F3F3F4040414142424343444445454546464647474748484949494A4A4B4B
>
<
FDFDFEFEFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>
<
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFD
>
<
00000000000000000000000000000000000000000000000000000000000000000101010101010101
0202020202030303030404040405050506060607070808090A0A0A0B0B0C0D0E0F0F0F1011121314
151617171718191A1B1C1D1E1F202122232324252627292A2B2C2D2E2F313233343536373839393B
3C3D3E4041424344464748494B4C4D4E50515254555658595A5C5D5F60616364
>
<
FFFFFEFEFDFCFCFBFBFAF9F9F8F7F7F6F5F5F4F3F2F2F1F0EFEFEEEDECECEBEAE9E8E8E7E6E5E4E4
E3E2E1E0E0DFDEDDDCDBDBDAD9D8D7D6D5D5D4D3D2D1D0CFCECECDCCCBCAC9C8C7C7C6C5C4C3C2C1
C0BFBEBDBDBCBBBAB9B8B7B6B5B4B3B2B1B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9D9C
9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C
>
<
00000000000000000000000000000101010101010101010101010101010101010101010102020202
02020202020202020202020202020202030303030303030303030303030303030303040404040404
04040404040404040404040405050505050505050505050505050505050506060606060606060606
0606060606060607070707070707070707070707070707080808080808080808
>
<
00000000000000000101010101010101010101020202020202020202020303030303030303030304
04040404040404040505050505050505050606060606060606060707070707070707070808080808
0808080909090909090909090A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0D0D0D0D
0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F101010101010101011111111
>
4 %_Br
[
0.294118 1 0.992157 0.392157 0.486275 0.031373 0.066667 2 43.4066 100 %_BS
%_0.294118 1 0.992157 0.392157 0.486275 0.031373 0.066667 2 43.4066 100 Bs
0 0.992157 1 0 1 0 0 2 54.9451 0 %_BS
%_0 0.992157 1 0 1 0 0 2 54.9451 0 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0 0 0 0 1 1 1 Xa
(White)
Pc
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
(Black)
Pc
0 0.992157 1 0 1 0 0 Xa
(RGB Red)
Pc
0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
0.560784 0.478431 0.470588 0.133333 0.447059 0.447059 0.447059 Xa
(R=114 G=114 B=114 1)
Pc
0.419608 0.341176 0.345098 0.007843 0.607843 0.607843 0.607843 Xa
(R=155 G=155 B=155 1)
Pc
0.156863 0.113725 0.117647 0 0.831373 0.835294 0.839216 Xa
(R=212 G=213 B=214 1)
Pc
0.807843 0.470588 0 0 0.035294 0.490196 0.835294 Xa
(Lines)
Pc
0.862745 0.482353 0.007843 0 0.031373 0.466667 0.737255 Xa
(R=8 G=119 B=188 1)
Pc
0.047059 0.035294 0.035294 0 0.937255 0.937255 0.937255 Xa
(R=239 G=239 B=239 1)
Pc
0.070588 0.058824 0.058824 0 0.917647 0.909804 0.909804 Xa
(R=234 G=232 B=232 1)
Pc
1 0.784314 0.313725 0.164706 0.05098 0.262745 0.439216 Xa
(R=13 G=67 B=112 1)
Pc
0.745098 0.313725 0 0 0.098039 0.580392 0.878431 Xa
(R=25 G=148 B=224 1)
Pc
0.294118 1 0.992157 0.392157 0.486275 0.031373 0.066667 Xa
(R=124 G=8 B=17 1)
Pc
0.745098 0.984314 0.007843 0.003922 0.4 0.176471 0.568627 Xa
(R=102 G=45 B=145)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(Shadow) Ln
0 A
%_u
%_*u
%_1 Ap
%_0 O
%_1 g
%_0 J 0 j 1 w 4 M []0 d%_0 XR
%_888.7725 77.6641 m
%_888.7725 35.3564 844.1016 24.8291 828.6943 24.8291 C
%_86.4028 24.8291 L
%_42.1724 24.8291 24.1797 37.0762 24.1797 52.1787 C
%_24.1797 1126.9897 L
%_24.1797 1142.0942 36.6694 1154.3398 52.0767 1154.3398 C
%_842.1543 1154.3398 L
%_874.8467 1154.3398 888.7725 1137.2539 888.7725 1091.1016 C
%_888.7725 77.6641 L
%_f
%_*U
%_/ShapeBlendPathType (K) XT
%_/ShapeBlendPathID (B) XT
%_*u
%_0.298039 0.235294 0.239216 0 0.709804 0.709804 0.709804 Xa
%_860.8057 87.3672 m
%_860.8057 73.0088 848.9297 61.3672 834.2842 61.3672 C
%_65.4194 61.3672 L
%_50.7734 61.3672 38.8994 73.0088 38.8994 87.3672 C
%_38.8994 1109.1113 L
%_38.8994 1123.4688 50.7734 1135.1108 65.4194 1135.1108 C
%_834.2842 1135.1108 L
%_848.9297 1135.1108 860.8057 1123.4688 860.8057 1109.1113 C
%_860.8057 87.3672 L
%_f
%_*U
%_/ShapeBlendPathType (K) XT
%_/ShapeBlendPathID (A) XT
%_U
0 Ap
0 A
u
*u
1 Ap
0 O
1 g
0 J 0 j 1 w 4 M []0 d0 XR
888.7725 77.6641 m
888.7725 35.3564 844.1016 24.8291 828.6943 24.8291 C
86.4028 24.8291 L
42.1724 24.8291 24.1797 37.0762 24.1797 52.1787 C
24.1797 1126.9897 L
24.1797 1142.0942 36.6694 1154.3398 52.0767 1154.3398 C
842.1543 1154.3398 L
874.8467 1154.3398 888.7725 1137.2539 888.7725 1091.1016 C
888.7725 77.6641 L
f
*U
/ShapeBlendPathType (K) XT
/ShapeBlendPathID (B) XT
*u
0 Ap
0 0 0 0 0.996078 0.996078 0.996078 Xa
888.3994 77.793 m
888.3994 35.8584 844.166 25.3164 828.7686 25.3164 C
86.123 25.3164 L
42.2871 25.3164 24.376 37.5557 24.376 52.6475 C
24.376 1126.7515 L
24.376 1141.8457 36.8574 1154.0835 52.2544 1154.0835 C
842.0498 1154.0835 L
874.501 1154.0835 888.3994 1137.0703 888.3994 1091.3418 C
888.3994 77.793 L
f
*U
*u
0 0 0 0 0.992157 0.992157 0.992157 Xa
888.0264 77.9229 m
888.0264 36.3604 844.2305 25.8037 828.8438 25.8037 C
85.8433 25.8037 L
42.4019 25.8037 24.5723 38.0342 24.5723 53.1172 C
24.5723 1126.5132 L
24.5723 1141.5977 37.0454 1153.8271 52.4326 1153.8271 C
841.9443 1153.8271 L
874.1553 1153.8271 888.0264 1136.8862 888.0264 1091.582 C
888.0264 77.9229 L
f
*U
*u
0.003922 0 0 0 0.988235 0.988235 0.988235 Xa
887.6533 78.0518 m
887.6533 36.8623 844.2949 26.291 828.918 26.291 C
85.5635 26.291 L
42.5166 26.291 24.7686 38.5137 24.7686 53.5859 C
24.7686 1126.2744 L
24.7686 1141.3491 37.2334 1153.5708 52.6104 1153.5708 C
841.8398 1153.5708 L
873.8096 1153.5708 887.6533 1136.7026 887.6533 1091.8218 C
887.6533 78.0518 L
f
*U
*u
0.007843 0.003922 0.003922 0 0.984314 0.984314 0.984314 Xa
887.2813 78.1816 m
887.2813 37.3643 844.3594 26.7773 828.9922 26.7773 C
85.2837 26.7773 L
42.6309 26.7773 24.9648 38.9922 24.9648 54.0557 C
24.9648 1126.0361 L
24.9648 1141.1011 37.4219 1153.3145 52.7881 1153.3145 C
841.7344 1153.3145 L
873.4648 1153.3145 887.2813 1136.5186 887.2813 1092.062 C
887.2813 78.1816 L
f
*U
*u
0.011765 0.007843 0.007843 0 0.980392 0.980392 0.980392 Xa
886.9082 78.3105 m
886.9082 37.8662 844.4238 27.2646 829.0674 27.2646 C
85.0039 27.2646 L
42.7456 27.2646 25.1611 39.4717 25.1611 54.5244 C
25.1611 1125.7979 L
25.1611 1140.8525 37.6099 1153.0581 52.9663 1153.0581 C
841.6299 1153.0581 L
873.1191 1153.0581 886.9082 1136.335 886.9082 1092.3022 C
886.9082 78.3105 L
f
*U
*u
0.015686 0.007843 0.007843 0 0.976471 0.976471 0.976471 Xa
886.5352 78.4404 m
886.5352 38.3691 844.4883 27.752 829.1416 27.752 C
84.7241 27.752 L
42.8604 27.752 25.3574 39.9512 25.3574 54.9941 C
25.3574 1125.5596 L
25.3574 1140.604 37.7979 1152.8013 53.144 1152.8013 C
841.5244 1152.8013 L
872.7734 1152.8013 886.5352 1136.1509 886.5352 1092.5425 C
886.5352 78.4404 L
f
*U
*u
0.019608 0.011765 0.011765 0 0.972549 0.972549 0.972549 Xa
886.1621 78.5693 m
886.1621 38.8711 844.5518 28.2393 829.2158 28.2393 C
84.4443 28.2393 L
42.9751 28.2393 25.5537 40.4297 25.5537 55.4629 C
25.5537 1125.3213 L
25.5537 1140.356 37.9858 1152.5449 53.3218 1152.5449 C
841.4199 1152.5449 L
872.4277 1152.5449 886.1621 1135.9673 886.1621 1092.7827 C
886.1621 78.5693 L
f
*U
*u
0.019608 0.011765 0.011765 0 0.968627 0.968627 0.968627 Xa
885.7891 78.6992 m
885.7891 39.373 844.6162 28.7266 829.291 28.7266 C
84.1646 28.7266 L
43.0898 28.7266 25.75 40.9092 25.75 55.9326 C
25.75 1125.0825 L
25.75 1140.1074 38.1738 1152.2886 53.5 1152.2886 C
841.3145 1152.2886 L
872.082 1152.2886 885.7891 1135.7837 885.7891 1093.0225 C
885.7891 78.6992 L
f
*U
*u
0.023529 0.015686 0.015686 0 0.964706 0.964706 0.964706 Xa
885.416 78.8281 m
885.416 39.875 844.6807 29.2139 829.3652 29.2139 C
83.8848 29.2139 L
43.2046 29.2139 25.9463 41.3877 25.9463 56.4014 C
25.9463 1124.8442 L
25.9463 1139.8594 38.3618 1152.0322 53.6777 1152.0322 C
841.21 1152.0322 L
871.7363 1152.0322 885.416 1135.5996 885.416 1093.2627 C
885.416 78.8281 L
f
*U
*u
0.027451 0.015686 0.015686 0 0.960784 0.960784 0.960784 Xa
885.0439 78.958 m
885.0439 40.377 844.7451 29.7012 829.4395 29.7012 C
83.605 29.7012 L
43.3193 29.7012 26.1421 41.8672 26.1421 56.8701 C
26.1421 1124.606 L
26.1421 1139.6108 38.5498 1151.7759 53.8555 1151.7759 C
841.1045 1151.7759 L
871.3906 1151.7759 885.0439 1135.416 885.0439 1093.5029 C
885.0439 78.958 L
f
*U
*u
0.031373 0.019608 0.019608 0 0.956863 0.956863 0.956863 Xa
884.6709 79.0869 m
884.6709 40.8789 844.8096 30.1885 829.5146 30.1885 C
83.3252 30.1885 L
43.4341 30.1885 26.3384 42.3467 26.3384 57.3398 C
26.3384 1124.3677 L
26.3384 1139.3623 38.7378 1151.5195 54.0337 1151.5195 C
841 1151.5195 L
871.0459 1151.5195 884.6709 1135.2319 884.6709 1093.7432 C
884.6709 79.0869 L
f
*U
*u
0.035294 0.023529 0.023529 0 0.952941 0.952941 0.952941 Xa
884.2979 79.2168 m
884.2979 41.3809 844.874 30.6748 829.5889 30.6748 C
83.0454 30.6748 L
43.5483 30.6748 26.5347 42.8252 26.5347 57.8086 C
26.5347 1124.1294 L
26.5347 1139.1143 38.9263 1151.2632 54.2114 1151.2632 C
840.8955 1151.2632 L
870.7002 1151.2632 884.2979 1135.0483 884.2979 1093.9829 C
884.2979 79.2168 L
f
*U
*u
0.035294 0.023529 0.023529 0 0.94902 0.94902 0.94902 Xa
883.9248 79.3457 m
883.9248 41.8828 844.9385 31.1621 829.6631 31.1621 C
82.7656 31.1621 L
43.6631 31.1621 26.731 43.3047 26.731 58.2783 C
26.731 1123.8906 L
26.731 1138.8657 39.1143 1151.0068 54.3896 1151.0068 C
840.79 1151.0068 L
870.3545 1151.0068 883.9248 1134.8643 883.9248 1094.2231 C
883.9248 79.3457 L
f
*U
*u
0.039216 0.027451 0.027451 0 0.945098 0.945098 0.945098 Xa
883.5518 79.4756 m
883.5518 42.3848 845.0029 31.6494 829.7373 31.6494 C
82.4858 31.6494 L
43.7778 31.6494 26.9272 43.7832 26.9272 58.7471 C
26.9272 1123.6523 L
26.9272 1138.6177 39.3022 1150.7505 54.5674 1150.7505 C
840.6855 1150.7505 L
870.0088 1150.7505 883.5518 1134.6807 883.5518 1094.4634 C
883.5518 79.4756 L
f
*U
*u
0.043137 0.031373 0.031373 0 0.941176 0.941176 0.941176 Xa
883.1787 79.6045 m
883.1787 42.8867 845.0674 32.1367 829.8125 32.1367 C
82.2061 32.1367 L
43.8926 32.1367 27.1235 44.2627 27.1235 59.2168 C
27.1235 1123.4141 L
27.1235 1138.3691 39.4902 1150.4941 54.7451 1150.4941 C
840.5801 1150.4941 L
869.6631 1150.4941 883.1787 1134.4971 883.1787 1094.7036 C
883.1787 79.6045 L
f
*U
*u
0.047059 0.035294 0.035294 0 0.937255 0.937255 0.937255 Xa
882.8066 79.7344 m
882.8066 43.3887 845.1318 32.624 829.8867 32.624 C
81.9263 32.624 L
44.0073 32.624 27.3198 44.7422 27.3198 59.6855 C
27.3198 1123.1758 L
27.3198 1138.1206 39.6782 1150.2378 54.9233 1150.2378 C
840.4756 1150.2378 L
869.3174 1150.2378 882.8066 1134.313 882.8066 1094.9438 C
882.8066 79.7344 L
f
*U
*u
0.05098 0.039216 0.039216 0 0.933333 0.933333 0.933333 Xa
882.4336 79.8633 m
882.4336 43.8906 845.1963 33.1113 829.9609 33.1113 C
81.6465 33.1113 L
44.1221 33.1113 27.5161 45.2207 27.5161 60.1553 C
27.5161 1122.9375 L
27.5161 1137.8726 39.8662 1149.9814 55.1011 1149.9814 C
840.3701 1149.9814 L
868.9717 1149.9814 882.4336 1134.1294 882.4336 1095.1836 C
882.4336 79.8633 L
f
*U
*u
0.058824 0.039216 0.043137 0 0.929412 0.929412 0.929412 Xa
882.0605 79.9932 m
882.0605 44.3926 845.2607 33.5986 830.0361 33.5986 C
81.3667 33.5986 L
44.2368 33.5986 27.7124 45.7002 27.7124 60.624 C
27.7124 1122.6987 L
27.7124 1137.624 40.0542 1149.7251 55.2788 1149.7251 C
840.2656 1149.7251 L
868.627 1149.7251 882.0605 1133.9453 882.0605 1095.4238 C
882.0605 79.9932 L
f
*U
*u
0.062745 0.043137 0.043137 0 0.92549 0.92549 0.92549 Xa
881.6875 80.1221 m
881.6875 44.8955 845.3242 34.085 830.1104 34.085 C
81.0869 34.085 L
44.3511 34.085 27.9087 46.1787 27.9087 61.0928 C
27.9087 1122.4604 L
27.9087 1137.376 40.2427 1149.4683 55.457 1149.4683 C
840.1602 1149.4683 L
868.2813 1149.4683 881.6875 1133.7617 881.6875 1095.6641 C
881.6875 80.1221 L
f
*U
*u
0.066667 0.047059 0.047059 0 0.921569 0.921569 0.921569 Xa
881.3145 80.252 m
881.3145 45.3975 845.3887 34.5723 830.1846 34.5723 C
80.8071 34.5723 L
44.4658 34.5723 28.105 46.6582 28.105 61.5625 C
28.105 1122.2222 L
28.105 1137.1274 40.4307 1149.2119 55.6348 1149.2119 C
840.0557 1149.2119 L
867.9355 1149.2119 881.3145 1133.5776 881.3145 1095.9043 C
881.3145 80.252 L
f
*U
*u
0.070588 0.05098 0.05098 0 0.917647 0.917647 0.917647 Xa
880.9414 80.3809 m
880.9414 45.8994 845.4531 35.0596 830.2598 35.0596 C
80.5273 35.0596 L
44.5806 35.0596 28.3013 47.1377 28.3013 62.0313 C
28.3013 1121.9839 L
28.3013 1136.8789 40.6187 1148.9556 55.8125 1148.9556 C
839.9502 1148.9556 L
867.5898 1148.9556 880.9414 1133.394 880.9414 1096.1445 C
880.9414 80.3809 L
f
*U
*u
0.07451 0.05098 0.054902 0 0.913725 0.913725 0.913725 Xa
880.5693 80.5107 m
880.5693 46.4014 845.5176 35.5469 830.334 35.5469 C
80.2476 35.5469 L
44.6953 35.5469 28.4976 47.6162 28.4976 62.501 C
28.4976 1121.7456 L
28.4976 1136.6309 40.8066 1148.6992 55.9907 1148.6992 C
839.8457 1148.6992 L
867.2441 1148.6992 880.5693 1133.2104 880.5693 1096.3843 C
880.5693 80.5107 L
f
*U
*u
0.078431 0.054902 0.058824 0 0.909804 0.909804 0.909804 Xa
880.1963 80.6396 m
880.1963 46.9033 845.582 36.0342 830.4082 36.0342 C
79.9678 36.0342 L
44.8101 36.0342 28.6938 48.0957 28.6938 62.9697 C
28.6938 1121.5068 L
28.6938 1136.3823 40.9946 1148.4429 56.1685 1148.4429 C
839.7412 1148.4429 L
866.8984 1148.4429 880.1963 1133.0264 880.1963 1096.6245 C
880.1963 80.6396 L
f
*U
*u
0.082353 0.058824 0.062745 0 0.905882 0.905882 0.905882 Xa
879.8232 80.7695 m
879.8232 47.4053 845.6465 36.5215 830.4834 36.5215 C
79.688 36.5215 L
44.9248 36.5215 28.8901 48.5742 28.8901 63.4395 C
28.8901 1121.2686 L
28.8901 1136.1343 41.1826 1148.1865 56.3462 1148.1865 C
839.6357 1148.1865 L
866.5537 1148.1865 879.8232 1132.8428 879.8232 1096.8647 C
879.8232 80.7695 L
f
*U
*u
0.086275 0.062745 0.066667 0 0.901961 0.901961 0.901961 Xa
879.4502 80.8984 m
879.4502 47.9072 845.7109 37.0088 830.5576 37.0088 C
79.4082 37.0088 L
45.0396 37.0088 29.0864 49.0537 29.0864 63.9082 C
29.0864 1121.0303 L
29.0864 1135.8857 41.3706 1147.9302 56.5244 1147.9302 C
839.5313 1147.9302 L
866.208 1147.9302 879.4502 1132.6587 879.4502 1097.105 C
879.4502 80.8984 L
f
*U
*u
0.090196 0.062745 0.070588 0 0.898039 0.898039 0.898039 Xa
879.0771 81.0273 m
879.0771 48.4092 845.7754 37.4961 830.6318 37.4961 C
79.1284 37.4961 L
45.1543 37.4961 29.2827 49.5332 29.2827 64.377 C
29.2827 1120.792 L
29.2827 1135.6372 41.5586 1147.6738 56.7021 1147.6738 C
839.4258 1147.6738 L
865.8623 1147.6738 879.0771 1132.4751 879.0771 1097.3447 C
879.0771 81.0273 L
f
*U
*u
0.094118 0.066667 0.070588 0 0.894118 0.894118 0.894118 Xa
878.7041 81.1572 m
878.7041 48.9111 845.8398 37.9824 830.707 37.9824 C
78.8486 37.9824 L
45.2686 37.9824 29.479 50.0117 29.479 64.8467 C
29.479 1120.5537 L
29.479 1135.3892 41.7471 1147.4175 56.8799 1147.4175 C
839.3213 1147.4175 L
865.5166 1147.4175 878.7041 1132.291 878.7041 1097.585 C
878.7041 81.1572 L
f
*U
*u
0.098039 0.070588 0.07451 0 0.890196 0.890196 0.890196 Xa
878.3311 81.2861 m
878.3311 49.4131 845.9043 38.4697 830.7813 38.4697 C
78.5688 38.4697 L
45.3833 38.4697 29.6753 50.4912 29.6753 65.3154 C
29.6753 1120.3149 L
29.6753 1135.1406 41.9351 1147.1611 57.0581 1147.1611 C
839.2158 1147.1611 L
865.1709 1147.1611 878.3311 1132.1074 878.3311 1097.8252 C
878.3311 81.2861 L
f
*U
*u
0.101961 0.07451 0.078431 0 0.886275 0.886275 0.886275 Xa
877.959 81.416 m
877.959 49.915 845.9688 38.957 830.8555 38.957 C
78.2891 38.957 L
45.498 38.957 29.8711 50.9697 29.8711 65.7852 C
29.8711 1120.0767 L
29.8711 1134.8926 42.123 1146.9048 57.2358 1146.9048 C
839.1113 1146.9048 L
864.8252 1146.9048 877.959 1131.9238 877.959 1098.0654 C
877.959 81.416 L
f
*U
*u
0.105882 0.078431 0.082353 0 0.882353 0.882353 0.882353 Xa
877.5859 81.5449 m
877.5859 50.417 846.0332 39.4443 830.9307 39.4443 C
78.0093 39.4443 L
45.6128 39.4443 30.0674 51.4492 30.0674 66.2539 C
30.0674 1119.8384 L
30.0674 1134.644 42.311 1146.6484 57.4136 1146.6484 C
839.0059 1146.6484 L
864.4795 1146.6484 877.5859 1131.7397 877.5859 1098.3057 C
877.5859 81.5449 L
f
*U
*u
0.109804 0.078431 0.086275 0 0.878431 0.878431 0.878431 Xa
877.2129 81.6748 m
877.2129 50.9199 846.0977 39.9316 831.0049 39.9316 C
77.7295 39.9316 L
45.7275 39.9316 30.2637 51.9287 30.2637 66.7236 C
30.2637 1119.6001 L
30.2637 1134.3955 42.499 1146.3916 57.5918 1146.3916 C
838.9014 1146.3916 L
864.1348 1146.3916 877.2129 1131.5562 877.2129 1098.5454 C
877.2129 81.6748 L
f
*U
*u
0.109804 0.082353 0.090196 0 0.87451 0.87451 0.87451 Xa
876.8398 81.8037 m
876.8398 51.4219 846.1611 40.4189 831.0791 40.4189 C
77.4497 40.4189 L
45.8423 40.4189 30.46 52.4072 30.46 67.1924 C
30.46 1119.3618 L
30.46 1134.1475 42.687 1146.1353 57.7695 1146.1353 C
838.7959 1146.1353 L
863.7891 1146.1353 876.8398 1131.3721 876.8398 1098.7856 C
876.8398 81.8037 L
f
*U
*u
0.113725 0.086275 0.090196 0 0.870588 0.870588 0.870588 Xa
876.4668 81.9336 m
876.4668 51.9238 846.2256 40.9063 831.1543 40.9063 C
77.1699 40.9063 L
45.957 40.9063 30.6563 52.8867 30.6563 67.6621 C
30.6563 1119.123 L
30.6563 1133.8989 42.875 1145.8789 57.9473 1145.8789 C
838.6914 1145.8789 L
863.4434 1145.8789 876.4668 1131.1885 876.4668 1099.0259 C
876.4668 81.9336 L
f
*U
*u
0.117647 0.090196 0.094118 0 0.866667 0.866667 0.866667 Xa
876.0938 82.0625 m
876.0938 52.4258 846.29 41.3926 831.2285 41.3926 C
76.8901 41.3926 L
46.0713 41.3926 30.8525 53.3652 30.8525 68.1309 C
30.8525 1118.8848 L
30.8525 1133.6509 43.0635 1145.6226 58.1255 1145.6226 C
838.5869 1145.6226 L
863.0977 1145.6226 876.0938 1131.0044 876.0938 1099.2661 C
876.0938 82.0625 L
f
*U
*u
0.121569 0.094118 0.098039 0 0.862745 0.862745 0.862745 Xa
875.7217 82.1924 m
875.7217 52.9277 846.3545 41.8799 831.3027 41.8799 C
76.6104 41.8799 L
46.186 41.8799 31.0488 53.8447 31.0488 68.5996 C
31.0488 1118.6465 L
31.0488 1133.4023 43.2515 1145.3662 58.3032 1145.3662 C
838.4814 1145.3662 L
862.752 1145.3662 875.7217 1130.8208 875.7217 1099.5063 C
875.7217 82.1924 L
f
*U
*u
0.12549 0.098039 0.101961 0 0.858824 0.858824 0.858824 Xa
875.3486 82.3213 m
875.3486 53.4297 846.4189 42.3672 831.3779 42.3672 C
76.3306 42.3672 L
46.3008 42.3672 31.2451 54.3242 31.2451 69.0693 C
31.2451 1118.4082 L
31.2451 1133.1538 43.4395 1145.1099 58.481 1145.1099 C
838.377 1145.1099 L
862.4063 1145.1099 875.3486 1130.6372 875.3486 1099.7461 C
875.3486 82.3213 L
f
*U
*u
0.129412 0.101961 0.105882 0 0.854902 0.854902 0.854902 Xa
874.9756 82.4512 m
874.9756 53.9316 846.4834 42.8545 831.4521 42.8545 C
76.0508 42.8545 L
46.4155 42.8545 31.4414 54.8027 31.4414 69.5381 C
31.4414 1118.1699 L
31.4414 1132.9058 43.6274 1144.8535 58.6592 1144.8535 C
838.2715 1144.8535 L
862.0605 1144.8535 874.9756 1130.4531 874.9756 1099.9863 C
874.9756 82.4512 L
f
*U
*u
874.6025 82.5801 m
874.6025 54.4336 846.5479 43.3418 831.5264 43.3418 C
75.771 43.3418 L
46.5303 43.3418 31.6377 55.2822 31.6377 70.0078 C
31.6377 1117.9312 L
31.6377 1132.6572 43.8154 1144.5972 58.8369 1144.5972 C
838.167 1144.5972 L
861.7158 1144.5972 874.6025 1130.2695 874.6025 1100.2266 C
874.6025 82.5801 L
f
*U
*u
0.137255 0.105882 0.109804 0 0.85098 0.85098 0.85098 Xa
874.2295 82.71 m
874.2295 54.9355 846.6123 43.8291 831.6006 43.8291 C
75.4917 43.8291 L
46.645 43.8291 31.834 55.7607 31.834 70.4766 C
31.834 1117.6929 L
31.834 1132.4092 44.0034 1144.3408 59.0151 1144.3408 C
838.0615 1144.3408 L
861.3701 1144.3408 874.2295 1130.0854 874.2295 1100.4668 C
874.2295 82.71 L
f
*U
*u
0.141176 0.105882 0.109804 0 0.847059 0.847059 0.847059 Xa
873.8564 82.8389 m
873.8564 55.4375 846.6768 44.3164 831.6758 44.3164 C
75.2119 44.3164 L
46.7598 44.3164 32.0303 56.2402 32.0303 70.9463 C
32.0303 1117.4546 L
32.0303 1132.1606 44.1914 1144.0845 59.1929 1144.0845 C
837.957 1144.0845 L
861.0244 1144.0845 873.8564 1129.9019 873.8564 1100.7065 C
873.8564 82.8389 L
f
*U
*u
0.145098 0.109804 0.113725 0 0.843137 0.843137 0.843137 Xa
873.4844 82.9688 m
873.4844 55.9395 846.7412 44.8037 831.75 44.8037 C
74.9321 44.8037 L
46.8745 44.8037 32.2266 56.7197 32.2266 71.415 C
32.2266 1117.2163 L
32.2266 1131.9121 44.3794 1143.8281 59.3706 1143.8281 C
837.8516 1143.8281 L
860.6787 1143.8281 873.4844 1129.7178 873.4844 1100.9468 C
873.4844 82.9688 L
f
*U
*u
0.14902 0.113725 0.117647 0 0.839216 0.839216 0.839216 Xa
873.1113 83.0977 m
873.1113 56.4414 846.8057 45.29 831.8242 45.29 C
74.6523 45.29 L
46.9888 45.29 32.4229 57.1982 32.4229 71.8838 C
32.4229 1116.978 L
32.4229 1131.6641 44.5679 1143.5718 59.5488 1143.5718 C
837.7471 1143.5718 L
860.333 1143.5718 873.1113 1129.5342 873.1113 1101.187 C
873.1113 83.0977 L
f
*U
*u
0.152941 0.117647 0.121569 0 0.835294 0.835294 0.835294 Xa
872.7383 83.2275 m
872.7383 56.9434 846.8701 45.7773 831.8994 45.7773 C
74.3726 45.7773 L
47.1035 45.7773 32.6191 57.6777 32.6191 72.3535 C
32.6191 1116.7393 L
32.6191 1131.4155 44.7559 1143.3154 59.7266 1143.3154 C
837.6426 1143.3154 L
859.9873 1143.3154 872.7383 1129.3506 872.7383 1101.4272 C
872.7383 83.2275 L
f
*U
*u
0.160784 0.121569 0.12549 0 0.831373 0.831373 0.831373 Xa
872.3652 83.3564 m
872.3652 57.4463 846.9336 46.2646 831.9736 46.2646 C
74.0928 46.2646 L
47.2183 46.2646 32.8154 58.1563 32.8154 72.8223 C
32.8154 1116.501 L
32.8154 1131.1675 44.9438 1143.0586 59.9043 1143.0586 C
837.5371 1143.0586 L
859.6416 1143.0586 872.3652 1129.1665 872.3652 1101.6675 C
872.3652 83.3564 L
f
*U
*u
0.164706 0.12549 0.129412 0 0.827451 0.827451 0.827451 Xa
871.9922 83.4863 m
871.9922 57.9482 846.998 46.752 832.0479 46.752 C
73.813 46.752 L
47.333 46.752 33.0117 58.6357 33.0117 73.292 C
33.0117 1116.2627 L
33.0117 1130.9189 45.1318 1142.8022 60.0825 1142.8022 C
837.4326 1142.8022 L
859.2969 1142.8022 871.9922 1128.9829 871.9922 1101.9072 C
871.9922 83.4863 L
f
*U
*u
0.168627 0.12549 0.129412 0 0.823529 0.823529 0.823529 Xa
871.6191 83.6152 m
871.6191 58.4502 847.0625 47.2393 832.123 47.2393 C
73.5332 47.2393 L
47.4478 47.2393 33.208 59.1152 33.208 73.7607 C
33.208 1116.0244 L
33.208 1130.6704 45.3198 1142.5459 60.2603 1142.5459 C
837.3271 1142.5459 L
858.9512 1142.5459 871.6191 1128.7988 871.6191 1102.1475 C
871.6191 83.6152 L
f
*U
*u
0.172549 0.129412 0.133333 0 0.819608 0.819608 0.819608 Xa
871.2471 83.7451 m
871.2471 58.9521 847.127 47.7266 832.1973 47.7266 C
73.2534 47.7266 L
47.5625 47.7266 33.4043 59.5938 33.4043 74.2305 C
33.4043 1115.7861 L
33.4043 1130.4224 45.5078 1142.2896 60.438 1142.2896 C
837.2227 1142.2896 L
858.6055 1142.2896 871.2471 1128.6152 871.2471 1102.3877 C
871.2471 83.7451 L
f
*U
*u
0.176471 0.133333 0.137255 0 0.815686 0.815686 0.815686 Xa
870.874 83.874 m
870.874 59.4541 847.1914 48.2139 832.2715 48.2139 C
72.9736 48.2139 L
47.6772 48.2139 33.6001 60.0732 33.6001 74.6992 C
33.6001 1115.5474 L
33.6001 1130.1738 45.6958 1142.0332 60.6162 1142.0332 C
837.1172 1142.0332 L
858.2598 1142.0332 870.874 1128.4316 870.874 1102.6279 C
870.874 83.874 L
f
*U
*u
0.180392 0.137255 0.141176 0 0.811765 0.811765 0.811765 Xa
870.501 84.0039 m
870.501 59.9561 847.2559 48.7002 832.3467 48.7002 C
72.6938 48.7002 L
47.7915 48.7002 33.7964 60.5518 33.7964 75.1689 C
33.7964 1115.3091 L
33.7964 1129.9258 45.8843 1141.7769 60.7939 1141.7769 C
837.0127 1141.7769 L
857.9141 1141.7769 870.501 1128.2476 870.501 1102.8682 C
870.501 84.0039 L
f
*U
*u
0.184314 0.141176 0.145098 0 0.807843 0.807843 0.807843 Xa
870.1279 84.1328 m
870.1279 60.458 847.3203 49.1875 832.4209 49.1875 C
72.4141 49.1875 L
47.9063 49.1875 33.9927 61.0313 33.9927 75.6377 C
33.9927 1115.0708 L
33.9927 1129.6772 46.0723 1141.5205 60.9717 1141.5205 C
836.9072 1141.5205 L
857.5684 1141.5205 870.1279 1128.064 870.1279 1103.1079 C
870.1279 84.1328 L
f
*U
*u
0.188235 0.145098 0.14902 0 0.803922 0.803922 0.803922 Xa
869.7549 84.2617 m
869.7549 60.96 847.3848 49.6748 832.4951 49.6748 C
72.1343 49.6748 L
48.021 49.6748 34.189 61.5107 34.189 76.1064 C
34.189 1114.8325 L
34.189 1129.4287 46.2603 1141.2642 61.1499 1141.2642 C
836.8027 1141.2642 L
857.2227 1141.2642 869.7549 1127.8799 869.7549 1103.3481 C
869.7549 84.2617 L
f
*U
*u
0.192157 0.14902 0.156863 0 0.8 0.8 0.8 Xa
869.3818 84.3916 m
869.3818 61.4619 847.4492 50.1621 832.5703 50.1621 C
71.8545 50.1621 L
48.1357 50.1621 34.3853 61.9893 34.3853 76.5762 C
34.3853 1114.5942 L
34.3853 1129.1807 46.4482 1141.0078 61.3276 1141.0078 C
836.6973 1141.0078 L
856.8779 1141.0078 869.3818 1127.6963 869.3818 1103.5884 C
869.3818 84.3916 L
f
*U
*u
0.2 0.152941 0.160784 0 0.796078 0.796078 0.796078 Xa
869.0088 84.5205 m
869.0088 61.9639 847.5137 50.6494 832.6445 50.6494 C
71.5747 50.6494 L
48.2505 50.6494 34.5815 62.4688 34.5815 77.0449 C
34.5815 1114.3555 L
34.5815 1128.9321 46.6362 1140.7515 61.5054 1140.7515 C
836.5928 1140.7515 L
856.5322 1140.7515 869.0088 1127.5122 869.0088 1103.8286 C
869.0088 84.5205 L
f
*U
*u
0.203922 0.156863 0.160784 0 0.792157 0.792157 0.792157 Xa
868.6367 84.6504 m
868.6367 62.4658 847.5781 51.1367 832.7188 51.1367 C
71.2949 51.1367 L
48.3652 51.1367 34.7778 62.9473 34.7778 77.5146 C
34.7778 1114.1172 L
34.7778 1128.6841 46.8242 1140.4951 61.6836 1140.4951 C
836.4883 1140.4951 L
856.1865 1140.4951 868.6367 1127.3286 868.6367 1104.0684 C
868.6367 84.6504 L
f
*U
*u
0.207843 0.160784 0.164706 0 0.788235 0.788235 0.788235 Xa
868.2637 84.7793 m
868.2637 62.9678 847.6426 51.624 832.7939 51.624 C
71.0151 51.624 L
48.48 51.624 34.9741 63.4268 34.9741 77.9834 C
34.9741 1113.8789 L
34.9741 1128.4355 47.0122 1140.2388 61.8613 1140.2388 C
836.3828 1140.2388 L
855.8408 1140.2388 868.2637 1127.145 868.2637 1104.3086 C
868.2637 84.7793 L
f
*U
*u
0.211765 0.164706 0.168627 0 0.784314 0.784314 0.784314 Xa
867.8906 84.9092 m
867.8906 63.4697 847.707 52.1113 832.8682 52.1113 C
70.7354 52.1113 L
48.5947 52.1113 35.1704 63.9063 35.1704 78.4531 C
35.1704 1113.6406 L
35.1704 1128.187 47.2002 1139.9824 62.0391 1139.9824 C
836.2783 1139.9824 L
855.4951 1139.9824 867.8906 1126.9609 867.8906 1104.5488 C
867.8906 84.9092 L
f
*U
*u
0.215686 0.168627 0.172549 0 0.780392 0.780392 0.780392 Xa
867.5176 85.0381 m
867.5176 63.9727 847.7705 52.5977 832.9424 52.5977 C
70.4556 52.5977 L
48.709 52.5977 35.3667 64.3848 35.3667 78.9219 C
35.3667 1113.4023 L
35.3667 1127.939 47.3887 1139.7256 62.2173 1139.7256 C
836.1729 1139.7256 L
855.1494 1139.7256 867.5176 1126.7773 867.5176 1104.7891 C
867.5176 85.0381 L
f
*U
*u
0.219608 0.172549 0.176471 0 0.776471 0.776471 0.776471 Xa
867.1445 85.168 m
867.1445 64.4746 847.835 53.085 833.0176 53.085 C
70.1758 53.085 L
48.8237 53.085 35.563 64.8643 35.563 79.3916 C
35.563 1113.1636 L
35.563 1127.6904 47.5767 1139.4692 62.395 1139.4692 C
836.0684 1139.4692 L
854.8047 1139.4692 867.1445 1126.5933 867.1445 1105.0293 C
867.1445 85.168 L
f
*U
*u
0.223529 0.176471 0.180392 0 0.772549 0.772549 0.772549 Xa
866.7715 85.2969 m
866.7715 64.9766 847.8994 53.5723 833.0918 53.5723 C
69.896 53.5723 L
48.9385 53.5723 35.7593 65.3428 35.7593 79.8604 C
35.7593 1112.9253 L
35.7593 1127.4424 47.7646 1139.2129 62.5728 1139.2129 C
835.9629 1139.2129 L
854.459 1139.2129 866.7715 1126.4097 866.7715 1105.269 C
866.7715 85.2969 L
f
*U
*u
0.231373 0.180392 0.184314 0 0.768627 0.768627 0.768627 Xa
866.3994 85.4268 m
866.3994 65.4785 847.9639 54.0596 833.166 54.0596 C
69.6162 54.0596 L
49.0532 54.0596 35.9556 65.8223 35.9556 80.3291 C
35.9556 1112.687 L
35.9556 1127.1938 47.9526 1138.9565 62.751 1138.9565 C
835.8584 1138.9565 L
854.1133 1138.9565 866.3994 1126.2256 866.3994 1105.5093 C
866.3994 85.4268 L
f
*U
*u
0.235294 0.184314 0.188235 0 0.764706 0.764706 0.764706 Xa
866.0264 85.5557 m
866.0264 65.9805 848.0283 54.5469 833.2412 54.5469 C
69.3364 54.5469 L
49.168 54.5469 36.1519 66.3018 36.1519 80.7988 C
36.1519 1112.4487 L
36.1519 1126.9453 48.1406 1138.7002 62.9287 1138.7002 C
835.7529 1138.7002 L
853.7676 1138.7002 866.0264 1126.042 866.0264 1105.7495 C
866.0264 85.5557 L
f
*U
*u
0.239216 0.188235 0.192157 0 0.760784 0.760784 0.760784 Xa
865.6533 85.6855 m
865.6533 66.4824 848.0928 55.0342 833.3154 55.0342 C
69.0566 55.0342 L
49.2827 55.0342 36.3481 66.7803 36.3481 81.2676 C
36.3481 1112.2104 L
36.3481 1126.6973 48.3286 1138.4438 63.1064 1138.4438 C
835.6484 1138.4438 L
853.4219 1138.4438 865.6533 1125.8584 865.6533 1105.9897 C
865.6533 85.6855 L
f
*U
*u
0.243137 0.192157 0.196078 0 0.756863 0.756863 0.756863 Xa
865.2803 85.8145 m
865.2803 66.9844 848.1572 55.5215 833.3896 55.5215 C
68.7769 55.5215 L
49.3975 55.5215 36.5444 67.2598 36.5444 81.7373 C
36.5444 1111.9717 L
36.5444 1126.4487 48.5166 1138.1875 63.2847 1138.1875 C
835.543 1138.1875 L
853.0762 1138.1875 865.2803 1125.6743 865.2803 1106.23 C
865.2803 85.8145 L
f
*U
*u
0.247059 0.196078 0.2 0 0.752941 0.752941 0.752941 Xa
864.9072 85.9443 m
864.9072 67.4863 848.2217 56.0078 833.4639 56.0078 C
68.4971 56.0078 L
49.5117 56.0078 36.7407 67.7383 36.7407 82.2061 C
36.7407 1111.7334 L
36.7407 1126.2007 48.7051 1137.9312 63.4624 1137.9312 C
835.4385 1137.9312 L
852.7305 1137.9312 864.9072 1125.4907 864.9072 1106.4697 C
864.9072 85.9443 L
f
*U
*u
0.25098 0.2 0.203922 0 0.74902 0.74902 0.74902 Xa
864.5342 86.0732 m
864.5342 67.9883 848.2861 56.4951 833.5391 56.4951 C
68.2173 56.4951 L
49.6265 56.4951 36.937 68.2178 36.937 82.6758 C
36.937 1111.4951 L
36.937 1125.9521 48.8931 1137.6748 63.6406 1137.6748 C
835.334 1137.6748 L
852.3857 1137.6748 864.5342 1125.3066 864.5342 1106.71 C
864.5342 86.0732 L
f
*U
*u
0.254902 0.203922 0.207843 0 0.745098 0.745098 0.745098 Xa
864.1621 86.2031 m
864.1621 68.4902 848.3506 56.9824 833.6133 56.9824 C
67.9375 56.9824 L
49.7412 56.9824 37.1328 68.6973 37.1328 83.1445 C
37.1328 1111.2568 L
37.1328 1125.7036 49.0811 1137.4185 63.8184 1137.4185 C
835.2285 1137.4185 L
852.04 1137.4185 864.1621 1125.123 864.1621 1106.9502 C
864.1621 86.2031 L
f
*U
*u
0.262745 0.207843 0.211765 0 0.741176 0.741176 0.741176 Xa
863.7891 86.332 m
863.7891 68.9922 848.415 57.4697 833.6875 57.4697 C
67.6577 57.4697 L
49.856 57.4697 37.3291 69.1758 37.3291 83.6133 C
37.3291 1111.0186 L
37.3291 1125.4556 49.269 1137.1621 63.9961 1137.1621 C
835.124 1137.1621 L
851.6943 1137.1621 863.7891 1124.939 863.7891 1107.1904 C
863.7891 86.332 L
f
*U
*u
0.266667 0.207843 0.215686 0 0.737255 0.737255 0.737255 Xa
863.416 86.4619 m
863.416 69.4941 848.4795 57.957 833.7627 57.957 C
67.3779 57.957 L
49.9707 57.957 37.5254 69.6553 37.5254 84.083 C
37.5254 1110.7798 L
37.5254 1125.207 49.457 1136.9058 64.1743 1136.9058 C
835.0186 1136.9058 L
851.3486 1136.9058 863.416 1124.7554 863.416 1107.4302 C
863.416 86.4619 L
f
*U
*u
0.270588 0.211765 0.219608 0 0.733333 0.733333 0.733333 Xa
863.043 86.5908 m
863.043 69.9971 848.543 58.4443 833.8369 58.4443 C
67.0981 58.4443 L
50.0854 58.4443 37.7217 70.1338 37.7217 84.5518 C
37.7217 1110.5415 L
37.7217 1124.959 49.645 1136.6489 64.3521 1136.6489 C
834.9141 1136.6489 L
851.0029 1136.6489 863.043 1124.5718 863.043 1107.6704 C
863.043 86.5908 L
f
*U
*u
0.27451 0.215686 0.219608 0 0.729412 0.729412 0.729412 Xa
862.6699 86.7207 m
862.6699 70.499 848.6074 58.9316 833.9111 58.9316 C
66.8184 58.9316 L
50.2002 58.9316 37.918 70.6133 37.918 85.0215 C
37.918 1110.3032 L
37.918 1124.7104 49.833 1136.3926 64.5298 1136.3926 C
834.8086 1136.3926 L
850.6572 1136.3926 862.6699 1124.3877 862.6699 1107.9106 C
862.6699 86.7207 L
f
*U
*u
0.278431 0.219608 0.223529 0 0.72549 0.72549 0.72549 Xa
862.2969 86.8496 m
862.2969 71.001 848.6719 59.4189 833.9863 59.4189 C
66.5386 59.4189 L
50.3149 59.4189 38.1143 71.0928 38.1143 85.4902 C
38.1143 1110.0649 L
38.1143 1124.4619 50.021 1136.1362 64.708 1136.1362 C
834.7041 1136.1362 L
850.3115 1136.1362 862.2969 1124.2041 862.2969 1108.1509 C
862.2969 86.8496 L
f
*U
*u
0.282353 0.223529 0.227451 0 0.721569 0.721569 0.721569 Xa
861.9248 86.9795 m
861.9248 71.5029 848.7363 59.9053 834.0605 59.9053 C
66.2588 59.9053 L
50.4292 59.9053 38.3105 71.5713 38.3105 85.96 C
38.3105 1109.8267 L
38.3105 1124.2139 50.2095 1135.8799 64.8857 1135.8799 C
834.5986 1135.8799 L
849.9668 1135.8799 861.9248 1124.02 861.9248 1108.3911 C
861.9248 86.9795 L
f
*U
*u
0.290196 0.227451 0.231373 0 0.717647 0.717647 0.717647 Xa
861.5518 87.1084 m
861.5518 72.0049 848.8008 60.3926 834.1348 60.3926 C
65.979 60.3926 L
50.5439 60.3926 38.5068 72.0508 38.5068 86.4287 C
38.5068 1109.5879 L
38.5068 1123.9653 50.3975 1135.6235 65.0635 1135.6235 C
834.4941 1135.6235 L
849.6211 1135.6235 861.5518 1123.8364 861.5518 1108.6309 C
861.5518 87.1084 L
f
*U
*u
0.294118 0.231373 0.235294 0 0.713726 0.713726 0.713726 Xa
861.1787 87.2383 m
861.1787 72.5068 848.8652 60.8799 834.21 60.8799 C
65.6992 60.8799 L
50.6587 60.8799 38.7031 72.5293 38.7031 86.8984 C
38.7031 1109.3496 L
38.7031 1123.7173 50.5854 1135.3672 65.2417 1135.3672 C
834.3887 1135.3672 L
849.2754 1135.3672 861.1787 1123.6523 861.1787 1108.8711 C
861.1787 87.2383 L
f
*U
*u
1 Ap
0.298039 0.235294 0.239216 0 0.709804 0.709804 0.709804 Xa
860.8057 87.3672 m
860.8057 73.0088 848.9297 61.3672 834.2842 61.3672 C
65.4194 61.3672 L
50.7734 61.3672 38.8994 73.0088 38.8994 87.3672 C
38.8994 1109.1113 L
38.8994 1123.4688 50.7734 1135.1108 65.4194 1135.1108 C
834.2842 1135.1108 L
848.9297 1135.1108 860.8057 1123.4688 860.8057 1109.1113 C
860.8057 87.3672 L
f
*U
/ShapeBlendPathType (K) XT
/ShapeBlendPathID (A) XT
U
(Adobe Path Blends) 1 0 92 XP
%444342410000000000008040CCCCCC7D4A00000000000000430000000000
%0000000000000000000002000000410000000000000000000000FFFFFFFF
%FFFFFFFF000000004200000000000000000080BFFFFFFFFFFFFFFFFF4A00
%0000
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(2nd Sheet) Ln
0 A
*u
0 O
0 J 0 j 1 w 4 M []0 d0 XR
0 g
854.168 93.5586 m
854.168 79.1992 842.2939 67.5586 827.6465 67.5586 C
58.7827 67.5586 L
44.1357 67.5586 32.2617 79.1992 32.2617 93.5586 C
32.2617 1115.3022 L
32.2617 1129.6606 44.1357 1141.3013 58.7827 1141.3013 C
827.6465 1141.3013 L
842.2939 1141.3013 854.168 1129.6606 854.168 1115.3022 C
854.168 93.5586 L
f
1 D
0 g
98.6006 172.0322 m
98.6006 181.6152 90.8296 189.3857 81.2456 189.3857 C
81.2456 189.3857 L
71.6616 189.3857 63.8921 181.6152 63.8921 172.0322 C
63.8921 172.0322 L
63.8921 162.4473 71.6616 154.6777 81.2456 154.6777 C
81.2456 154.6777 L
90.8296 154.6777 98.6006 162.4473 98.6006 172.0322 C
98.6006 172.0322 L
f
0 g
98.6006 597.6523 m
98.6006 607.2373 90.8296 615.0059 81.2456 615.0059 C
81.2456 615.0059 L
71.6616 615.0059 63.8921 607.2373 63.8921 597.6523 C
63.8921 597.6523 L
63.8921 588.0684 71.6616 580.2998 81.2456 580.2998 C
81.2456 580.2998 L
90.8296 580.2998 98.6006 588.0684 98.6006 597.6523 C
98.6006 597.6523 L
f
98.6006 1034.3789 m
98.6006 1043.9609 90.8296 1051.7329 81.2456 1051.7329 C
81.2456 1051.7329 L
71.6616 1051.7329 63.8921 1043.9609 63.8921 1034.3789 C
63.8921 1034.3789 L
63.8921 1024.7915 71.6616 1017.0229 81.2456 1017.0229 C
81.2456 1017.0229 L
90.8296 1017.0229 98.6006 1024.7915 98.6006 1034.3789 C
98.6006 1034.3789 L
Bb
1 (Unnamed gradient 66) 15.9697 1113.6006 -50 1329.3506 1 0 0 1 0 0 Bg
854.4901 -1018.3416 -1002.6299 -841.3064 517.2852 1534.2539 Xm
4990.3364 -5947.251 -1002.6299 -841.3064 -4473.0513 7481.5049 Bc
676.0803 -805.721 -1002.6299 -841.3064 517.2852 1534.2539 Bm
178.4099 -212.6206 -1002.6299 -841.3064 1193.3652 728.5327 Bm
4990.3364 -5947.251 -1002.6299 -841.3064 1371.7754 515.9121 Bc
f
0 BB
*U
u
0 Ap
0 D
0.67451 0.133333 0.090196 0 0.25098 0.678431 0.827451 Xa
134.5928 708.3364 m
854.168 708.3364 L
854.168 709.8359 L
134.5928 709.8359 L
134.5928 708.3364 L
f
133.0938 709.8359 m
32.2622 709.8359 L
32.2622 709.0859 L
32.2622 708.3364 L
133.0938 708.3364 L
133.0938 709.8359 L
f
0.862745 0.482353 0.007843 0 0.031373 0.466667 0.737255 Xa
134.5928 1012.771 m
134.5928 1141.3013 L
133.0938 1141.3013 L
133.0938 1012.771 L
32.2622 1012.771 L
32.2622 1012.0215 L
32.2622 1011.272 L
133.0938 1011.272 L
133.0938 970.6406 L
32.2622 970.6406 L
32.2622 969.8906 L
32.2622 969.1411 L
133.0938 969.1411 L
133.0938 927.1743 L
32.2622 927.1743 L
32.2622 926.4243 L
32.2622 925.6753 L
133.0938 925.6753 L
133.0938 883.7065 L
32.2622 883.7065 L
32.2622 882.9556 L
32.2622 882.2051 L
133.0938 882.2051 L
133.0938 840.2402 L
32.2622 840.2402 L
32.2622 839.4893 L
32.2622 838.7388 L
133.0938 838.7388 L
133.0938 796.77 L
32.2622 796.77 L
32.2622 796.0205 L
32.2622 795.2705 L
133.0938 795.2705 L
133.0938 753.3062 L
32.2622 753.3062 L
32.2622 752.5552 L
32.2622 751.8047 L
133.0938 751.8047 L
133.0938 709.8359 L
133.0938 708.3364 L
133.0938 666.3696 L
32.2622 666.3696 L
32.2622 665.6201 L
32.2622 664.8706 L
133.0938 664.8706 L
133.0938 622.9023 L
32.2622 622.9023 L
32.2622 622.1514 L
32.2622 621.4023 L
133.0938 621.4023 L
133.0938 579.4385 L
32.2622 579.4385 L
32.2622 578.6865 L
32.2622 577.9365 L
133.0938 577.9365 L
133.0938 535.9678 L
32.2622 535.9678 L
32.2622 535.2178 L
32.2622 534.4688 L
133.0938 534.4688 L
133.0938 492.502 L
32.2622 492.502 L
32.2622 491.751 L
32.2622 491.0029 L
133.0938 491.0029 L
133.0938 449.0361 L
32.2622 449.0361 L
32.2622 448.2842 L
32.2622 447.5342 L
133.0938 447.5342 L
133.0938 405.5674 L
32.2622 405.5674 L
32.2622 404.8164 L
32.2622 404.0664 L
133.0938 404.0664 L
133.0938 362.1016 L
32.2622 362.1016 L
32.2622 361.3506 L
32.2622 360.6006 L
133.0938 360.6006 L
133.0938 318.6338 L
32.2622 318.6338 L
32.2622 317.8838 L
32.2622 317.1338 L
133.0938 317.1338 L
133.0938 275.167 L
32.2622 275.167 L
32.2622 274.416 L
32.2622 273.666 L
133.0938 273.666 L
133.0938 231.6973 L
32.2622 231.6973 L
32.2622 230.9463 L
32.2622 230.1982 L
133.0938 230.1982 L
133.0938 188.2314 L
32.2607 188.2314 L
32.2607 186.7314 L
133.0938 186.7314 L
133.0938 144.7637 L
32.2622 144.7637 L
32.2622 144.0127 L
32.2622 143.2627 L
133.0938 143.2627 L
133.0938 101.2979 L
32.2622 101.2979 L
32.2622 100.5459 L
32.2622 99.7959 L
133.0938 99.7959 L
133.0938 67.5586 L
134.5928 67.5586 L
134.5928 99.7959 L
854.167 99.7959 L
854.167 100.5459 L
854.167 101.2979 L
134.5928 101.2979 L
134.5928 143.2627 L
854.166 143.2627 L
854.166 144.0127 L
854.166 144.7637 L
134.5928 144.7637 L
134.5928 186.7314 L
854.167 186.7314 L
854.167 187.4805 L
854.167 188.2314 L
134.5928 188.2314 L
134.5928 230.1982 L
854.168 230.1982 L
854.168 231.6973 L
134.5928 231.6973 L
134.5928 273.666 L
854.168 273.666 L
854.168 275.167 L
134.5928 275.167 L
134.5928 317.1338 L
854.168 317.1338 L
854.168 318.6338 L
134.5928 318.6338 L
134.5928 360.6006 L
854.168 360.6006 L
854.168 362.1016 L
134.5928 362.1016 L
134.5928 404.0664 L
854.168 404.0664 L
854.168 405.5674 L
134.5928 405.5674 L
134.5928 447.5342 L
854.168 447.5342 L
854.168 449.0361 L
134.5928 449.0361 L
134.5928 491.0029 L
854.168 491.0029 L
854.168 492.502 L
134.5928 492.502 L
134.5928 534.4688 L
854.168 534.4688 L
854.168 535.9678 L
134.5928 535.9678 L
134.5928 577.9365 L
854.168 577.9365 L
854.168 579.4385 L
134.5928 579.4385 L
134.5928 621.4023 L
854.168 621.4023 L
854.168 622.9023 L
134.5928 622.9023 L
134.5928 664.8706 L
854.168 664.8706 L
854.168 666.3696 L
134.5928 666.3696 L
134.5928 708.3364 L
134.5928 709.8359 L
134.5928 751.8047 L
854.168 751.8047 L
854.168 753.3062 L
134.5928 753.3062 L
134.5928 795.2705 L
854.168 795.2705 L
854.168 796.77 L
134.5928 796.77 L
134.5928 838.7388 L
854.168 838.7388 L
854.168 840.2402 L
134.5928 840.2402 L
134.5928 882.2051 L
854.168 882.2051 L
854.168 883.7065 L
134.5928 883.7065 L
134.5928 925.6753 L
854.168 925.6753 L
854.168 927.1743 L
134.5928 927.1743 L
134.5928 969.1411 L
854.168 969.1411 L
854.168 970.6406 L
134.5928 970.6406 L
134.5928 1011.272 L
854.168 1011.272 L
854.168 1012.771 L
134.5928 1012.771 L
f
U
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 2 79 255 79 0 50 Lb
(Top Sheet) Ln
0 A
*u
1 Ap
0 O
0 J 0 j 1 w 4 M []0 d0 XR
0 g
845.7822 486.126 m
468.6006 84.7783 463.3145 79.4922 v
458.0293 74.208 427.4165 71.9053 Y
50.0903 71.9053 L
35.4434 71.9053 23.5698 83.5469 23.5698 97.9053 C
23.5698 1119.6484 L
23.5698 1134.0073 35.4434 1145.6475 50.0903 1145.6475 C
818.9541 1145.6475 L
833.6016 1145.6475 845.4746 1134.0073 845.4746 1119.6484 C
845.7822 486.126 L
f
1 D
0 g
89.9087 176.3789 m
89.9087 185.96 82.1367 193.7314 72.5527 193.7314 C
72.5527 193.7314 L
62.9692 193.7314 55.1992 185.96 55.1992 176.3789 C
55.1992 176.3789 L
55.1992 166.7939 62.9692 159.0234 72.5527 159.0234 C
72.5527 159.0234 L
82.1367 159.0234 89.9087 166.7939 89.9087 176.3789 C
89.9087 176.3789 L
f
0 g
89.9087 601.999 m
89.9087 611.583 82.1367 619.3516 72.5527 619.3516 C
72.5527 619.3516 L
62.9692 619.3516 55.1992 611.583 55.1992 601.999 C
55.1992 601.999 L
55.1992 592.415 62.9692 584.6455 72.5527 584.6455 C
72.5527 584.6455 L
82.1367 584.6455 89.9087 592.415 89.9087 601.999 C
89.9087 601.999 L
f
89.9087 1038.7251 m
89.9087 1048.3071 82.1367 1056.0791 72.5527 1056.0791 C
72.5527 1056.0791 L
62.9692 1056.0791 55.1992 1048.3071 55.1992 1038.7251 C
55.1992 1038.7251 L
55.1992 1029.1377 62.9692 1021.3696 72.5527 1021.3696 C
72.5527 1021.3696 L
82.1367 1021.3696 89.9087 1029.1377 89.9087 1038.7251 C
89.9087 1038.7251 L
Bb
1 (Unnamed gradient 58) 434.6763 71.9053 90 1073.7417 1 0 0 1 0 0 Bg
-0.000047 1073.7417 826.2124 0.000036 21.5698 71.9053 Xm
-0.000358 8179.1768 826.2124 0.000036 21.5703 -8107.2715 Bc
-0.000026 595.8676 826.2124 0.000036 21.5698 71.9053 Bm
-0.000021 477.8741 826.2124 0.000036 21.5698 667.7729 Bm
-0.000358 8179.1768 826.2124 0.000036 21.5698 1145.647 Bc
f
0 BB
*U
0 Ap
0 D
0.807843 0.470588 0 0 0.035294 0.490196 0.835294 Xa
23.5708 973.4224 m
23.5708 975.0508 L
845.4736 975.0508 L
845.4736 973.4224 L
23.5708 973.4224 L
23.5708 973.4224 L
f
23.5708 929.957 m
23.5708 931.5854 L
845.4736 931.5854 L
845.4736 929.957 L
23.5708 929.957 L
23.5708 929.957 L
f
23.5708 886.4863 m
23.5708 888.1157 L
845.4736 888.1157 L
845.4736 886.4863 L
23.5708 886.4863 L
23.5708 886.4863 L
f
0.752941 0.321569 0 0 0.098039 0.572549 0.866667 Xa
23.5708 843.021 m
23.5708 844.6504 L
845.4736 844.6504 L
845.4736 843.021 L
23.5708 843.021 L
23.5708 843.021 L
f
0.729412 0.286274 0 0 0.117647 0.596078 0.886275 Xa
23.5708 799.5527 m
23.5708 801.1821 L
845.4736 801.1821 L
845.4736 799.5527 L
23.5708 799.5527 L
23.5708 799.5527 L
f
0.67451 0.133333 0.090196 0 0.25098 0.678431 0.827451 Xa
23.5708 756.0879 m
23.5708 757.7163 L
845.4736 757.7163 L
845.4736 756.0879 L
23.5708 756.0879 L
23.5708 756.0879 L
f
0.654902 0.129412 0.023529 0 0.254902 0.690196 0.878431 Xa
23.5708 712.6177 m
23.5708 714.2471 L
845.4736 714.2471 L
845.4736 712.6177 L
23.5708 712.6177 L
23.5708 712.6177 L
f
0.564706 0.015686 0 0 0.32549 0.780392 0.956863 Xa
23.5708 669.1514 m
23.5708 670.7817 L
845.4736 670.7817 L
845.4736 669.1514 L
23.5708 669.1514 L
23.5708 669.1514 L
f
0.443137 0.015686 0 0 0.482353 0.827451 1 Xa
23.5708 625.6841 m
23.5708 627.313 L
845.4736 627.313 L
845.4736 625.6841 L
23.5708 625.6841 L
23.5708 625.6841 L
f
23.5708 582.2188 m
23.5708 583.8477 L
845.4736 583.8477 L
845.4736 582.2188 L
23.5708 582.2188 L
23.5708 582.2188 L
f
0.545098 0.043137 0.019608 0 0.388235 0.764706 0.917647 Xa
23.5708 538.75 m
23.5708 540.3799 L
845.4736 540.3799 L
845.4736 538.75 L
23.5708 538.75 L
23.5708 538.75 L
f
0.603922 0.156863 0 0 0.301961 0.694118 0.937255 Xa
23.5708 495.2832 m
23.5708 496.9131 L
845.4736 496.9131 L
845.4736 495.2832 L
23.5708 495.2832 L
23.5708 495.2832 L
f
0.584314 0.145098 0 0 0.317647 0.705882 0.94902 Xa
23.5684 451.8174 m
23.5684 453.4453 L
819.8633 453.4453 L
819.8633 451.8174 L
23.5684 451.8174 L
23.5684 451.8174 L
f
0.698039 0.247059 0 0 0.14902 0.627451 0.917647 Xa
23.5693 408.3457 m
23.5693 409.9785 L
779.0684 409.9785 L
777.498 408.3457 L
23.5693 408.3457 L
23.5693 408.3457 L
f
0.713725 0.270588 0 0 0.129412 0.611765 0.909804 Xa
23.5684 364.8828 m
23.5684 366.5117 L
736.9512 366.208 L
735.5859 364.7891 L
23.5684 364.8828 L
23.5684 364.8828 L
f
23.5698 321.417 m
23.5698 323.0439 L
695.4609 323.0439 L
693.8965 321.417 L
23.5698 321.417 L
23.5698 321.417 L
f
0.737255 0.247059 0 0 0.145098 0.607843 0.839216 Xa
23.5698 277.9473 m
23.5698 279.5781 L
653.7051 279.5781 L
652.1377 277.9473 L
23.5698 277.9473 L
23.5698 277.9473 L
f
0.807843 0.470588 0 0 0.035294 0.490196 0.835294 Xa
23.5693 234.4766 m
23.5693 236.1084 L
613.1758 236.1084 L
611.7422 234.4766 L
23.5693 234.4766 L
23.5693 234.4766 L
f
23.5693 191.0117 m
23.5693 192.6416 L
574.5586 192.6416 L
573.2852 191.1445 L
23.5693 191.0117 L
23.5693 191.0117 L
f
23.5698 147.5439 m
23.5698 149.1738 L
534.7852 149.0947 L
533.3418 147.5439 L
23.5698 147.5439 L
23.5698 147.5439 L
f
23.5698 104.0752 m
23.5698 105.708 L
493.125 105.708 L
491.4805 104.0752 L
23.5698 104.0752 L
23.5698 104.0752 L
f
23.5708 1015.5522 m
23.5708 1017.1836 L
845.4736 1017.1836 L
845.4736 1015.5522 L
23.5708 1015.5522 L
23.5708 1015.5522 L
f
0 0.992157 1 0 1 0 0 Xa
124.335 71.9053 m
124.335 1145.6484 L
125.9644 1145.6484 L
125.9644 71.9053 L
124.335 71.9053 L
124.335 71.9053 L
f
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 1 1 255 79 79 0 50 Lb
(Page Curl) Ln
0 A
0 O
0 J 0 j 1 w 4 M []0 d0 XR
425.8228 71.9053 m
448.4834 71.249 459.0283 76.5479 v
487.916 91.0664 625.4355 250.1377 y
807.873 440.1748 819.875 452.1768 v
831.8789 464.1797 845.7822 486.126 y
847.126 480.7471 798.875 456.7764 v
750.6221 432.8057 581.7715 456.7764 y
523.5703 464.2344 l
488.1758 468.248 479.6982 464.5605 v
466.7344 458.9229 457.8154 447.9336 461.4463 411.8154 c
464.7031 379.4258 472.8887 335.1611 471.6182 292.0205 c
470.6895 260.4854 474.8311 228.4922 474.8311 199.1113 c
474.8311 163.25 468.9658 132.6543 463.6045 112.4346 c
459.6045 97.3467 454.332 89.5918 453.543 88.1777 c
447.6265 77.5742 425.8228 71.9053 y
Bb
1 (Unnamed gradient 64) 463.3164 451.502 -45 265.5938 1 0 0 1 0 0 Bg
187.8031 -187.8031 -419.9185 -419.9185 673.2754 661.4609 Xm
5805.8037 -5805.8037 -419.9185 -419.9185 -5132.5283 6467.2646 Bc
95.9653 -95.9653 -419.9185 -419.9185 673.2754 661.4609 Bm
91.8378 -91.8378 -419.9185 -419.9185 769.2412 565.4951 Bm
5805.8037 -5805.8037 -419.9185 -419.9185 861.0781 473.6582 Bc
f
0 BB
494.6299 112.3799 m
494.6299 112.3799 L
497.707 119.4258 501.3838 131.0605 503.7227 149.3535 C
503.7227 149.3535 L
509.5566 194.9316 514.585 231.8867 514.585 300.6768 C
514.585 300.6768 L
514.585 352.251 508.9961 419.2998 506.1992 449.5928 C
506.1992 449.5928 L
505.2676 459.6895 504.5566 465.7939 Y
505.7383 465.7266 L
505.7383 465.7178 515.6709 369.5371 515.6729 300.6768 C
515.6729 300.6768 L
515.6729 231.8379 510.6318 194.7832 504.8018 149.2168 C
504.8018 149.2168 L
500.0996 112.4619 489.6357 102.2549 Y
493.0898 108.8584 494.6299 112.3799 V
Bb
1 (Unnamed gradient 82) 502.6543 102.2549 90 363.5391 1 0 0 1 0 0 Bg
-0.000016 363.5391 30.0371 0.000001 487.6357 102.2549 Xm
-0.00036 8247.1543 30.0371 0.000001 487.6357 -8144.9004 Bc
-0.000016 363.5391 30.0371 0.000001 487.6357 102.2549 Bm
-0.00036 8247.1543 30.0371 0.000001 487.6357 465.7939 Bc
f
0 BB
533.6484 148.8135 m
533.6484 148.8135 L
534.9961 151.0771 536.8115 155.7002 538.5547 164.9287 C
538.5547 164.9287 L
542.1191 183.7793 545.7324 199.2656 545.7354 276.7725 C
545.7354 276.7725 L
545.7354 334.8896 543.6514 409.5957 542.6113 443.3115 C
542.6113 443.3115 L
542.2656 454.5518 542.0352 461.8682 Y
543.1191 461.7295 L
543.1191 461.7275 546.8203 354.2939 546.8203 276.7725 C
546.8203 276.7725 L
546.8252 199.2656 543.1924 183.5879 539.624 164.7275 C
539.624 164.7275 L
536.1768 146.625 530.7197 145.4961 531.5264 145.5967 C
532.9756 147.6816 533.6484 148.8135 V
Bb
1 (Unnamed gradient 82) 539.1328 145.5908 90 316.2773 1 0 0 1 0 0 Bg
-0.000014 316.2773 20.1055 0.000001 528.7197 145.5908 Xm
-0.000362 8283.7275 20.1055 0.000001 528.7197 -8138.1367 Bc
-0.000014 316.2773 20.1055 0.000001 528.7197 145.5908 Bm
-0.000362 8283.7275 20.1055 0.000001 528.7197 461.8682 Bc
f
0 BB
567.2236 184.5918 m
567.2217 184.5977 571.5127 191.0137 573.0107 193.9941 C
573.0107 193.9941 L
576.0723 200.0781 579.3037 209.7861 579.7783 224.1152 C
579.7783 224.1152 L
580.4873 245.46 580.9482 365.6719 581.1338 424.4297 C
581.1338 424.4297 L
581.1963 444.0186 581.2266 456.7471 581.2285 456.7783 C
581.2285 456.7783 L
582.3135 456.6357 L
582.3135 456.6309 581.8086 252.5996 580.8633 224.0811 C
580.8633 224.0811 L
580.3848 209.6045 577.1162 199.7344 573.9805 193.5068 C
573.9805 193.5068 L
570.918 187.4121 567.2236 184.5918 Y
Bb
1 (Unnamed gradient 82) 574.7686 184.5918 90 272.1865 1 0 0 1 0 0 Bg
-0.000012 272.1865 19.0918 0.000001 565.2217 184.5918 Xm
-0.000364 8319.2686 19.0918 0.000001 565.2217 -8134.6777 Bc
-0.000012 272.1865 19.0918 0.000001 565.2217 184.5918 Bm
-0.000364 8319.2686 19.0918 0.000001 565.2217 456.7783 Bc
f
0 BB
603.7217 228.3779 m
603.7217 228.3779 L
605.5967 232.2432 608.4961 238.668 612.5762 248.8955 C
612.5762 248.8955 L
615.5723 256.335 617.6484 286.9424 618.9854 322.0332 C
618.9854 322.0332 L
620.335 357.1572 620.9951 396.917 621.3105 423.1016 C
621.3105 423.1016 L
621.5176 440.5586 621.5117 452.0127 621.5146 452.04 C
622.6592 451.9756 L
622.6592 451.9229 622.4424 406.2695 621.2051 358 C
621.2051 358 L
619.9502 309.6865 617.7422 259.002 613.585 248.4902 C
613.585 248.4902 L
605.4072 227.999 601.3145 222.6484 Y
601.8486 224.5166 603.7217 228.3779 V
Bb
1 (Unnamed gradient 82) 611.9863 222.6484 90 229.3916 1 0 0 1 0 0 Bg
-0.00001 229.3916 25.3447 0.000001 599.3145 222.6484 Xm
-0.000365 8356.4863 25.3447 0.000001 599.3145 -8133.8379 Bc
-0.00001 229.3916 25.3447 0.000001 599.3145 222.6484 Bm
-0.000365 8356.4863 25.3447 0.000001 599.3145 452.04 Bc
f
0 BB
633.0332 258.0527 m
633.1299 258.1777 633.8936 259.8389 634.1191 260.2266 C
634.1191 260.2266 L
634.5684 261.0049 635.2725 262.4131 636.251 264.8779 C
636.251 264.8779 L
638.2148 269.8066 641.2793 278.96 645.6514 295.7725 C
645.6514 295.7725 L
652.1895 320.8633 654.7119 394.4961 655.5498 429.6836 C
655.5498 429.6836 L
655.833 441.4209 655.9277 448.8721 655.9297 448.8906 C
655.9297 448.8906 L
657.0137 448.877 L
657.0088 448.8447 655.4902 329.3242 646.7031 295.499 C
646.7031 295.499 L
637.916 261.8057 634.2559 259.3252 Y
633.0332 258.0527 L
Bb
1 (Unnamed gradient 82) 645.0234 258.0527 90 190.8379 1 0 0 1 0 0 Bg
-0.000008 190.8379 27.9805 0.000001 631.0332 258.0527 Xm
-0.000367 8389.5234 27.9805 0.000001 631.0332 -8131.4707 Bc
-0.000008 190.8379 27.9805 0.000001 631.0332 258.0527 Bm
-0.000367 8389.5234 27.9805 0.000001 631.0332 448.8906 Bc
f
0 BB
667.8145 294.6602 m
670.1719 297.2695 671.9766 299.4053 V
671.9766 299.4053 L
675.584 303.6777 679.9229 310.2061 682.8271 319.209 C
682.8271 319.209 L
686.124 329.3828 689.6309 361.3115 692.2764 390.5869 C
692.2764 390.5869 L
694.9277 419.8838 696.7471 446.5449 696.752 446.5996 C
696.752 446.5996 L
697.833 446.5244 L
697.8242 446.4863 690.5713 339.7031 683.8623 318.874 C
683.8623 318.874 L
677.9453 300.5537 665.8701 292.2432 y
666.6504 293.623 667.8145 294.6602 V
Bb
1 (Unnamed gradient 82) 681.8516 292.2432 90 154.3564 1 0 0 1 0 0 Bg
-0.000007 154.3564 35.9629 0.000002 663.8701 292.2432 Xm
-0.000368 8426.3516 35.9629 0.000002 663.8701 -8134.1074 Bc
-0.000007 154.3564 35.9629 0.000002 663.8701 292.2432 Bm
-0.000368 8426.3516 35.9629 0.000002 663.8701 446.5996 Bc
f
0 BB
*u
0 g
712.0518 339.5254 m
712.0518 339.5254 712.0527 339.5264 V
712.0527 339.5264 L
712.0537 339.5254 L
712.0518 339.5254 L
712.0518 339.5254 L
f
711.29 339.5146 m
711.2881 339.5273 713.5801 342.5449 716.168 346.6621 C
716.168 346.6621 L
718.7549 350.7803 721.6133 356.7412 722.7031 364.1162 C
722.7031 364.1162 L
724.915 379.083 737.0293 446.3604 Y
738.2285 446.3984 L
738.3848 447.3066 735.248 430.3594 731.7744 410.7188 C
731.7744 410.7188 L
728.4648 392.0039 724.877 371.4121 723.7754 363.959 C
723.7754 363.959 L
721.542 348.8936 711.29 339.5146 Y
Bb
1 (Unnamed gradient 82) 724.7617 339.5146 90 106.9189 1 0 0 1 0 0 Bg
-0.000005 106.9189 31.0967 0.000001 709.2881 339.5146 Xm
-0.00037 8469.2617 31.0967 0.000001 709.2881 -8129.7461 Bc
-0.000005 106.9189 31.0967 0.000001 709.2881 339.5146 Bm
-0.00037 8469.2617 31.0967 0.000001 709.2881 446.4336 Bc
f
0 BB
*U
*u
0 g
744.5498 373.3281 m
744.5527 373.3262 L
744.5498 373.3281 L
744.5498 373.3281 L
f
742.9961 372.4932 m
742.999 372.499 746.0811 376.3438 749.2422 380.292 C
749.2422 380.292 L
752.4014 384.2402 756.418 389.8887 759.8379 396.6621 C
759.8379 396.6621 L
763.2256 403.3633 766.3428 416.6074 768.5771 428.127 C
768.5771 428.127 L
770.8154 439.6514 772.1689 449.2881 772.1719 449.3086 C
773.2725 449.4844 L
773.2568 449.4521 767.7715 410.0068 760.8086 396.1729 C
760.8086 396.1729 L
753.8779 382.4502 742.9961 372.4932 Y
Bb
1 (Unnamed gradient 82) 758.1348 372.4932 90 76.9912 1 0 0 1 0 0 Bg
-0.000003 76.9912 34.2764 0.000001 740.9961 372.4932 Xm
-0.000372 8502.6348 34.2764 0.000001 740.9961 -8130.1406 Bc
-0.000003 76.9912 34.2764 0.000001 740.9961 372.4932 Bm
-0.000372 8502.6348 34.2764 0.000001 740.9961 449.4844 Bc
f
0 BB
*U
0.92549 0.584314 0.247059 0.054902 0.047059 0.388235 0.556863 Xa
789.4912 420.7959 m
798.2363 456.4658 L
799.4014 457.0381 L
790.709 422.0586 L
789.4912 420.7959 L
f
608.9238 278.7969 m
602.4805 278.8008 595.4502 279.1289 587.7949 279.8555 C
587.7949 279.8555 L
517.5674 286.5596 471.5498 292.2529 471.5459 292.2529 C
471.5459 292.2529 L
471.7432 293.8711 L
471.7764 293.8662 483.2422 292.4492 503.5186 290.1865 C
503.5186 290.1865 L
523.793 287.9287 552.8457 284.8281 587.9482 281.4785 C
587.9482 281.4785 L
595.5586 280.7539 602.5352 280.4287 608.9238 280.4307 C
608.9238 280.4307 L
654.7363 280.4443 670.2725 297.0127 673.3789 300.9912 C
673.3789 300.9912 L
673.8203 301.5605 675.4795 302.1387 Y
675.373 301.918 661.7471 278.7959 609.0059 278.7969 C
609.0059 278.7969 L
608.9805 278.7969 608.9492 278.7969 608.9238 278.7969 C
608.9238 278.7969 L
Bb
1 (Unnamed gradient 85) 471.5459 290.4678 0 203.9336 1 0 0 1 0 0 Bg
203.9336 0 0 -27.3428 471.5459 304.1387 Xm
8216.0459 0 0 -27.3428 -7744.5 304.1387 Bc
203.9336 0 0 -27.3428 471.5459 304.1387 Bm
8216.0459 0 0 -27.3428 675.4795 304.1387 Bc
f
0 BB
LB
%AI5_EndLayer--
%AI3_BeginCrops
userdict /AI3_noCropMarks known not {
0 A
u
u
0 R
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 XS
0 J 0 j 0.5 w 4 M []0 d0 XR
-9 0 m
-36 0 L
S
0 -9 m
0 -36 L
S
U
u
-9 1200 m
-36 1200 L
S
0 1209 m
0 1236 L
S
U
u
909 1200 m
936 1200 L
S
900 1209 m
900 1236 L
S
U
u
909 0 m
936 0 L
S
900 -9 m
900 -36 L
S
U
U
} if
%AI3_EndCrops
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
