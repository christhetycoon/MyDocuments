%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.0%%For: (Lordalea) ()%%Title: (jungle_love.eps)%%CreationDate: 5/26/09 10:47 PM%%BoundingBox: -3104 -3747 4155 4168%%HiResBoundingBox: -3103.6802 -3746.6885 4154.4082 4167.6235%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 421.5 296.7754 421.5 296.7754%AI3_TileBox: 115 -98.7246 727 693.2754%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 8500 9000%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -11281.1377 7117.2637 0.0417 979 637 18 0 0 -22 44 0 0%AI5_OpenViewLayers: 7%%PageOrigin:-3829 4202%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 120 128 8%%BeginData: 26172 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD78FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFD7DFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFD7BFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFD79FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFCBFD79FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFCAC49BCACBFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFD59FFC4B7B795BECAFD1EFFCAFFFFFFCAFFFFFFCAFFFFFFCA%FFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFF%FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCA%FFFFFFCAFFFFFFCAFFFFC494BD95BD94BDCAFFCAFFFFFFCAFFFFFFCAFFFF%FFCAFFFFFFCAFFFFFFCAFFFFFFCAFD56FFBDBDB7BDB7BEB7C4FD1DFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFCBBD95BD95BD95B7BDFD%05FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD56FFB7BDB7BD%B7BDB7CBFFFFCBFD18FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFA8BD95BD95BD95BD9BBE9BBD95BEC4FFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFCBFD55FFCBB7BDB7BEB7BDB7BDB7BDB7BDB7BDCAFD14%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB%FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFA2BD95BD95%BD95BD95BD95BD95BD95C4FD04FFCBFFFFFFCBFFFFFFCBFFFFFFCBFD57FF%CA95BDB7BDB7BDB7BDB7BDB7BDB7BDCAFD16FFCAFFFFFFCAFFFFFFCAFFFF%FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCA%FFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFF%FFCAFFFFFFCAFFFFFFCAFFC4B795BD95BD95BD95BD95BD95B795FFFFFFCA%FFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFD55FFCBB7BDB7BDB7BEB7BDB7BE%B7BDB7CBFD17FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB%FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFCA%BD95BD95BD95BD95BD95B795C4FD04FFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFD56FFB7B795BDB7BDB7BDBDBEC4FD18FFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFA8C4A2C4A2CAC4CAA8FD07FFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFCBFD4CFFCACBCAFD2AFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD07FFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFFFCAC4CACACBCAFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD1FFFCBC4CBFD2CFFCACAC4CB%CACACAFD28FFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFF%AFCABDBD9BCAFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFC4CAC4CAC4FFCAFFFFFF%CAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFFFFFFCAFF%FFFFCAFD1BFFCBBDC4BDC4CAFD0BFFCACBCBFD1EFFCBC4CBCAFD2AFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFCBBDC4BDBDBDFFFFFF%CBFFFFFFCBFFFFFFCABEBDC4C4FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFF%FFFFCBFFFFFFCBFFFFFFCBFFCBCAC4FFFFFFCBFFFFFFCBFFFFFFCBFFFFFF%CBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD1AFFC4BE%BDC4BDC8CEFD0BFFBDC4BDBEC4FD1DFFCBFD09FFCBFD20FFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFAFC4BDBD9BC8C6CDA8FFFFFF%A8FFFFFFA8FFFFCA9BBEBDBDA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA9FFC4C49BC4FFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFCBFD1AFFCAC4C4C8%C6FEC6FD0BFFCEC8BDC4BDCAFD24FFC4C4BDC4BDFD1EFFCBFFFFFFCBFFFF%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCEFEC6C6C9FFFFFFCB%FFFFFFCBFFFFCEC6C6C2C4C4FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFC4BEBDBEBDC4CAFFCBFFFFFFCB%FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFD20FFCFFEC6FEFD0AFF%C7FEC6CEFD24FFCABEBDC4BDC4C4FD20FFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA7C6C6CDA8FFFFFFA8FFFFFFA8FEC6%CDA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA9CBBDBD9BC4BDC4A8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD20FFCEFEC6CFFD07FFCFC6CCFD28FF%C4C4BDC4BDC4FD1FFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB%FFFFFFCBFFFFFFCBFFC7C6C6FFFFFFCBFFFFFFC7FEC8FFCBFFFFFFCBFFFF%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFCACACAFFFFFFCB%FFFFFFCAC4BDBEC3FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF%FFCBFFFFFFCBFD22FFC6FEC8FD06FFFEC6FD1FFFCBCBCAFD0BFFCBFD1EFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8CFC6C6A7FFFFFFA8CFC6CCA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFCBC4CACAFFA8FFFFFFA8FFFFFFA9FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFCBFD%1AFFCFCFCFFD06FFCEC6FECFCFC9CFC8FECEFD0AFFCEC7CDCDCFFD10FFCA%CBCACBCAFD28FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFF%FFC9CDC7CCC9FFFFFFA9FFCAC6C6FEC6C6A4FEC6C8A8FFFFFFA9FFFFFFA9%CEC7CCC7CCC7CDCAFFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFCAFFA9FFFF%FFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9%FFFFFFA9FD1AFFCECCC7CDC7CCC8CFFFFFC8C6C6FEC6FEC6C6C6FEC6C6C9%FD06FFCEC7CDC7CDC7CDC7CDFD3BFFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8%FFCBFFA8FFCBFFA8CDC7CDC7CDC7CCC7CDC7C6A4C6C6C6A4C6C6C6A4C6C6%C6A5FFFFFFA8CEC7CCC7CDC7CDC7CDC7CFA8FFCBFFA8FFCBFFA8FFCBFFA8%FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCB%FFA8FFCBFFA8FFCBFFA8FFCBFFA8FD18FFCDCDC7CDC7CDC7CDFD07C6CCC6%C6C6FEFD04C6C8FFCECDC7CDC7CDC7CDC7CDC7CDCEFD3CFFA9FFFFFFA9FF%FFFFA9FFFFFFA9FFFFFFA9FFFFFFA9CEC7CDC7CDC7CDC6C7C8C9A6C7C6C6%A4C6C6C6A4C6C6C6A4C6C7CCC7CDC7CDC7CDC7CDC7CDC7CFA9FFFFFFA9FF%FFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFF%A9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FD19FFCEC7CDC7CDC7%C8CAFFFFFFCACDC6C6C0C9C9CFC8CCFD04C6C7CDC7CDC7CDC7CDC7CDC7CE%FD3BFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFFFFFA8CEC7%CCC7C7C9FFCAFFAFFFC9C6C0C9CAFFCBFFA7C6C6C6A4C6C7CCC7CDC7CDC7%CCC7CEA8FFFFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAF%FFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8%FFAFFD1BFFCFCECEC8FFFFFF856059FFC7C8CBFFFFFFAFFFC8C6C6FEC6CD%C7CDC7CDC7CDCDCFFD3DFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFF%FFA9FFFFFFA9FFFFFFA5C9FFFF852FF80506C8C9FFAFAF605984CFC6C6A4%C6C9CFC9CFC9CFA8FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFF%FFA9FFFFFFAFFFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9%FFFFFFA9FFFFFFA9FD1EFFC8C6C9FFA98B52270005A0CFFFAF5A05050684%CCC6C6C6CFFD45FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF%A8FFA8CEA4C6C0C9CAAF85FF2E0505C8C9FF8559F805F859FD04C6A6CBAF%FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8%C4BDC4A2FFAFFFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9%FFA8FFA9FFA8FD17FFCFC7FD05C6C8FFAFAFA92E06A7C6CFFF8BA9FF2705%59CCC6C6C6C3BDCAFD1EFFC4BEBDC4C4FD22FFA9FFFFFFA9FFFFFFA9FFFF%FFA9FFFFFFA9FFC9C7A4C6C6C6A4C6C6C6C3FFA98560AEC6C6C2FF85AFFF%2E06C9FD04C6BDBEBDCAAFFFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFFFFF%A9FFFFFFA9FFFFFFAFFFC3BDBDBDC4FFA9FFFFFFA9FFFFFFA9FFFFFFA9FF%FFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FD14FFC7FD0BC6C2CFC9C9C6C6C6C7%CAFF858B60AFC7FD04C6C3BDC4BDFD1EFFCEC6C3BDCAFD1FFFA8FFAFFFA8%FFAFFFA8FFAFFFA8FFAFFFA9CFC6C6A4C6C6C6A4C6C6C6A4C6C6C69EC6C6%C6A4C6C6C7C9FFA8CAA5C6C6C6A4C6C0C39BBEC4FFA8FFAFFFA8FFAFFFA8%FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FFAFFFA8FEC6CEA9FFAFFFA8FFAF%FFA8FFAFFFA8FFC4C4A2FFAFFFA8FFAFFFA8FFAFFFA8FFA9FD11FFCFC6C6%C6CCC6C6C6CCC6C6C6CCC6C6C6FEC6C6C6CCC6C6C6C7C7C8FD05C6CCC6C6%C1C4BDC4FD1EFFC8FECEFD0DFFCBC4BDC4CBFD0EFFA9FFAFFFA9FFAFFFA9%FFAFFFA9FFAFCFA4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6%C6A4C6C6C6A4C6C6C6A4C6C6C6BCBEC4FFAFFFAFFFA9FFAFFFA9FFAFFFA9%FFAFFFA9FFCFCEC8CECAFFA9FFAFFFA9CEC6CEA9FFAFFFA9FFAFFFA9FFAF%FFAFC9BDBEBDCBAFFFA9FFAFFFA9FFAFFFA9FFAFFFFFAFFFFFFFAFFFFFFF%AFFFFFFFAFFFC7FD24C6C7BDCBFFFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFF%FFCFCDC7CCC7CDCFFFAFFFFFFFC9FECEFFAFFFFFFFAFFFFFFFAFFFFFCEC6%C4BDBECAFFFFFFAFFFFFFFAFFFFFFFAFFFFFA9FFA8FFA9FFA8FFA9FFA8FF%A9FFA6C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6%A4C6C6C6A4C6C0C69EC7C6C2A1C4C3CBA9FFA9FFA8FFA9FFA8FFA9FFA8FF%A9CDC7CDC7CDC7CDA9FFA8FFAFCFC6CEAFFFA8FFA9FFA8FFA9FFA9CEC6FE%A0BEBDFFA9FFA9FFA8FFA9FFA8FFA9FFA8FD0EFFCFCCC6C6C6CCC6C6C6CC%C6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCFD07C6BDB2C2C6C4BDC4%BDCBFD0EFFC8CDC7CDC7CDC7CEFD04FFCFFECEFD0AFFCEC6FEC8FFCBFD10%FFAFFFA9FFAFFFA9FFAFFFA9FFAFCEA4C6C6C6A4C6C6C6A4C6C6C6A4C6C6%C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C7C6C6C6C28EB7B6C6C1BEBDBD9B%FFAFFFA9FFAFFFA9FFAFFFA9FFAFCDC7CDC7CDC7CDC7CEA9FFAFFFC6CEAF%FFA9FFAFFFA9FFAFCDC6CCAEFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9%FD04FFAFFFFFFFAFFFFFFFAFFFC7FD07C6C0C7FD15C6CCFFCEC6C6C1B78E%C3C6C6BDC4BDC4CAFFFFFFAFFFFFFFAFFFFFFFAFFFCECCC7CDC7CDC7CDC7%CFAFFFCFFEC7FFFFFFAFFFFFFFCFCCC6CEAFFFFFFFAFFFFFFFAFFFFFFFAF%FFFFFFAFFD04FFA8FFA9FFA8FFA9FFA8FFA9FFA8C6C6C6A4C6C6C69EC09E%C7A4C6C6C6A4C6C6C69EC6C6C6A4C6C6C6A4C6C6C6A5FFA9C7C0C6C1C29E%C6C6C19BC4BDCAA9FFA9FFA8FFA9FFA8FFA9FFA8FFC8CCC7CDC7CDC7CDC7%CEA6C6C6C6A4C7A6CFA9FFA7C6C6CFAFFFA8FFA9FFA8FFA9FFA8FFA9FFA8%FFA9FFA8FFA9FD0EFFC6C6C6CCC6C6C6C7C0C7C7CCC6C6C6CCC6C6C6C7C0%C6C6CCC6C6C6CCC6C6C6CDFFFFCAFD08C6C3BDBEC4FD0FFFC8CDC7CDC7CD%C8CDC6C6C6FEC6FEC6C6C6CECDFEC7FD18FFA9FFAFFFA9FFAFFFA9FFAFFF%A8C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C79EC0C0C6A4C6C6C6A4C6%C6C6A5FFAFFFA6FD07C6C1C4BDCAA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFF%A7CDC7CCC7CDC7C6A4C6C6C6A4FD04C6FEC8FFA9FFAFFFA9CFCAFFA9FFAF%FFA9FFAFFFA9FFAFFFA9FFAFFFFFAFFFFFFFAFFFFFFFAFFFFFFFFD13C6C7%C0FD08C6CEC6C7AFFFFFFFC7C6C6C2C0C6C6C6C2BECAFFAFFFFFFFAFFFFF%FFAFFFFFFFAFFFFFFFAFCFCEC9C2C7C6C6C7CEC8C7FD05C6CDCFCFC9CFCE%CDC7CDCEFFAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFA9FFA8FFA9FFA8FFA9FF%A8FFAFC7A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6%C6CDA7C6A5FFA9FFAFCFC6BC8EBC9EC6C6C79BFFA9FFA9FFA9FFA8FFA9FF%A8FFA9FFA8FFAFFFA9CBBDBD9EC6A6845AAFCAC7A4C6C6C6A4C6C7CCC7CC%C7CCC7CCA7FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFFFAFFFFFFFAFFFFFFFAF%FFFFFFC8FD04C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6%CFCFC6C7CFFFFFFFAFCDBCB2B1C8C6C6C6C9C4C4C4FFFFFFAFFFFFFFAFFF%FFFFAFFFFFFFCAFFC4C4C1FEC77E05055AFFC9C6C6CCC8CDC6CCC7CDC7CD%C7CDC7CEAFFFFFFFAFFFFFFFAFFFFFFFAFFFFFAFFFA9FFAFFFA9FFAFFFA9%FFAFFFA4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6%FFA7C6C6FFA9FFAFFFA8C7BCBCC0C6C6C6C0C4BDBDA2FFAFFFA9FFAFFFA9%FFAFFFA9FFC3BDBDC3C0C6C6CF0505F82FA9CAC0CD84A9A8C9C6CCC7CDC7%CDC7CCC8FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFFFAFFFAFFFAFFFAFFFAFFF%AFFFAFCEFD19C6CEFFCDC6CCCFFFAFFFFFFFC9FD06C6FEC2C4BDC4AFFFAF%FFAFFFAFFFAFFFAFFFC3C4BDC3C0C6C6C6CA2E058459AFCAC82E05068BFF%C9C6CDC7CDC7CCC8FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFA8FFA9FFA8FF%A9FFA8FFA9FFA8FFA9C7A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6%A4C6C6C6CAFFA5C6A4FFAFFFA8FFAFFFA5C6C0C69EC2C1C69BBEBDCBA9FF%A9FFA8FFA9FFA8FFA2BD9BC3C0C69EC6C6FF5959AF85A8C9A605F8055AAF%C9C8C8CDC7CDC9FFA9FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFFFAFFFAFFFAF%FFAFFFAFFFAFFFFFFFAECCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6%CCC6C6C8FFFFC7C6CDFFFFAFFFAFFFAFCFC6C6C6BDB2B7C1C9BDC4CAFFAF%FFAFFFAFFFAFFFAFC4BDC4FD05C6C7CAFFAFAFAFFFC8CF0527A88BAFCFC8%FFAEFFFFFFAFFFFFFFAFFFAFFFAFFFAFFFAFFFAFFFFFA9FFAFFFA9FFAFFF%A9FFAFFFA9FFAFFFA7C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6%C8FFFFCFC6C6A5FFAFFFA9FFAFFFA9C8C6C18EB78EBCC0C4BDCBA9FFAFFF%A9FFAFFFA8FFC3BDC0C6C6C6C0C6C6C9CAFFFFFFC9C6CA5A06AF85FFC9C6%A8FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFA8CDFD12C6C8FFFFFFA5C6C6CEAFFFAFFFAFFFAFFF%A8C6C6BD8EB7C1FEC2C4AFFFAFFFAFFFAFFFFD04C4C6FEFD07C6C9CAFFC8%C6C6CEFFAF85FFFFC8C6CDAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFFFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA9CEA5C6A4C6C6C6A4C6%C6C6A4C6A4C6A4CDCAFFFFFFA7C6A4C6A8FFA8FFA9FFA8FFA9FFA6C6C0C2%9FC6C6C1A2FFA9FFA8FFA9FF9BBEBDBD9EC79AC19EC6C0C6A4C6C6C69EC6%C6C6A4CFFFFFCBC9C0C6A4CEA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF%A8FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFCFCEC7C7C6CCC6%C6C6CCC6CDC9FD05FFAFC7C6C6C8FFAFFFAFFFAFFFAFFFAFFFC6C6C6FEC6%C6C6C3BDC4AFFFAFFFC4C4BDC4C1FEBCB2B6FD04C6CCC6C6C6FEC6C6C6FE%C7C9C9C9C6C6C6FEC6CDAEFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFAF%FFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFA9AFFFFFFFCFCACFC9CFCF%FD07FFA9C8C6C6A4CFAFFFA9FFAFFFA9FFAFFFA9C8C6C6C0C6C6C6C1BEBD%C4A9FFA9C4BDBEC2C6C0BD8EBCC6C6C6C9A5C6C6C6A4C6C6C6A4C6C6C6A4%C6C6C6A4C6C6C6A8FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFFFAFFFAFFF%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFFD0EFFAEC7C6C6C6CFAFFFAF%FFAFFFAFFFAFFFAFFFA8FD07C6BDC4BDCBAFFFBDBEC2C6C6C6C0C2C6C6C6%CFAFFD15C6A8FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFFFA9FFA9AFA9FFA9AF%A9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA8FD07FFAFFFAFAEA6C6C6C6A4CE%A9AFA9FFA9AFA9FFA9AFA9FFA9AFA5C6C0C69EC6C6C29BBEA2AFA2BDBCC6%9EFD05C6C0CEA9CEC6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6%A8FFA9AFA9FFA9AFA9FFA9AFA9FFA9FFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFCFFFAFFFA7CDFD05C6CFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFCFC6C6C1B7BCC6C6C4BDC4A8CBC3FD04C6C7C6C6%C6CFAFFFC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CDAFFF%AFFFAFFFAFFFAFFFAFFFAFFFFFA9FFAFFFA9FFAFFFA9FFAFFFA9FFAFFFA9%FFAFFFA9FFAFFFA9FFAFAFA8CEA4C6A4C6C6C6A4C6C8CFA9FFAFFFA9FFAF%FFA9FFAFFFA9FFAFFFA9C8C6C28EB2C1C6C1C4BDBDBDC7C6C6C0BD8EC1C6%CFAFAFA7C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4CFAF%FFA9FFAFFFA9FFAFFFA9FFAFFFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF%AFFFAFFFAFFFAFFFAFFFAFFFAFCFC8C7C6FEC7CEA8FFAFFFAFFFAFFFAFFF%AFFFAFFFAFFFAFFFAFFFA7C6C6C2BCC7C6C7BDC4BDC8C6C6C6C28EB7C1CE%AFFFAFC8FD09C6FEFD0EC6C7FFAFFFAFFFAFFFAFFFAFFFAFFFFFA9AFA9FF%A9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA8FF%A8FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AF9EC6C6C69EC6%C2BD9BC2C6C69EC6C0C29FCEA9AFA9CFC6C6A4C6C6C6A4C6C6C69EC6C6C6%A4C6C6C6A4C6C6C6A4C6C6C6A8FFA9AFA9FFA9AFA9FFA9AFA9FFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFCEFD05C6C3BD%C3FD07C6CEAFFFAFFFC8C6C7FEC6C6C6CCC6C6C0C7C6C6C6CCC6C6C6FEC6%C6C6CCC6C6C6CFAFFFAFFFAFFFAFFFAFFFAFFFFFAFAFA9FFAFAFA9FFAFAF%A9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FF%AFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA7FD05C6BDC3FD04C6C0C6C6%C9A9FFAFAFA8C7A5C7A4C6C6C6A4C6C6C09EC7C6C6A4C6C6C6A4C7C0C6A4%C6C6C6A6FFAFAFA9FFAFAFA9FFAFAFA9FFFFAFFFAFFFAFFFAFFFAFFFAFFF%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFC7C6C6C7C1C3C1C2BCC7C6C6C6CD%AFFFAFFFAFCFC6CEC7FD10C6C7C0C7FD05C6CDAFFFAFFFAFFFAFFFAFFFAF%FFAFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AF%A9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FF%A9C8C0C2BDBD9FC18EB29AC6C0C7A9FFA9AFA9FFA6C6A7C8C6C6A4C6C6C6%A4C6C6C6A4C6C6C6A4C6A4C69EC6C6C6A4C6A6AFA9FFA9AFA9FFA9AFA9FF%A9FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFADC8BDC4C2FEC1B7B1BDC6C7AFFFAFFFAFFFAFCDC6FFC8C6C6CCC6C6C6%CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6CEAFFFAFFFAFFFAFFFAFFFAF%FFFFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAF%A9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FFAFAFA9FF%AFFFBDBEBDC6C6C6C1C2C0C6AEAFA9FFAFAFA9FFC7C6A8CFC6C6A4C6C6C6%A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6A7AFA9FFAFAFA9FFAFAFA9FF%AFFFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFC4BDC7FD06C6C2CAA9FFAFFFAFFFAFCCC6CFFFCDFD16C6C7FFAFFFAF%FFAFFFAFFFAFFFAFFFFFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AF%A9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AF%A9AFA9AFA9AFA9AFA9FFBDC2A4C6C0C69EC6C0BD9BC4A8AFA9AFA9AFA5C6%A6FFC9C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6C6A4C6C6CEA9FFA9AF%A9AFA9AFA9AFA9AFA9FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFA9CAC4C3FD08C6C3C4BDC4AFFFAFFFAFCEC6CCAFFFCEC6%C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6C6C6CCC6CDAFFFAFFFAFFFAFFFAFFF%AFFFAFFFFFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9%AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9FFA9AFA9%FFA9C4BDC3C0C6C0C6C6C6C0BCC0C2BDC4BDCBA9FFA9AFA8C6C6CEA9FFC9%C6A4C6C6C6A4C6C6C6A4C6C6C6A4FD04C6CDA9AFA9FFA9AFA9FFA9AFA9FF%A9AFA9FFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%FFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAF%CBBDC4C1FD06C6C28EC2C6C4BDC4CAAFAFFFAFFFA6C6C6CFFFFFCFC7FD0F%C6CEAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFAFAFA8AFA9AFA8AFA9AFA8AFA9%AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8%AFA9AFA8AFA9AFA8AFA9AFA8AFA9AF9BBDC2C69EC694B79EC694B294C6C2%BD9BCAA9AFA8AFA9AFA4C6A4AEA9FFFFCEA5C6A4C6A4C6C6C6A4C6C6C6A5%CFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9FFFFAFFFAFFFAFFFAFFFAFFF%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFF%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFC4BDC6C6FEBCB2B1C2BCB7B1BDC6C7%BDC4CAFFAFFFAFFFAFCFC6C6C6CFAFFFFFFFCFCEC8CCC6C6C6CCC7CEA7FF%AFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFFFAFA9AFA9AFA9AFA9AFA9AFA9%AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9%AFA9AFA9AFA9AFA9AFA9AFA9AFA8CA9BC7C6C6C6C28EBCC0C2B6BCC0C6C6%C39BFFA9AFA9AFA9AFA9CFC6C6A4C8A7AFA9FD05FFCFFFA8AFA9AFA9AFA9%AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9FFAFAFFFAFAFAFFFAFAFAFFFAFAF%AFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFF%AFAFAFFFAFAFAFFFAFAFC4C4BDC3FD0EC6C2CBA9FFAFAFAFFFAFAFA9FFC8%C6C6C6C7CEA7FFAFFFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAF%FFFD04AFFFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9%AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA2BD9B%C3FD04C6C0C69EC6C0C69EC6C0C69EC6A1C4A8AFA9AFA8AFA9AFA8AFA8C9%A5C7A5C8A7AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF%A9AFA8FFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAF%FFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFA9C4BDC4C7%C7BCC3FD0DC6C3BDC4CAAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAF%AFAFFFAFAFAFFFAFAFAFFFAFAFAFFFAFAFAFFFFD04AFFFA9AFA9AFA9AFA9%AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9%AFA9AFA9AFA9AFA9AFA9AFA9AFA9CBBDBDC2C694B28EBCC6C6C0C6C6C6C0%C6C6C6C0C6C1BDBDBEA2AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9%AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9FFAFAFAFA9AFAFAF%A9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AF%AFAFA9AFAFAFA9AFAFAFA9AFAFAFA2C4C3C6BBB7B7B7BCFD0DC6BDC4BDC4%A9AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAF%A9AFAFAFA9AFAFAFA9FD04AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AF%A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AF%A8AFA9A99BC7C6C18EB28EC1FD04C69EC6BCBC9EC6C0C69EC3BDBE9BC4A9%AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9AFA8%AFA9AFA8AFA9AFA8AFA9FFFD12AFFFAFFFAFAFAFFFFD19AFCBA2C9C6C6C6%C2BCC7C6C6C8CDC6FEBCB7B1BDFD04C6C1C4BDC4BDFD2AAFA9AFA9AFA9AF%A9AFA9AFA9AFA9AFA9AFA9AF845857A8A98383AFA9AFA9AFA9AFA9AFA9AF%A9AFA9AFA9AFA9AFA9AFA9AFA2C4BDBDC0FD07C6C0CFA6C6C6C28EB294C6%C6C6C0C6BDBDBDBEA8AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AF%A9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9FFAFA9AFAFAFA9AFAFAFA9%AFAFAFA9AFAFAEA9823333575E33337DFFAFAFA8AFAEAEA8AFA8AE84AFAF%AFA9AFAFAFA9AFA2BEBDC4C1FD09C6A9CEC6C6C0C3B7C2FD05C6C3BDC4BD%CBAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF%AFA9AFAFAFA9AFAFAFA9AFAFA9AF84AFA9AF84AFA9AF84AFA9AFA8833357%2C5733332C572D57FD048156815C8156815C8156815C815D828282A1BEBD%BD9AC6C6C69EC6C6C69EC6A5AFA6C6C0FD05C69EC6C0C69EC4BDBDA2AFA9%AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84%AFA9AF84AFA9AF84FFAFA9AFAFAFA9FD07AFA9AE57573357335733573357%578180818081808180818081808180818081808180C4BDC4BDC7FD04C6C0%FD04C6CFA9CEFD05C6FEFD06C6C3C4BDCBAFAFA9AFAFAFA9AFAFAFA9AFAF%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFA9AF%A9AFA9AFA9AFA9AF84AD82815C5D3333325733333257335756815C815C81%5C815C815C815C815C815C815CA0BDC4BDC2FD04C69AB7BCC6C0C6A8AFA7%FD05C6BCBCC0FD04C6C2BDBDA2AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AF%A9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AF85FFAFAFAFA9AFAF%AFA8AD81815C818081575733573357335733573333578180815C81808180%818081808180815C81A1C4BDC3FD04C6C1B78EB7C6C6A48182A6FD04C6B6%B7B2B7C0C6C6C6C1C4BDA9A9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAF%AFA9AFAFAFA9AFAFAFA9AFAFAFA9AFAFAFA9FD04AF84AFA9AF84A7818156%815C81568156332C5733332C5733332C57335D5C815C815C8180572C5756%5732815C8156C3BDBD9FC6C0C69EC694B799C6C0A4568180C6C0C6BCB28E%B78EBCFD04C69ACA85AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AFA9AF%84AFA9AF84AFA9AF84AFA9AF84AFA9AF84AF85FFFFA9AF82818081808181%818081805D33573357335733573357335D808181818081575D3357335733%5781815C81C3C4C2FD0BC680815DA4C6C6C6BDB1B7B7B7B6FD04C6C9A2AF%AFAFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9AFA9FFA98383FFA9AFA9AF%A9AFA9AFA9AFA9AFA9AFAF83825C815C815C815C815C815C815C5D325733%3332573333325733815C815C813233333332573333325756815CC3BDFD05%C6C0C6C6C6C0C6A4815C8180C6C0C6C1B28EB78EBCFD04C6C1BEBDCAA9AF%A9AFA8AFA9AFA8AFA9AFA8AFA9AFA8AFA9A983833333575758AFA8AFA9AF%A8AFA9AFA8AFA9FF815C8180815C8180815C8180815C81805D3357335733%57335733575D815C81805D335733573357335733335D81A0C3FD0CC65D81%5CA5FD04C6C1BDBCC2FD06C6BDC4BDCAA9AFA9AFA9AFA9AFA9AFA9AFA9AF%A9AFA9AF5733335733333358A9FFA9AFA9AFA9AFA9AFA9AFAF5C8156815C%8156815C8156815C81568156332C5733332C57335756815C81568156572C%5733332C57333357A19BC39EC6C0C69EC6C1C19EC6C0C67A815C817AC6C0%C69EFD05C6C0C69EC6C6C29BBEBDA8A8A9A8A9A8A9A8A9A8A9A8A9A8A9A8%A9A8582D332C5733332C5883A9A8A9A8A9A8A9A8A9A8FF81808181818081%81818081818180818181575D575D3357575D578781818081815733573357%3357333357C4BDC4C1FD05C6BCB7B2BDC6C6C6A581815CA5FD0BC6FEC6C6%C1C4BDC4BDFFA9FFA9FFA9FFA9FFA9FFA9FFA9FFA9FF7C57335733573357%3383A9FFA9FFA9FFA9FFA9FFFF5C815C815C815C815C815C815C815C815C%815C815C5D5681805756815C815C81573332573333323357BEBDC4C2C6C0%C6C6C6C1B78EB78EC2C6C65C815C8180C6C6C6C0C6C6C6C0C6C1BCBBC6C6%C6BDC4BDBDA2FFA8A9A8A9A8A9A8A9A8A9A8A9A8CB7D333333325733332C%82A8A9A8A9A8A9A8A9A8A9A8FF8180815C8180815C8180815C8180815C81%80815C81808180815D575C818081808157573357335733C3BDC4BDC7FD05%C6C28EB7B7B2BBC6A4815C815DA4FD08C6C1B7B2B7BCC6C6C3BDC4BDA783%CBA8CBA8CBA8CBA8CBA8CBA8CBA8A8575733573357333358FFA8CBA8CBA8%CBA8CBA8CBA956815C8156815C8156815C8156815C8156815C8156815C81%568156575C815C815C5D2D332C332D579BBEBDC39EBC9AC19EC6C0BC8EB7%94C6C0A45C81568180C6C0C6C0C69EC6C6C28EB78EB79EC6C1BD9BBE7C5D%57A7A8CAA2CBA8A9A2CBA8A9A2CBA8A82C3333332C57337CA8CBA8A9A2CB%A8A9A2CBA2FF818181808181818081818180818181808181818081818180%8181815781818180818181575D575D7BC4BDC4C1BDB2B7B6FD04C6C7C1C6%C6C6808180815DA4FD08C6C1B7B2B7B6C6C6C7BDC4BDA65C81818182CACA%CBA8CBA8CBA8CBA8CBA258575733577DA8A8CBA8CBA8CBA8CBA8CBA8CBCB%5C815C815C815C815C815C815C815C815C815C815C815C815C8180575681%5C815C81805D56815C819BBEC2C68EB78EB7C0FD07C6C0815C815C8180C6%C0C6C6C6C0C6C6C6C1BDBCC1C6C6C6C3BDC380815C815C815CA6A7CAA2CB%A2CAA2CBA2CAA2837C7D7CCBA8CAA2CBA2CAA2CBA2CAA2CBA2CA815C8180%815C8180815C8180815C8180815C8180815C8180815C815D57808180815C%8157817CA681C3BDC7C6C2B7BDC1FD09C6808180815CA4FD10C6C2BEA081%81815C8180815C8181A7A2CBC4CBA2CBA8CB7CCACACBA2CBA8CBA2CBCACB%A2CBCACAA681A75C8156815C8156815C8156815C8156815C8156815C8156%815C81568132815C815C81567C9BBDBDC4BDC3A4C6C6C69EC6C0C69EC6C0%C69EC6A48156815C817AC6C0C69EC29ABC99C6C6C69EC6C0C69EC7BDC39B%C3A18256815C8156815C817CA7A2CAA2CAA17CA2CAA2CAA2CAA2C4A2CAA2%A87C825C8156AD8180818181808181818081818180818181808181818081%81818081815D578181815CA6BDC4BDC4BDC4C0FD08C6FEFD05C6A45C8181%815CC7C6C6C0BDB2B7B2B7BCFD08C6C4BDC4BDC4BDA68181808181815C81%808181A7A7A758CAC4CAA2CAA2CAA1A78282808181818081A75C815C815C%815C815C815C815C815C815C815C815C815C815C815C8133575C815C81A0%BEBDBEBDBEC2C6C0C6C6C6C0C6C1BC9AC2C6C6C0C680815C815C81A4C6C6%BC8EB795B78EB7C0C6C0C6C6C6C0C6BDBDBDC4BDBD9B815C815C815C815C%815C815C8156575C8180815C815C815C815C815C815C8156AD8180815C81%80815C8180815C8180815C8180815C8180815C8180815C5757815C8180C3%BDC4BDC4BDC7FD06C6C1B7B2B78EBDC6C6C6A55D815C8181C6C6C6FD06B7%8EC2FD07C6C3BDC4BDC4BDC47B8180815C8180815C818081808157815C81%80815C8180815C8180815C818081A756815C8156815C8156815C8156815C%8156815C8156815C8156815C812C5D80815681A0BD9BC4BDC39EC6C0C69E%C6C6BC8EB78EB78EC2C6C67A815C815681A4C69EBD8EB78EB78EB79EC6C0%C69EC6C0C69FBEBDBE9BC4BDA656815C8156815C8156815C815657568156%815C8156815C8156815C8156815CA7%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--3 Bn%AI5_BeginGradient: (Unnamed gradient 21)(Unnamed gradient 21) 1 2 Bd[<00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001010101010101010101><0000000000000000000000000000000000000000000000000000000000000000010101010101010102020202030303040405050606070708090A0B0C0D0E0F101113141617191B1D1F><000000000000000000000000000000000000000000000000000000000000000000000000010101010101010102020202020303030404040505060607070809090A0B0C0D0E0F101112>01 %_Br[0 0 0 0 1 87 0 %_BS%_0 0 0 0 1 87 0 Bs0.003922 0.121569 0.070588 0 1 50 97.8022 %_BS%_0.003922 0.121569 0.070588 0 1 50 97.8022 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 5)(Unnamed gradient 5) 0 2 Bd[<101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A090909090909090908080808080808080707070707070707060606060606060505050505050504040404040404040303030303030202020202020201010101><1414141415151516161616171718181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223242425252627272829292A2B2B2C2D2D2E2F2F30313132333434353636373839393A3B3C3D3D3E3F4040414243444545464748494A4A4B4C4D4E4F5050515253545556575758595A5B5C5D5E5F60616263636465666768696A6B6C6D6E6F707172737475767778><CECECECECECECFCFCFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D3D3D3D3D4D4D4D5D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9DADADADBDBDBDCDCDCDDDDDDDEDEDFDFDFE0E0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBECECECEDEDEEEEEFEFF0F0F0F1F1F2F2F3F3F4F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>01 %_Br[0.003922 0.470588 1 0 1 50 100 %_BS%_0.003922 0.470588 1 0 1 50 100 Bs0.062745 0.078431 0.807843 0 1 60.989 0 %_BS%_0.062745 0.078431 0.807843 0 1 60.989 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 8)(Unnamed gradient 8) 0 4 Bd[<1211100F0E0D0C0C0B0A090808070706050504040303030202020101010100000000000000><00000101010202020203030303040404040405050505050505050606060606060606060606>001 %_Br<24232221201F1E1D1C1C1B1A19191818171616151515141413131313121212121212>0001 %_Br<0000010101020202020303030404040505050506060607070708080808090909090A0A0A0B0B0B0B0C0C0C0C0D0D0D0D0E0E0E0F0F0F0F101010101011111111121212121313131314141414141515151516161616161717171717181818181819191919191A1A1A1A1A1A1B1B1B1B1B1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1F1F1F1F1F1F1F2020202020202020212121212121212121222222222222222222222222232323232323232323232323232323232324242424242424242424><7271706F6E6D6C6B6A69686766656463626161605F5E5D5C5B5A59585756565554535251504F4F4E4D4C4B4A494948474645444443424140403F3E3D3D3C3B3A3A393837373635343433323131302F2F2E2D2D2C2B2B2A292928272726252524232322222120201F1F1E1E1D1C1C1B1B1A1A19191817171616151514141313131212111110100F0F0E0E0E0D0D0C0C0C0B0B0A0A0A09090908080807070706060606050505040404040303030303020202020201010101010101000000000000000000>001 %_Br[0 0.023529 0 0 1 50 95.6044 %_BS%_0 0.023529 0 0 1 50 95.6044 Bs0.070588 0 0 0 1 28.5714 37.9121 %_BS%_0.070588 0 0 0 1 28.5714 37.9121 Bs0.14 0 0 0 1 30.5085 16.4835 %_BS%_0.14 0 0 0 1 30.5085 16.4835 Bs0 0.447059 0 0 1 33.3333 0 %_BS%_0 0.447059 0 0 1 33.3333 0 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp5 Bn%AI5_BeginGradient: (Linear Gradient 1)(Linear Gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Linear Gradient 2)(Linear Gradient 2) 0 7 Bd[<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br[0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 1)(Radial Gradient 1) 1 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[1 0 50 0 %_BS%_1 0 50 0 Bs0 0 50 100 %_BS%_0 0 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Radial Gradient 2)(Radial Gradient 2) 1 7 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0F0EFEEEDECEBEAE9E8E7E6E5E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D8D7D6D5D4D4D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C6C6C5C4C3C3C2C1C1C0BFBEBEBDBCBCBBBABAB9B8B8B7B6B6B5B4B4B3B2B2B1B1B0AFAFAEADADACACABABAAA9A9A8A8A7A7A6A6A5A4A4A3A3A2A2A1A1A0A09F9F9E9E9D9D9C9C9B9B9A9A9A999998989797979696959594949493939392929191919090908F8F8F8E8E8E8D8D8D8C8C8C8B8B8B8A8A8A8A89898988888888878787878786868686858585858584848484848383838383838282828282828282818181818181818181808080808080808080808080808080808080808080808080>101 %_Br0<807F7E7D7C7B7A797877767574737271706F6F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A49484746454443424140>101 %_Br<0000010102020303040405050607070808090A0A0B0C0C0D0E0E0F10111112131314151616171819191A1B1C1D1D1E1F202021222324252526272829292A2B2C2D2E2E2F30313233343435363738393A3B3B3C3D3E3F40414243434445464748494A4B4C4D4D4E4F505152535455565758595A5A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F80><40403F3F3F3F3E3E3E3E3D3D3D3C3C3C3C3B3B3B3A3A3A3939393838373737363636353535343433333332323131313030302F2F2E2E2D2D2D2C2C2B2B2B2A2A29292928282727262626252524242323222222212120201F1F1E1E1E1D1D1C1C1B1B1A1A191919181817171616151514141313131212111110100F0F0E0E0D0D0C0C0B0B0A0A0909080807070606050504040303020201010000>101 %_Br<80808181828283838484858586868787888889898A8A8B8B8C8C8D8D8E8E8F8F90909191929293939494959596969797989899999A9A9B9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0D1D1D2D2D3D3D4D4D5D5D6D6D7D7D8D8D9D9DADADBDBDCDCDDDDDEDEDFDFE0E0E1E1E2E2E3E3E4E4E5E5E6E6E7E7E8E8E9E9EAEAEBEBECECEDEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br1<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1C1D1E1F202122232425262728292A2B2C2D2E2F30303132333435363738393A3B3C3C3D3E3F40414243444546464748494A4B4C4D4E4E4F50515253545455565758595A5A5B5C5D5E5F5F6061626364646566676868696A6B6B6C6D6E6F6F70717272737474757677777879797A7B7B7C7C7D7E7E7F7F80>001 %_Br<FFFEFEFEFDFDFCFCFBFBFAFAF9F9F8F8F7F7F6F6F5F5F4F4F3F3F2F2F1F1F0F0F0EFEFEEEEEDEDECECEBEBEBEAEAE9E9E8E8E7E7E7E6E6E5E5E4E4E4E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDCDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D2D1D1D1D0D0CFCFCFCECECECDCDCDCDCCCCCCCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C2C1C1C1C1C1C1C0C0C0C0C0C0C0BFBFBFBF><80818282838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A8A9AAABACADAEAFB0B0B1B2B3B4B5B6B6B7B8B9BABBBBBCBDBEBFC0C0C1C2C3C4C5C5C6C7C8C8C9CACBCCCCCDCECFCFD0D1D2D2D3D4D5D5D6D7D8D8D9DADADBDCDCDDDEDFDFE0E1E1E2E3E3E4E4E5E6E6E7E8E8E9E9EAEBEBECECEDEEEEEFEFF0F0F1F1F2F2F3F3F4F4F5F5F6F6F7F7F8F8F9F9F9FAFAFBFBFBFCFCFCFDFDFDFEFEFEFEFFFFFFFF>001 %_Br[0 1 1 0 1 29.0909 0 %_BS%_0 1 1 0 1 29.0909 0 Bs0 0.5 1 0 1 51.0204 16.4671 %_BS%_0 0.5 1 0 1 51.0204 16.4671 Bs0 0.25 1 0 1 56.1404 30.5389 %_BS%_0 0.25 1 0 1 56.1404 30.5389 Bs0.5 0 1 0 1 50 47.6048 %_BS%_0.5 0 1 0 1 50 47.6048 Bs1 0 0 0 1 45 62.5749 %_BS%_1 0 0 0 1 45 62.5749 Bs1 0.5 0 0 1 39.0625 80.5389 %_BS%_1 0.5 0 0 1 39.0625 80.5389 Bs0.75 1 0 0 1 50 99.7006 %_BS%_0.75 1 0 0 1 50 99.7006 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 2)(Unnamed gradient 2) 0 2 Bd[<1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A09090909090909090909080808080808080808080707070707070707070606060606060606050505050505050504040404040404030303030303030202020202020201010101><141414141414141414141414141414141414141414141414141415151515151515151515151515151516161616161616161617171717171717171818181818181919191919191A1A1A1A1A1B1B1B1B1C1C1C1C1C1D1D1D1D1E1E1E1F1F1F1F202020212121222222232323242424252525262626272728282829292A2A2A2B2B2C2C2D2D2E2E2F2F2F3030313132323334343535363637373838393A3A3B3B3C3C3D3E3E3F4040414142434344454546474748494A4A4B4C4C4D4E4F4F5051525253545556565758595A5A5B5C5D5E5F6060616263646566676868696A6B6C6D6E6F707172737475767778><CECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECECFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFCFD0D0D0D0D0D0D0D0D0D0D0D0D1D1D1D1D1D1D1D1D1D1D1D2D2D2D2D2D2D2D2D3D3D3D3D3D3D3D3D4D4D4D4D4D4D4D5D5D5D5D5D5D6D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9D9DADADADADBDBDBDBDBDCDCDCDCDDDDDDDDDEDEDEDEDFDFDFE0E0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E6E6E6E7E7E7E8E8E8E9E9E9EAEAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F6F6F7F7F7F8F8F9F9FAFAFBFBFCFCFDFDFEFEFFFF>01 %_Br[0.003922 0.470588 1 0 1 50 100 %_BS%_0.003922 0.470588 1 0 1 50 100 Bs0.062745 0.078431 0.807843 0 1 74.7253 0 %_BS%_0.062745 0.078431 0.807843 0 1 74.7253 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Offset Squares Pattern)(Offset Squares Pattern) 0 0 55.0781 55.0801 [%AI3_Tile(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR0 0 m0 55.0801 L55.0781 55.0801 L55.0781 0 L0 0 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR26.1436 52.3262 m26.1436 29.4307 L3.0313 29.4307 L3.0313 52.3262 L26.1436 52.3262 Lf25.0264 50.123 m5.8906 50.123 L5.8906 32.4961 L25.0264 32.4961 L25.0264 50.123 Lf*U*u5.8906 50.123 m25.0264 50.123 L25.0264 32.4961 L5.8906 32.4961 L5.8906 50.123 Ln10.0313 34.2578 m24.1338 34.2578 L24.1338 48.3613 L10.0313 48.3613 L10.0313 34.2578 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0235 0.64 0.78 0.0039 k 0.0235 0.64 0.78 0.0039 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR22.4082 48.793 m8.3057 48.793 L8.3057 34.6895 L22.4082 34.6895 L22.4082 48.793 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.1059 0.9294 0.8314 0.0196 k 0.1059 0.9294 0.8314 0.0196 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR52.6943 24.7852 m52.6943 1.6758 L28.9355 1.6758 L28.9355 24.7852 L52.6943 24.7852 Lf47.6777 22.582 m30.0527 22.582 L30.0527 4.957 L47.6777 4.957 L47.6777 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0 0 1 k 0 0 0 1 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR30.0527 22.582 m50.6982 22.582 L50.6982 4.957 L30.0527 4.957 L30.0527 22.582 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.4315 0 0.8301 0 k 0.4315 0 0.8301 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR47.4199 21.252 m32.2393 21.252 L32.2393 6.5029 L47.4199 6.5029 L47.4199 21.252 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.4941 0.9412 0 0 k 0.4941 0.9412 0 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR27.5391 27.5391 m27.5391 0 L0 0 L0 27.5391 L27.5391 27.5391 Lf25.4316 26.1445 m2.7529 26.1445 L2.7529 2.1699 L25.4316 2.1699 L25.4316 26.1445 Lf*U*u4.9561 7.4004 m22.582 7.4004 L22.582 25.0273 L4.9561 25.0273 L4.9561 7.4004 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0471 0.0118 0.6314 0 k 0.0471 0.0118 0.6314 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR22.582 5.6738 m4.9561 5.6738 L4.9561 25.0273 L22.582 25.0273 L22.582 5.6738 Lf20.3887 21.3281 m7.5811 21.3281 L7.5811 10.0313 L20.3887 10.0313 L20.3887 21.3281 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0.9137 0 0.498 0 k 0.9137 0 0.498 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR6.9355 8.7363 m21.0371 8.7363 L21.0371 22.8379 L6.9355 22.8379 L6.9355 8.7363 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.8235 0 0.0039 0 k 0.8235 0 0.0039 0 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR55.0781 55.0801 m55.0781 27.5391 L27.5391 27.5391 L27.5391 55.0801 L55.0781 55.0801 Lf52.3252 50.9688 m30.292 50.9688 L30.292 28.9355 L52.3252 28.9355 L52.3252 50.9688 Lf*U*u30.292 50.9688 m52.3252 50.9688 L52.3252 28.9355 L30.292 28.9355 L30.292 50.9688 Ln32.4951 30.0527 m50.1221 30.0527 L50.1221 47.6777 L32.4951 47.6777 L32.4951 30.0527 Ln*U%AI6_EndPatternLayer) &(0 O 0 R 0.0275 0.2078 0.4431 0.0039 k 0.0275 0.2078 0.4431 0.0039 K) @(%AI6_BeginPatternLayer*u0 J 0 j 1 w 4 M []0 d0 XR50.1221 30.0527 m32.4951 30.0527 L32.4951 48.9727 L50.1221 48.9727 L50.1221 30.0527 Lf*U%AI6_EndPatternLayer) &(0 O 0 R 0 0.8902 0 0 k 0 0.8902 0 0 K) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR34.9063 33.749 m49.0078 33.749 L49.0078 47.8506 L34.9063 47.8506 L34.9063 33.749 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat 4)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7769.8833 8488.2305 m-7678.0479 8488.2305 L-7678.0479 8483.9512 L-7769.8833 8483.9512 L-7769.8833 8488.2305 Ln0 O0.695313 0.671875 0.636719 0.738281 k-7769.6631 8485.5498 m-7770 8485.6172 -7769.4814 8485.8066 -7769.8833 8485.6641 C-7769.8379 8485.5449 -7769.7725 8485.457 -7769.6631 8485.5498 Cf-7679.1675 8485.7168 m-7680.2524 8486.4785 -7681.6816 8485.709 -7682.8701 8486.1953 C-7683.0098 8486.2266 -7682.8345 8485.7773 -7683.1484 8485.877 C-7684.3008 8486.4697 -7686.1162 8486.1162 -7687.5195 8485.6602 C-7687.4346 8485.542 L-7687.7017 8485.457 -7688.0283 8485.8477 -7688.3115 8485.793 C-7688.3135 8485.7148 -7688.2207 8485.6816 -7688.2861 8485.5723 C-7688.3574 8485.8105 -7688.7983 8485.6826 -7688.9185 8485.8594 C-7689.0303 8485.7676 -7689.0195 8485.5801 -7689.1641 8485.4746 C-7689.3262 8485.7441 L-7689.7769 8486.3848 -7690.4209 8485.7002 -7691.0361 8486.0313 C-7691.0063 8485.9688 -7690.9453 8485.9199 -7690.9941 8485.8594 C-7691.9814 8486.248 -7693.2168 8486.1738 -7694.3208 8486.3184 C-7694.2769 8486.2236 -7694.2363 8486.0508 -7694.3008 8485.9434 C-7694.3555 8486.2266 -7694.6963 8486.2979 -7694.9922 8486.3535 C-7695.1255 8486.0625 -7695.4995 8486.6191 -7695.8467 8486.458 C-7695.8169 8486.3945 L-7696.0732 8486.6992 -7696.1973 8486.2188 -7696.4053 8486.584 C-7696.5684 8486.3555 L-7696.6807 8486.7656 -7696.9395 8486.1426 -7697.1514 8486.3516 C-7697.1445 8486.4346 L-7697.3442 8486.5352 -7697.4482 8486.3281 -7697.6338 8486.3984 C-7697.6514 8486.3516 L-7698.0854 8486.458 -7698.3379 8486.2305 -7698.3271 8486.5498 C-7698.4795 8486.293 -7697.9063 8486.4336 -7698.1455 8486.0586 C-7699.5732 8486.3906 -7701.0459 8486.3242 -7702.4834 8486.332 C-7702.6465 8486.2031 -7702.7505 8486.1641 -7702.7871 8486.042 C-7702.9307 8486.1074 -7703.3281 8486.1016 -7703.4585 8486.2656 C-7703.4102 8486.2588 -7703.5513 8486.1016 -7703.6274 8486.085 C-7703.8887 8485.9648 -7703.9131 8486.4375 -7704.2002 8486.293 C-7704.0859 8486.209 -7704.0469 8486.1055 -7704.0854 8485.9863 C-7704.3301 8486.2354 -7704.6577 8486.1953 -7704.9473 8486.2773 C-7704.9023 8486.2236 -7704.8325 8486.1914 -7704.8433 8486.0908 C-7705.1602 8486.374 -7705.4209 8486.0313 -7705.6982 8486.21 C-7705.5947 8486.0254 L-7706.0415 8485.8008 -7705.7266 8486.4121 -7706.1128 8486.2793 C-7706.02 8486.2207 -7706.0527 8486.1484 -7706.0361 8486.0732 C-7706.3965 8486.4092 -7706.9795 8486.2979 -7707.3389 8486.4121 C-7707.3174 8486.3857 -7707.3232 8486.3359 Y-7707.7148 8486.377 -7708.1245 8486.2734 -7708.5552 8486.4199 C-7708.7119 8486.3369 -7708.5039 8485.9688 -7708.9185 8486.0361 C-7708.9033 8486.4082 -7709.6221 8486.1895 -7709.3779 8486.6094 C-7709.7319 8486.5488 -7710.2925 8486.4092 -7710.5283 8486.5352 C-7710.3691 8486.3945 -7710.7007 8486.082 -7710.4063 8486.0508 C-7710.6289 8485.8252 L-7710.5957 8485.6738 -7710.3999 8485.877 -7710.4707 8485.6855 C-7710.6182 8485.7002 -7711.0479 8485.8477 -7711.1797 8485.7871 C-7711.4531 8486.0146 -7711.7041 8486.4395 -7712.1465 8486.4863 C-7711.9385 8486.3418 -7712.2646 8486.0762 -7712.1235 8486.0137 C-7712.7407 8486.7227 L-7712.8877 8486.7402 -7712.7725 8486.4316 -7712.9854 8486.5273 C-7712.9746 8486.626 -7713.0674 8486.6865 -7713.1318 8486.7676 C-7713.1875 8486.7227 -7713.7441 8486.8594 -7713.8081 8486.4922 C-7713.8735 8486.3516 -7713.5684 8486.418 -7713.7314 8486.2871 C-7714.0029 8486.29 -7714.0151 8486.416 -7714.2871 8486.4209 C-7714.2925 8486.373 L-7714.4717 8486.3184 -7714.8213 8486.5273 -7714.6265 8486.7305 C-7714.5015 8486.7402 -7714.6738 8486.5098 -7714.4888 8486.6172 C-7714.6152 8486.8281 -7714.9312 8486.8887 -7715.2031 8486.8906 C-7715.1104 8486.834 -7715.1216 8486.7354 -7715.0845 8486.6328 C-7715.4497 8486.9199 -7715.8369 8487.0098 -7716.2451 8487.1309 C-7716.2515 8487.3047 -7716.0928 8486.8145 -7716.0327 8486.9063 C-7716.5557 8486.665 -7717.1128 8487.248 -7717.5479 8486.8945 C-7717.4766 8486.8652 -7717.5098 8487.1426 -7717.5146 8487.0938 C-7717.7666 8487.0723 -7717.7549 8486.8193 -7717.9189 8486.9121 C-7717.9355 8486.7656 -7718.1255 8486.9609 -7718.2944 8487.0059 C-7718.3818 8487.1113 -7718.3384 8486.9336 -7718.1914 8486.918 C-7718.4268 8487.042 -7719.3691 8487.2695 -7719.9131 8487.0537 C-7719.9023 8487.1514 -7720.2471 8487.4121 -7720.3721 8487.4023 C-7720.3232 8487.1738 L-7720.4375 8487.0361 -7720.7422 8487.1934 -7720.7632 8486.998 C-7721.0303 8487.2754 -7719.7344 8486.7617 -7720.0957 8486.9756 C-7720.1895 8486.7852 -7720.5991 8487.3398 -7720.5215 8487.0273 C-7720.7725 8487.0361 -7721.0161 8487.293 -7721.2559 8487.0801 C-7721.1865 8487.1162 -7721.0522 8486.7617 -7721.2549 8486.7793 C-7721.6123 8486.8193 -7721.3564 8486.8887 -7721.6465 8486.9648 C-7721.8281 8487.0586 L-7721.8398 8487.2813 -7722.1475 8487.0273 -7722.0146 8487.2773 C-7722.0586 8487.0938 -7722.5337 8487.3906 -7722.4971 8487.0215 C-7722.4473 8486.7305 L-7722.6016 8486.752 -7722.7002 8487.0361 -7722.8213 8487.165 C-7722.8418 8487.1387 -7722.8823 8487.0801 -7722.8745 8487.0332 C-7722.8994 8487.4785 -7723.2432 8486.9961 -7723.4268 8487.3398 C-7723.7505 8487.1855 -7724.2495 8487.3242 -7724.4023 8487.0488 C-7724.6514 8487.1836 -7724.8784 8487.3418 -7725.1621 8487.248 C-7725.1055 8487.2061 -7725.0283 8487.1934 -7725.0122 8487.0977 C-7725.1904 8486.9658 -7725.2344 8487.084 -7725.3975 8487.1563 C-7725.3608 8487.0898 -7725.7539 8486.8945 -7725.9521 8486.7383 C-7726.1992 8486.8711 -7726.1143 8487.1113 -7726.1392 8487.2578 C-7726.3652 8486.8184 -7726.8379 8487.541 -7727.1211 8487.1426 C-7727.0352 8487.082 -7726.7598 8486.9258 -7726.9658 8486.8154 C-7727.1919 8486.377 -7727.4219 8487.1387 -7727.7861 8486.9297 C-7727.6968 8487.293 L-7727.8594 8487.0684 -7728.2334 8487.5059 -7728.1963 8487.1338 C-7728.3184 8487.2656 -7728.6265 8487.0137 -7728.5859 8487.3682 C-7729.1846 8487.0684 -7730.0425 8487.5498 -7730.4102 8486.9121 C-7730.4961 8486.9727 -7730.7104 8486.9121 -7730.6665 8487.0938 C-7730.5239 8487.293 -7730.4673 8486.9521 -7730.4141 8487.0879 C-7730.4912 8487.0986 -7730.5078 8487.1953 -7730.5161 8487.2441 C-7730.7021 8487.1641 -7730.8486 8487.1387 -7730.6729 8486.8428 C-7731.0869 8486.623 -7731.1001 8487.4473 -7731.6274 8487.3066 C-7731.6035 8487.1602 -7731.6436 8487.1055 -7731.7979 8487.1289 C-7732.0903 8487.3809 L-7732.4312 8487.3223 -7732.2842 8487.0449 -7732.2925 8486.7969 C-7732.4746 8486.8398 -7732.6973 8486.8281 -7732.7803 8487.0137 C-7733.0015 8486.7002 L-7732.8398 8486.9258 -7733.1514 8486.8506 -7733.2368 8486.9121 C-7733.1514 8486.8506 L-7733.1846 8486.7441 -7733.3955 8486.8105 -7733.5024 8486.8418 C-7733.4766 8486.9961 -7733.2617 8487.0586 -7733.1445 8487.1025 C-7733.2373 8487.2129 -7733.3823 8487.1865 -7733.5059 8487.3164 C-7733.4648 8487.0723 -7733.8027 8487.1426 -7733.9473 8487.1162 C-7734.1133 8487.0645 -7734.1348 8487.3359 -7734.1831 8487.3281 C-7734.1875 8487.2012 -7734.4541 8487.3066 -7734.3247 8487.1289 C-7734.2681 8487.0879 -7734.1953 8487.252 -7734.1016 8487.1387 C-7734.2109 8487.0449 -7734.1982 8486.8252 -7734.4258 8486.9863 C-7734.5967 8487.1074 -7734.3818 8487.4688 -7734.7061 8487.3145 C-7734.6211 8487.2529 -7734.6055 8487.1563 -7734.5391 8487.0684 C-7734.8433 8486.9414 L-7734.8564 8487.1641 L-7734.8975 8487.1074 -7734.8691 8487.0879 -7734.8877 8487.0586 C-7734.9785 8487.293 -7735.3521 8487.1309 -7735.4209 8487.3945 C-7735.5742 8487.418 -7735.7441 8487.2402 -7735.8906 8487.2139 C-7735.8623 8487.1953 L-7736.0415 8487.0645 -7736.2793 8487.1504 -7736.4297 8487.3008 C-7736.4219 8487.252 L-7736.5195 8487.2344 -7736.7505 8487.2695 -7736.8735 8487.3994 C-7737.1201 8487.2314 -7736.9561 8486.5596 -7737.2295 8486.8398 C-7737.48 8486.8477 -7737.6221 8487.248 -7737.5215 8487.3906 C-7737.9717 8487.2402 -7738.4834 8487.6025 -7738.9009 8487.2578 C-7738.9658 8487.3477 -7738.9248 8487.4033 -7739.0586 8487.457 C-7739.7197 8487.3682 -7740.4551 8487.7207 -7740.9814 8487.2832 C-7740.79 8487.1895 -7740.9688 8487.0586 -7740.9727 8486.9336 C-7741.1309 8487.1328 -7741.1631 8486.7266 -7741.2197 8487.0684 C-7741.2041 8487.2695 -7741.2197 8487.3672 -7741.0337 8487.4482 C-7741.4282 8487.5566 -7742.0283 8487.5566 -7742.2471 8487.3682 C-7742.1377 8487.4609 -7742.2227 8487.5234 -7742.3086 8487.584 C-7742.2803 8487.2617 -7742.5713 8487.2139 -7742.7915 8487.3281 C-7742.8223 8487.5234 L-7742.9658 8487.3223 L-7743.0503 8487.3848 -7743.0591 8487.7324 -7743.2773 8487.5449 C-7743.2891 8487.4688 -7743.3018 8487.3916 -7743.3418 8487.3359 C-7743.5693 8487.4961 -7743.8906 8487.7676 -7744.1377 8487.6016 C-7744.3398 8487.3164 L-7744.4453 8487.3477 -7744.6235 8487.5186 -7744.4375 8487.6016 C-7744.8594 8487.4297 -7745.1309 8487.4082 -7745.2646 8487.1602 C-7745.9912 8487.7617 -7747.0459 8487.7871 -7747.8906 8487.7441 C-7747.8652 8487.5977 L-7748.0923 8487.4609 -7747.9834 8487.8535 -7748.1416 8487.752 C-7748.0684 8487.6113 -7748.3145 8487.4482 -7748.1362 8487.2773 C-7748.4609 8487.123 -7748.5547 8487.5313 -7748.7656 8487.5977 C-7748.7979 8487.79 -7748.5957 8487.4746 -7748.6367 8487.7178 C-7748.6729 8487.7871 -7749.0859 8487.5674 -7749.1362 8487.8594 C-7749.2178 8487.7441 -7749.1543 8487.5313 -7749.1104 8487.4121 C-7749.3086 8487.5537 L-7749.5513 8487.2139 -7748.7559 8486.9473 -7749.0107 8486.5273 C-7749.1934 8486.5723 L-7749.3682 8486.2695 -7748.71 8486.2305 -7749.1689 8486.126 C-7749.3682 8486.2695 -7749.5381 8486.6914 -7749.3608 8486.8193 C-7749.7754 8486.9004 -7749.5527 8487.5137 -7749.9985 8487.4893 C-7750.1201 8487.3184 -7749.6416 8487.4482 -7749.7275 8487.209 C-7749.9375 8486.9746 -7750.1484 8487.3398 -7750.3354 8487.2578 C-7750.1279 8487.3672 -7750.3032 8487.6602 -7750.4375 8487.7148 C-7750.6641 8487.5762 -7750.29 8487.4395 -7750.6113 8487.4092 C-7750.6641 8487.5762 -7750.9595 8487.7031 -7750.7041 8487.8193 C-7750.8203 8488.2012 -7751.0381 8487.7148 -7751.2129 8488.0098 C-7751.3174 8487.7402 -7750.8823 8487.3906 -7751.2354 8487.2568 C-7751.1792 8487.5146 -7751.6704 8487.6074 -7751.4839 8487.9893 C-7751.6221 8487.916 -7751.6367 8487.7129 -7751.5361 8487.5537 C-7751.7334 8487.3945 -7752.0151 8488.0254 -7752.0801 8487.5137 C-7752.1479 8487.7773 L-7752.21 8487.6914 -7752.2983 8487.626 -7752.3994 8487.4844 C-7752.5732 8487.4785 -7752.96 8487.8418 -7752.9443 8487.4434 C-7753 8487.4844 -7753.3975 8487.4668 -7753.2441 8487.7402 C-7752.9971 8487.9082 -7752.96 8487.541 -7752.8223 8487.9121 C-7752.9971 8487.6094 -7753.1787 8487.9521 -7753.3213 8488.0537 C-7753.3447 8487.9004 L-7753.4297 8487.9609 -7753.6255 8487.9258 -7753.6787 8488.0938 C-7753.6133 8488.0059 -7753.6475 8487.9004 -7753.7148 8487.8633 C-7753.8042 8488.0977 L-7754.1494 8488.2139 -7753.8857 8487.6855 -7754.2217 8487.7529 C-7753.9663 8487.5723 L-7754.0225 8487.6113 -7754.1367 8487.3916 -7754.2979 8487.4648 C-7754.3604 8487.6777 -7754.4775 8487.9346 -7754.5313 8488.1016 C-7754.7207 8488.1953 -7754.6162 8487.8604 -7754.8027 8488.0801 C-7754.5586 8487.8223 L-7754.5215 8487.752 -7754.7231 8487.4688 -7754.9761 8487.4746 C-7755.1377 8487.5488 -7755.3887 8487.8574 -7755.1338 8487.9746 C-7755.2607 8487.9785 -7755.4385 8487.8477 -7755.3379 8487.6914 C-7755.6255 8487.7656 -7755.2998 8487.9209 -7755.5479 8488.0537 C-7755.6494 8487.9121 -7755.9658 8487.709 -7756.1563 8487.502 C-7755.8975 8487.1436 L-7756.0693 8487.1387 L-7755.8467 8486.8535 -7756.1826 8486.9209 -7756.0566 8486.6191 C-7756.1743 8486.5723 -7756.3169 8486.6748 -7756.4307 8486.7529 C-7756.0864 8487.2383 -7756.8159 8487.416 -7756.7158 8487.8574 C-7757.1875 8487.9785 -7757.0107 8486.7832 -7757.5024 8487.4746 C-7757.4219 8487.5898 -7757.6533 8487.9258 -7757.3564 8487.7979 C-7757.6494 8487.75 -7757.5557 8488.2412 -7757.9014 8488.0586 C-7757.6455 8487.877 -7758.1763 8487.6113 -7757.8066 8487.3477 C-7757.8311 8487.4922 -7757.6001 8487.458 -7757.5435 8487.418 C-7757.6641 8487.248 -7757.5186 8486.9727 -7757.8184 8486.9727 C-7758.0015 8487.0146 -7758.2524 8487.0234 -7758.2158 8487.2529 C-7758.2085 8487.5068 -7757.9365 8487.2266 -7758.0537 8487.4824 C-7758.4185 8487.5703 -7758.4795 8487.1855 -7758.6304 8487.6348 C-7758.3999 8487.5986 -7758.3423 8487.8594 -7758.3467 8488.0332 C-7758.6143 8488.1387 L-7758.5625 8487.9697 L-7758.9922 8487.8496 -7758.6895 8488.2754 -7759.1055 8488.2305 C-7759.3008 8487.8984 L-7759.2017 8487.6113 -7758.6953 8488.0254 -7758.7695 8487.5596 C-7759.04 8487.541 -7759.1299 8487.7773 -7759.3848 8487.6572 C-7759.3281 8487.6172 -7759.2505 8487.6055 -7759.1943 8487.5645 C-7759.2915 8487.5488 -7759.3877 8486.9307 -7759.7734 8487.293 C-7759.9727 8487.4336 -7759.8262 8487.458 -7759.8311 8487.6328 C-7760.2656 8487.6855 -7760.3955 8487.8633 -7760.6753 8487.8906 C-7760.6177 8487.5498 -7761.1699 8487.8574 -7760.8608 8487.5098 C-7760.7188 8487.709 -7760.0903 8487.6895 -7759.9365 8487.3643 C-7760.0947 8486.9609 -7759.5952 8487.4209 -7759.5024 8487.0137 C-7759.8506 8487.0039 -7759.8335 8486.6074 -7759.8896 8486.3477 C-7759.9863 8486.3281 -7760.0801 8486.4395 -7760.1377 8486.4785 C-7760.1787 8486.7227 -7760.0522 8486.7207 -7760.0449 8486.9727 C-7760.4336 8486.9063 -7760.8081 8487.042 -7761.0225 8487.2813 C-7761.1523 8487.1602 -7761.1113 8486.916 -7760.9575 8486.8906 C-7761.4199 8486.9648 -7761.9141 8486.9307 -7762.3535 8486.8574 C-7762.0693 8487.2568 -7762.8433 8486.9512 -7762.6494 8487.2832 C-7762.4141 8487.373 -7762.2119 8487.6572 -7762.3418 8487.8359 C-7762.4888 8487.8105 -7762.3369 8487.6602 -7762.3984 8487.5762 C-7762.5859 8487.793 -7762.6895 8487.2266 -7762.8735 8487.5703 C-7762.4512 8487.4414 -7762.7915 8487.084 -7762.7139 8486.7705 C-7763.0186 8486.9473 -7762.7007 8486.5488 -7763.0024 8486.5488 C-7763.3057 8486.7227 -7763.6787 8486.8594 -7764.0161 8486.9258 C-7764.4399 8486.6309 -7765.0898 8486.9209 -7765.4683 8486.9336 C-7765.6665 8486.7754 -7765.5322 8486.4209 -7765.7471 8486.3594 C-7765.9995 8486.3672 -7765.5601 8486.7402 -7765.9336 8486.5801 C-7765.8975 8486.5098 L-7766.0107 8486.5898 -7766.5825 8486.2695 -7766.6929 8486.7773 C-7766.5776 8486.3945 L-7766.6475 8486.3594 -7766.7119 8486.4473 -7766.7695 8486.4873 C-7766.7725 8486.3633 -7766.8535 8486.25 -7766.7402 8486.168 C-7766.9707 8485.9033 -7767.2241 8486.21 -7767.4746 8486.2207 C-7767.3135 8486.4473 L-7767.7422 8486.625 -7768.0293 8486.3994 -7768.4443 8486.4785 C-7768.4316 8486.2578 L-7768.6787 8486.3906 L-7768.6182 8486.1738 -7768.8447 8486.0361 -7768.9751 8486.2168 C-7768.3335 8485.6738 L-7768.1553 8485.8047 -7768.5283 8485.9414 -7768.4165 8486.1602 C-7768.3213 8486.3516 -7767.9375 8486.29 -7767.8755 8486.0762 C-7768.0225 8486.0527 -7768.0293 8486.1016 -7768.1436 8486.1816 C-7768.1919 8485.873 -7767.9688 8485.8848 -7767.8584 8485.6777 C-7767.9355 8485.6914 -7768.0449 8485.5977 -7768.0615 8485.6953 C-7767.9102 8485.5449 -7767.7578 8485.5215 -7767.5059 8485.5137 C-7767.6763 8485.6348 -7767.4131 8485.7041 -7767.4775 8485.793 C-7767.4575 8485.5215 -7767.2168 8485.4375 -7766.9053 8485.5137 C-7766.6831 8485.8281 -7766.3208 8485.3105 -7765.96 8485.3984 C-7766.1064 8485.6738 -7766.2935 8485.8945 -7766.5127 8486.0059 C-7766.2861 8486.1436 -7766.2607 8485.998 -7766.0337 8486.1367 C-7765.9238 8485.9307 -7765.8457 8485.6172 -7765.5503 8485.4922 C-7765.5342 8485.6953 L-7765.2666 8485.5898 -7765.2666 8485.29 -7764.9258 8485.3477 C-7764.3418 8485.4473 -7763.7407 8485.4473 -7763.2949 8485.4727 C-7763.2783 8485.6748 L-7763.0303 8485.2412 -7762.4521 8485.5146 -7762.1182 8485.3223 C-7761.5503 8485.5176 -7760.8848 8485.1289 -7760.5938 8485.4785 C-7759.5913 8485.3223 -7758.7148 8485.1689 -7757.6768 8485.2441 C-7757.8516 8485.5391 L-7757.6655 8485.3223 -7757.7305 8485.709 -7757.5479 8485.665 C-7757.7578 8485.4297 -7757.2949 8485.3594 -7757.1665 8485.1777 C-7756.7041 8485.4082 -7756.1104 8485.1563 -7755.7007 8484.9512 C-7755.6846 8485.1543 L-7755.2705 8484.7734 -7754.7759 8485.1074 -7754.2598 8485.1689 C-7754.2007 8485.2529 -7754.1074 8485.4434 -7753.9536 8485.4209 C-7753.6738 8485.0938 -7753.5273 8485.1162 -7753.1167 8484.9121 C-7752.8169 8484.9121 -7752.3301 8484.9932 -7752.0254 8485.1201 C-7750.8975 8484.6602 -7749.7456 8484.9551 -7748.5732 8484.6777 C-7748.4888 8484.916 L-7747.3521 8484.4063 -7745.9541 8484.8682 -7744.9839 8484.6074 C-7745.0776 8485.0146 L-7744.7734 8485.1387 -7744.3843 8484.9082 -7744.4619 8484.6191 C-7744.1567 8484.7441 -7743.7007 8484.4209 -7743.5068 8484.7568 C-7743.1953 8484.832 -7743.1255 8484.5674 -7742.8662 8484.5137 C-7742.2422 8484.668 -7742.0107 8484.6328 -7741.4224 8484.5566 C-7741.5684 8484.5313 L-7741.6328 8484.6201 -7741.6387 8484.793 -7741.4922 8484.8193 C-7741.2725 8484.7061 -7740.6846 8484.9297 -7740.9033 8484.4434 C-7740.2754 8484.7227 -7739.4385 8484.2139 -7738.8271 8484.5938 C-7738.8789 8484.4609 -7738.7246 8484.4346 -7738.6602 8484.3457 C-7738.1089 8484.3398 -7737.5293 8484.6113 -7737.0898 8484.3848 C-7737.0024 8484.4512 -7737.2295 8484.6113 -7737.0049 8484.625 C-7736.8721 8484.5723 -7737.0024 8484.4512 -7736.8384 8484.377 C-7735.9453 8484.1289 -7735.0303 8484.6328 -7734.2188 8484.5674 C-7732.7754 8484.3105 -7731.2695 8484.4414 -7729.8867 8484.3984 C-7729.9023 8484.4961 L-7729.4395 8484.123 -7728.8159 8484.877 -7728.4463 8484.3164 C-7728.3369 8484.4092 -7728.0283 8484.3594 -7728.1094 8484.5488 C-7727.7407 8484.2842 -7727.0771 8484.7969 -7726.5439 8484.4609 C-7726.5928 8484.4521 -7726.6211 8484.4727 -7726.6777 8484.5146 C-7726.1392 8484.7305 -7725.6641 8484.4346 -7725.0957 8484.6309 C-7725.1533 8484.6729 -7725.2583 8484.7031 -7725.2754 8484.8008 C-7725.0557 8484.9873 -7724.7549 8484.3887 -7724.6348 8484.8594 C-7724.5088 8484.8555 -7724.5449 8484.623 -7724.6221 8484.6367 C-7723.3779 8484.8193 -7722.0498 8484.5186 -7720.7549 8484.4121 C-7719.8271 8484.6934 -7720.6982 8485.2041 -7719.9663 8484.8535 C-7719.9063 8484.9434 -7719.9229 8484.6738 -7719.9131 8484.7705 C-7719.6299 8484.6396 -7719.4717 8485.2969 -7719.2754 8485.0508 C-7719.3564 8484.7617 -7719.1445 8484.8887 -7719.1387 8484.7129 C-7718.5713 8484.9004 -7718.4575 8485.1602 -7718.0098 8484.9414 C-7718.0435 8485.0938 L-7717.5186 8484.6641 -7716.9102 8484.8945 -7716.4673 8484.3984 C-7713.5728 8484.3066 -7710.7983 8484.0332 -7707.9761 8483.9756 C-7705.1865 8484.0703 -7702.4551 8483.8477 -7699.6221 8484.1113 C-7698.9585 8484.5098 -7698.9087 8484.5 -7698.1797 8484.3369 C-7698.2095 8484.4023 -7698.2549 8484.418 -7698.2061 8484.4785 C-7698.1699 8484.1504 -7697.6929 8484.4473 -7697.6235 8484.1338 C-7696.5762 8484.1953 -7695.6113 8484.1055 -7694.5337 8484.1025 C-7694.7041 8484.1387 -7694.7896 8484.4063 -7694.5869 8484.3848 C-7694.3755 8484.1738 L-7694.3408 8484.2666 L-7694.2021 8484.2188 -7694.0513 8484.0566 -7694.1943 8483.9512 C-7691.4873 8483.668 -7688.8242 8484.3242 -7686.1729 8484.2441 C-7685.5435 8484.3818 -7684.6475 8484.2568 -7683.9629 8484.1895 C-7681.9355 8484.626 -7680.1079 8484.9785 -7678.0479 8484.6738 C-7678.3169 8485.5215 -7679.1675 8485.7168 Vf-7769.2578 8485.5176 m-7769.1855 8485.6816 -7768.9497 8485.7705 -7769.1377 8485.9893 C-7769.1611 8485.8359 -7769.2822 8485.6641 -7769.2578 8485.5176 Cf-7762.9619 8487.2041 m-7762.9536 8487.1563 -7762.8721 8487.2705 -7762.8521 8487.2979 C-7762.9297 8487.3105 -7763.0024 8487.4482 -7763.0645 8487.3633 C-7762.9854 8487.3516 -7762.9976 8487.2734 -7762.9619 8487.2041 Cf-7761.3521 8487.3018 m-7761.3765 8487.4482 -7761.7207 8487.5645 -7761.9238 8487.582 C-7761.3521 8487.3018 Lf-7759.8521 8487.9033 m-7759.7227 8488.0273 -7759.7583 8488.0938 -7759.9326 8488.0908 C-7759.9453 8488.0137 -7759.8877 8487.9746 -7759.8521 8487.9033 Cf-7759.7456 8487.5723 m-7759.6211 8487.5674 -7759.5591 8487.6543 -7759.4985 8487.7383 C-7759.5029 8487.6113 -7759.7871 8487.8154 -7759.7456 8487.5723 Cf-7756.4893 8487.9961 m-7756.4111 8487.9834 -7756.2417 8487.8633 -7756.1689 8488.0254 C-7756.2505 8487.9121 -7756.5498 8488.21 -7756.4893 8487.9961 Cf-7754.9761 8487.7754 m-7754.9272 8487.7852 -7754.9072 8487.8105 -7754.8506 8487.7705 C-7754.7607 8487.8369 -7754.8555 8487.9434 -7754.9312 8487.958 C-7754.9761 8487.7754 Lf-7727.4287 8487.1895 m-7727.5923 8487.2617 L-7727.5684 8487.1162 L-7727.4287 8487.1895 Lf-7715.3574 8487.1816 m-7715.1943 8487.0898 -7715.2441 8487.3184 -7715.2168 8487.3398 C-7715.3643 8487.3555 -7715.1621 8487.1602 -7715.3574 8487.1816 Cf-7708.8486 8486.4521 m-7708.8984 8486.457 L-7708.8818 8486.1563 L-7708.8486 8486.4521 LfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe Calligraphic) -( Brush Tool/ 15 pt. Oval/ Adobe Calligraphic Brush Tool/ 15 pt) -(. Round/ Adobe Calligraphic Brush Tool/ 20 pt. Oval/ Adobe Cal) -(ligraphic Brush Tool/ 30 pt. Oval/ Adobe ArtOnPath Brush Tool/) -( Charcoal/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Oval)(1 15 15 60 60 60 60 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(15 pt. Round)(1 15 15 100 100 0 0 1 0 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(20 pt. Oval)(1 20 20 50 50 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(30 pt. Oval)(1 30 30 10 60 0 0 1 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(5 pt. Flat)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Charcoal)(1 / Unnamed Brush Pat 4/ / / / / 0 1 /  1 1 1.2 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0 0 0 0 k(White)Pc0 0 0 1 k(Black)Pc0 1 1 0 k(CMYK Red)Pc0 0 1 0 k(CMYK Yellow)Pc1 0 1 0 k(CMYK Green)Pc1 0 0 0 k(CMYK Cyan)Pc1 1 0 0 k(CMYK Blue)Pc0 1 0 0 k(CMYK Magenta)Pc0.15 1 0.9 0.1 k(C=15 M=100 Y=90 K=10)Pc0 0.9 0.85 0 k(C=0 M=90 Y=85 K=0)Pc0 0.8 0.95 0 k(C=0 M=80 Y=95 K=0)Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0)Pc0 0.35 0.85 0 k(C=0 M=35 Y=85 K=0)Pc0.05 0 0.9 0 k(C=5 M=0 Y=90 K=0)Pc0.2 0 1 0 k(C=20 M=0 Y=100 K=0)Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0)Pc0.75 0 1 0 k(C=75 M=0 Y=100 K=0)Pc0.85 0.1 1 0.1 k(C=85 M=10 Y=100 K=10)Pc0.9 0.3 0.95 0.3 k(C=90 M=30 Y=95 K=30)Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0)Pc0.8 0.1 0.45 0 k(C=80 M=10 Y=45 K=0)Pc0.7 0.15 0 0 k(C=70 M=15 Y=0 K=0)Pc0.85 0.5 0 0 k(C=85 M=50 Y=0 K=0)Pc1 0.95 0.05 0 k(C=100 M=95 Y=5 K=0)Pc1 1 0.25 0.25 k(C=100 M=100 Y=25 K=25)Pc0.75 1 0 0 k(C=75 M=100 Y=0 K=0)Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0)Pc0.35 1 0.35 0.1 k(C=35 M=100 Y=35 K=10)Pc0.1 1 0.5 0 k(C=10 M=100 Y=50 K=0)Pc0 0.95 0.2 0 k(C=0 M=95 Y=20 K=0)Pc0.25 0.25 0.4 0 k(C=25 M=25 Y=40 K=0)Pc0.4 0.45 0.5 0.05 k(C=40 M=45 Y=50 K=5)Pc0.5 0.5 0.6 0.25 k(C=50 M=50 Y=60 K=25)Pc0.55 0.6 0.65 0.4 k(C=55 M=60 Y=65 K=40)Pc0.25 0.4 0.65 0 k(C=25 M=40 Y=65 K=0)Pc0.3 0.5 0.75 0.1 k(C=30 M=50 Y=75 K=10)Pc0.35 0.6 0.8 0.25 k(C=35 M=60 Y=80 K=25)Pc0.4 0.65 0.9 0.35 k(C=40 M=65 Y=90 K=35)Pc0.4 0.7 1 0.5 k(C=40 M=70 Y=100 K=50)Pc0.5 0.7 0.8 0.7 k(C=50 M=70 Y=80 K=70)PcBb2 (Linear Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 1)PcBb0 0 0 0 Bh2 (Radial Gradient 1) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 1)PcBb2 (Linear Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Linear Gradient 2)PcBb0 0 0 0 Bh2 (Radial Gradient 2) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Radial Gradient 2)Pc(Offset Squares Pattern) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Offset Squares Pattern)Pc0 g(K=100)Pc0.100006 g(K=90)Pc0.200012 g(K=80)Pc0.300003 g(K=70)Pc0.400009 g(K=60)Pc0.5 g(K=50)Pc0.600006 g(K=40)Pc0.700012 g(K=30)Pc0.800003 g(K=20)Pc0.900009 g(K=10)Pc0.950012 g(K=5)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 2 79 255 79 0 50 Lb(giraffes+clipping masque) Ln0 Aq1 Ap0 J 0 j 1 w 4 M []0 d0 XR4154.4082 -3746.6885 m-3103.6802 -3746.6885 L-3103.6802 4167.6235 L4154.4082 4167.6235 L4154.4082 -3746.6885 LhWn0 O-3169.0557 -3807.875 m4253.0967 -3807.875 L4253.0967 4198.0166 L-3169.0557 4198.0166 L-3169.0557 -3807.875 LBb1 (Unnamed gradient 8) 461.4658 -3807.876 90 8005.8926 -1 0 0 1 16543.4863 0 Bg0.00035 8005.8926 -7426.1533 0.000325 4255.0967 -3807.876 Xm0.00036 8234.4648 -7426.1533 0.000325 4255.0967 -12042.3418 Bc0.000058 1319.6512 -7426.1533 0.000325 4255.0967 -3807.876 Bm0.000075 1715.5505 -7426.1533 0.000325 4255.0967 -2488.2246 Bm0.000202 4618.7837 -7426.1533 0.000325 4255.0967 -772.6738 Bm0.00036 8234.4648 -7426.1533 0.000325 4255.0967 3846.1099 Bcf0 BB0 Ap0.396078 0.003922 0.988235 0 k4241.1504 -3319.8975 m3628.4063 -3703.5908 2802.5332 -3511.7441 v1976.6592 -3319.8975 591.3242 -2096.876 -2097.7227 -2541.4238 c-2491.6377 -2606.5449 -2818.7344 -2768.3389 -3005.2212 -2840.2813 c-3191.709 -2912.2236 -3191.709 -2912.2236 y-3169.0557 -3807.875 l4253.0977 -3807.875 l4241.1504 -3319.8975 lf0.639216 0.184314 1 0.027451 k3378.9014 -2952.9053 m3512.6943 -2948.9512 3482.3281 -3043.7793 v3459.3291 -3115.6006 3383.5049 -3092.8857 y3497.458 -3153.6416 3417.8555 -3234.8994 v3348.2969 -3305.9014 3290.2764 -3222.3447 y3329.6426 -3311.7471 3224.2637 -3340.0117 v3145.7793 -3361.0625 3123.6182 -3266.1631 y3087.0605 -3341.8457 2999.1758 -3297.5986 v2911.2129 -3253.3125 3009.9033 -3181.0762 y2935.1563 -3207.6699 2909.834 -3132.0918 v2882.958 -3051.8809 2989.6289 -3029.1592 y2870.248 -2954.8955 2951.9434 -2890.0996 v3031.6787 -2826.8604 3087.3311 -2907.9873 y3061.3066 -2798.9287 3156.8936 -2798.6885 v3237.8652 -2798.4854 3241.4482 -2869.46 y3295.3623 -2799.6045 3361.1865 -2831.9561 v3427.0107 -2864.3096 3378.9014 -2952.9053 yf3233.1543 -3103.4043 m3114.0449 -3196.0801 3057.8311 -3415.0557 v2990.3213 -3678.0225 3069.6855 -3804.8486 y3157.1436 -3813.3438 l2922.9209 -3520.8457 3233.8105 -3138.3994 v3381.5205 -2956.6904 3233.1543 -3103.4043 yf-2118.1885 -2643.0244 m-2288.9785 -2694.0205 -2206.0596 -2806.2451 v-2143.2593 -2891.2393 -2058.1978 -2829.4473 y-2173.5181 -2957.3965 -2034.811 -3031.0469 v-1913.6084 -3095.4043 -1879.6279 -2960.9014 y-1887.3047 -3095.2715 -1740.9653 -3088.251 v-1631.9727 -3083.0225 -1648.6016 -2948.6357 y-1566.8652 -3033.0264 -1476.7007 -2937.7881 v-1386.4531 -2842.4648 -1545.0195 -2788.7207 y-1438.1401 -2792.3662 -1441.6938 -2682.1201 v-1445.4658 -2565.1133 -1590.834 -2579.9824 y-1475.0112 -2431.9492 -1608.6187 -2380.876 v-1739.0244 -2331.0244 -1771.1563 -2461.3281 y-1789.5654 -2306.6592 -1910.3682 -2346.501 v-2012.7012 -2380.252 -1983.8599 -2475.2979 y-2084.772 -2405.8809 -2152.6758 -2476.1748 v-2220.5796 -2546.4688 -2118.1885 -2643.0244 yf-1763.0776 -2853.7461 m-1583.668 -2928.6514 -1435.7979 -3229.5039 v-1258.2197 -3590.7998 -1331.3994 -3808.2041 y-1430.3027 -3808.2041 l-1189.3022 -3368.7842 -1753.3018 -2904.5996 v-2021.2686 -2684.0557 -1763.0776 -2853.7461 yf-613.2871 -2848.7871 m-457.7036 -2831.3789 -482.9331 -2935.8271 v-502.0415 -3014.9346 -592.8945 -2998.0996 y-453.499 -3051.8818 -537.5977 -3146.6592 v-611.0835 -3229.4766 -687.7075 -3145.792 y-632.2085 -3237.5684 -752.0498 -3278.1875 v-841.3062 -3308.4404 -877.334 -3209.0879 y-911.8379 -3293.6621 -1019.0635 -3254.9775 v-1126.3853 -3216.2578 -1019.0635 -3129.251 y-1103.3677 -3165.0654 -1141.0063 -3086.6992 v-1180.9531 -3003.5264 -1059.0103 -2968.709 y-1206.1836 -2901.0107 -1117.8794 -2823.6416 v-1031.6924 -2748.126 -958.0923 -2829.4434 y-1000.1411 -2715.3242 -888.7109 -2705.6523 v-794.3164 -2697.4609 -782.5205 -2773.0449 y-727.1533 -2692.9941 -646.9258 -2721.127 v-566.6997 -2749.2578 -613.2871 -2848.7871 yf-767.0796 -3024.1631 m-896.0186 -3135.0488 -938.063 -3374.8701 v-988.5557 -3662.8711 -882.4004 -3790.748 y-779.5083 -3791.2227 l-1084.0186 -3501.3438 -762.5581 -3061.5391 v-609.8267 -2852.5781 -767.0796 -3024.1631 yf0.015686 0.517647 0 0 k-157.1528 477.147 m-946.1914 1367.7578 l-665.5205 1445.7271 -284.6367 1327.0562 v-24.5029 1246.0063 -81.7451 916.1016 y43.9609 1089.5127 200.4502 764.5635 v270.6851 618.7192 156.7417 461.6543 y387.271 602.5669 478.3545 347.1348 v570.6406 88.332 446.1377 -95.8594 y611.9971 63.3828 707.7832 -170.7305 v811.1387 -423.3496 650.3037 -533.0605 y922.708 -456.6631 943.3203 -821.8711 v950.3359 -946.1719 867.71 -1027.2031 y1065.6768 -886.0176 1122.1123 -1172.2314 v1166.7891 -1398.8027 1033.6855 -1434.2734 y1274.6133 -1341.4971 1348.1875 -1635.2275 v1403.8672 -1857.5254 1249.0068 -1966.9365 y1504.3066 -1936.2285 1631.8682 -2284.6934 v1759.4307 -2633.1621 1552.6318 -2790.1201 y1703.5283 -2772.4346 1854.1113 -3006.0195 v1994.998 -3224.5605 1816.4531 -3449.0342 y2096.5439 -3387.1484 2175.0352 -3594.9941 v2271.7607 -3851.127 2090.8486 -3920.0059 y1840.8096 -3951.3828 l-157.1528 477.147 lf/BBAccumRotation (0.300523) XT0.007843 0.176471 0.988235 0 k957.0859 -1201.1953 m1722.6172 -3046.377 1840.8096 -3951.3828 y653.6182 -4096.334 l889.7109 -2151.3584 431.8223 -987.8066 v38.0874 12.7178 -704.3086 883.6108 y-348.627 1212.2212 l191.5552 643.9863 957.0859 -1201.1953 vf0.031373 0.12549 0.960784 0 k-1545.353 -676.8965 m-1557.3188 -747.3857 -1237.4414 -916.3779 v-919.5054 -1084.3447 -472.9844 -751.0723 -395.7744 -418.6963 c-330.4199 -137.3477 -430.4092 642.8711 y-1560.2798 -448.2803 -1545.353 -676.8965 vfu0 0 0 0 k-1882.1543 -132.1855 m-1882.7734 -28.6094 -744.9233 1440.0518 -554.2422 264.1768 c-363.5649 -911.6982 -1321.2065 -856.3125 -1511.3945 -810.3906 c-1802.1543 -740.1855 -2026.1543 -348.1855 y-1882.1543 -132.1855 lf%_u%_0 R%_0.129412 0 0.023529 0 K%_2.4 w%_-1882.1543 -132.1855 m%_-1882.7734 -28.6094 -744.9233 1440.0518 -554.2422 264.1768 c%_-363.5649 -911.6982 -1321.2065 -856.3125 -1511.3945 -810.3906 c%_-1802.1543 -740.1855 -2026.1543 -348.1855 y%_-1882.1543 -132.1855 l%_s%_U0 Ap0 Au0 J 0 j 1 w 4 M []0 d0 XR-1882.1543 -132.1855 m-1882.7734 -28.6094 -744.9233 1440.0518 -554.2422 264.1768 c-363.5649 -911.6982 -1321.2065 -856.3125 -1511.3945 -810.3906 c-1802.1543 -740.1855 -2026.1543 -348.1855 y-1882.1543 -132.1855 ln0 O0.129412 0 0.023529 0 k-1869.1768 -124.9814 m-1869.1772 -121.2236 -1869.6572 -128.9355 -1869.3882 -126.6563 c-1869.2813 -125.748 -1869.1128 -124.8477 -1868.9229 -123.9531 c-1868.5356 -122.1299 -1867.2383 -117.7256 -1869.3511 -125.1484 C-1869.0225 -123.9932 -1868.6509 -122.8506 -1868.2627 -121.7139 c-1867.3838 -119.1426 -1866.374 -116.6172 -1865.3135 -114.1172 c-1864.7305 -112.7432 -1864.123 -111.3789 -1863.5049 -110.0205 c-1860.8984 -104.2939 -1865.46 -113.999 -1863.1367 -109.2207 c-1855.2451 -92.9912 -1845.9043 -77.4551 -1836.333 -62.1738 c-1830.0835 -52.1943 -1823.6372 -42.3398 -1817.0776 -32.5615 c-1815.3652 -30.0098 -1813.6416 -27.4629 -1811.9126 -24.9219 c-1811.0283 -23.623 -1810.1416 -22.3262 -1809.2534 -21.0293 c-1808.8047 -20.374 -1808.3545 -19.7197 -1807.9048 -19.0645 c-1805.3354 -15.3262 -1810.1284 -22.2813 -1808.356 -19.7158 c-1804.4272 -14.0313 -1800.458 -8.375 -1796.4609 -2.73828 c-1778.4624 22.6406 -1759.8203 47.5625 -1740.7676 72.1602 c-1694.9502 131.3096 -1646.6504 188.5508 -1596.4199 243.9961 c-1582.708 259.1318 -1568.8325 274.1191 -1554.8091 288.9658 c-1547.6929 296.5 -1540.5313 303.9912 -1533.333 311.4478 c-1531.5977 313.2456 -1529.8579 315.0405 -1528.1172 316.834 c-1525.1172 319.9253 -1530.7275 314.1548 -1527.7197 317.2427 c-1526.8457 318.1401 -1525.9707 319.0361 -1525.0957 319.9321 c-1521.2954 323.8232 -1517.4814 327.7002 -1513.6582 331.5684 c-1484.0225 361.5542 -1453.6719 390.8369 -1422.5605 419.2905 c-1391.6216 447.5869 -1359.8823 475.0161 -1327.2476 501.3413 c-1311.2617 514.2363 -1295.0396 526.8394 -1278.5859 539.1328 c-1270.4883 545.1831 -1262.3242 551.1436 -1254.1045 557.0269 c-1252.147 558.4282 -1250.1836 559.8218 -1248.2188 561.2129 c-1247.6836 561.5918 -1244.3433 563.9419 -1247.5771 561.6689 C-1246.5967 562.3584 -1245.6143 563.0449 -1244.6318 563.7314 c-1240.3936 566.6934 -1236.1348 569.6255 -1231.8623 572.5381 c-1200.1621 594.1494 -1167.4707 614.3511 -1133.6484 632.4766 c-1117.6792 641.0347 -1101.4336 649.0791 -1084.9248 656.5435 c-1081.0684 658.2871 -1077.1929 659.9883 -1073.3062 661.6631 c-1071.3784 662.4932 -1069.4448 663.3105 -1067.5098 664.123 c-1066.5459 664.5273 -1065.5806 664.9277 -1064.6152 665.3276 c-1061.0078 666.8223 -1065.2637 665.0752 -1063.0962 665.9531 c-1055.166 669.166 -1047.1646 672.2026 -1039.1074 675.082 c-1008.7515 685.9312 -977.3994 694.2344 -945.4336 698.603 c-941.7949 699.1006 -938.1465 699.5313 -934.4946 699.9199 c-933.6123 700.0137 -928.0303 700.5356 -931.29 700.248 C-929.1846 700.4336 -927.0776 700.5923 -924.9697 700.7393 c-917.5327 701.2588 -910.0776 701.5034 -902.623 701.5117 c-888.0522 701.5273 -873.4829 700.4507 -859.0771 698.2656 c-851.9761 697.1885 -844.9248 695.792 -837.9365 694.1367 c-834.5889 693.3438 -831.2622 692.4668 -827.9502 691.5386 c-826.2935 691.0747 -824.644 690.585 -822.9976 690.0869 c-820.1851 689.2363 -825.3203 690.8306 -822.519 689.9409 c-821.4248 689.5938 -820.335 689.2329 -819.2451 688.8701 c-805.4844 684.2905 -792.1646 678.4297 -779.417 671.5215 c-766.1543 664.334 -753.5986 655.8818 -741.7764 646.5225 c-728.519 636.0269 -719.9409 627.7905 -708.0405 614.6758 c-651.272 552.1138 -619.8457 473.2207 -597.084 393.1333 c-580.5039 334.7959 -569.5366 275.0684 -560.8579 215.0967 c-550.9639 146.7256 -544.6621 77.7559 -542.7764 8.68945 c-539.729 -102.9033 -548.5293 -212.4834 -578.6699 -320.5488 c-579.9727 -325.2207 -577.7119 -317.2051 -579.043 -321.8545 c-579.4399 -323.2402 -579.8438 -324.625 -580.248 -326.0088 c-581.0513 -328.7617 -581.876 -331.5078 -582.708 -334.252 c-584.4897 -340.1289 -586.3521 -345.9805 -588.2661 -351.8145 c-591.8638 -362.7813 -595.7275 -373.6592 -599.8081 -384.4541 c-603.7725 -394.9424 -607.9971 -405.3311 -612.4321 -415.6279 c-614.5181 -420.4707 -616.6699 -425.2842 -618.8623 -430.0801 c-619.9478 -432.4541 -621.0527 -434.8203 -622.1646 -437.1826 C-620.0034 -432.5908 -621.9258 -436.6729 -622.3398 -437.5361 c-623.0859 -439.0908 -623.8418 -440.6406 -624.5991 -442.1904 c-633.8193 -461.0527 -643.9492 -479.4678 -654.8965 -497.3818 c-660.187 -506.0391 -665.7041 -514.5566 -671.3984 -522.9531 c-672.0737 -523.9492 -672.7549 -524.9414 -673.4355 -525.9336 C-670.4194 -521.54 -672.834 -525.0518 -673.4443 -525.9268 c-674.812 -527.8867 -676.1968 -529.8359 -677.5864 -531.7813 c-680.5767 -535.9639 -683.6294 -540.1025 -686.7212 -544.2109 c-698.3535 -559.667 -710.7476 -574.5469 -723.7764 -588.8438 c-726.8423 -592.209 -729.9551 -595.5303 -733.0947 -598.8252 c-733.8765 -599.6455 -734.6626 -600.4619 -735.4482 -601.2773 c-738.2236 -604.1582 -732.7153 -598.4844 -735.5088 -601.3408 c-737.3477 -603.2217 -739.2041 -605.0859 -741.0669 -606.9434 c-747.665 -613.5205 -754.4297 -619.9287 -761.3188 -626.2002 c-774.8594 -638.5264 -788.978 -650.2119 -803.5454 -661.3037 c-806.9971 -663.9326 -810.4829 -666.5166 -813.9878 -669.0742 c-815.7344 -670.3486 -817.4907 -671.6094 -819.25 -672.8662 c-820.1279 -673.4932 -821.0098 -674.1162 -821.8911 -674.7393 C-818.2266 -672.1494 -822.3052 -675.0186 -823.0234 -675.5166 c-830.3633 -680.6133 -837.8203 -685.54 -845.3618 -690.332 c-874.9688 -709.1455 -906.0947 -725.5264 -938.1709 -739.7061 c-941.9604 -741.3809 -945.7676 -743.0166 -949.584 -744.6289 c-951.4873 -745.4336 -953.396 -746.2266 -955.3062 -747.0146 c-955.8857 -747.2539 -959.1577 -748.5879 -955.8262 -747.2324 C-957.0986 -747.751 -958.374 -748.2627 -959.6499 -748.7734 c-967.5903 -751.9531 -975.5894 -754.9863 -983.6289 -757.9053 c-999.5273 -763.6797 -1015.6182 -768.9209 -1031.8394 -773.7119 c-1063.4111 -783.0371 -1095.5239 -790.4961 -1127.9111 -796.3711 c-1143.542 -799.2061 -1159.2461 -801.6377 -1174.9941 -803.7275 c-1182.6938 -804.749 -1190.4067 -805.6738 -1198.1274 -806.5225 c-1201.7876 -806.9248 -1205.4502 -807.3037 -1209.1147 -807.668 c-1210.9351 -807.8496 -1212.7563 -808.0234 -1214.5776 -808.1953 c-1215.4854 -808.2803 -1216.3931 -808.3633 -1217.3008 -808.4473 c-1219.3857 -808.6377 -1215.2339 -808.2666 -1218.6865 -808.5684 c-1273.2598 -813.3379 -1328.2354 -813.9814 -1382.9072 -810.5273 c-1421.2759 -808.1035 -1459.8408 -803.9277 -1497.4399 -795.708 c-1607.4106 -771.666 -1704.2676 -701.96 -1784.5894 -625.7256 c-1858.8774 -555.2178 -1923.7695 -474.5205 -1980.5156 -389.375 c-1992.4668 -371.4424 -2004.2861 -353.3057 -2014.9893 -334.5898 C-2015.5933 -340.9219 -2016.1973 -347.2539 -2016.8013 -353.5859 C-1976.0479 -292.4561 -1935.2949 -231.3262 -1894.542 -170.1963 c-1887.2949 -159.3262 -1880.0479 -148.4561 -1872.8013 -137.5859 c-1869.3794 -132.4531 -1866.2617 -120.5762 -1873.1543 -116.5967 c-1880.5215 -112.3438 -1888.084 -121.6504 -1891.5073 -126.7852 c-1932.2607 -187.915 -1973.0137 -249.0449 -2013.7666 -310.1748 c-2021.0137 -321.0449 -2028.2607 -331.915 -2035.5073 -342.7852 c-2039.0547 -348.1064 -2040.5996 -356.0449 -2037.3193 -361.7813 c-2008.6143 -411.9775 -1974.4297 -459.542 -1939.1191 -505.2207 c-1866.9883 -598.5293 -1783.4697 -686.2881 -1684.6494 -751.5664 c-1619.8818 -794.3496 -1548.3467 -824.0771 -1471.5664 -835.5518 c-1426.1313 -842.3418 -1380.0889 -845.2598 -1334.1719 -845.5947 c-1274.1992 -846.0303 -1214.0854 -841.6641 -1154.8457 -832.2803 c-1089.2236 -821.8848 -1024.5327 -804.8711 -962.8828 -779.9912 c-895.4624 -752.7822 -832.0591 -716.4453 -775.939 -670.0723 c-714.2998 -619.1387 -662.8149 -556.3848 -623.624 -486.7617 c-576.6411 -403.2949 -547.5957 -310.6426 -531.874 -216.4229 c-511.5547 -94.6484 -512.814 30.1143 -525.4053 152.6191 c-537.4854 270.1445 -556.5767 390.2188 -601.2627 500.2773 c-629.3823 569.5332 -669.1035 636.5972 -729.6426 682.2314 c-777.3218 718.1724 -836.1606 735.3052 -895.5688 734.4023 c-962.3018 733.3882 -1027.0781 712.7109 -1087.3638 685.3467 c-1158.0278 653.272 -1223.5791 610.4971 -1285.6533 564.1938 c-1352.6533 514.2163 -1415.6455 458.9414 -1475.8188 400.978 c-1535.7827 343.2163 -1593.021 282.5898 -1647.7598 219.8633 c-1694.6357 166.1465 -1739.7266 110.8115 -1782.3145 53.6289 c-1813.2134 12.1406 -1843.5522 -30.29 -1869.3809 -75.1719 c-1876.188 -87.001 -1882.6045 -99.1143 -1887.9951 -111.6602 c-1891.7246 -120.3389 -1895.1338 -129.8291 -1895.1318 -139.3896 c-1895.1304 -147.1875 -1888.5947 -150.7402 -1881.9048 -147.0264 c-1874.3784 -142.8486 -1869.1753 -133.5234 -1869.1768 -124.9814 cfU(Adobe Calligraphic Brush Tool) 1 0 55 XP%080706053CCF1D3F71A7383F60FD2F3F0001010000007041000000000000%704200000000000070420000000031352070742E204F76616C/Adobe_Brushed_Path () XTU/BBAccumRotation (0.113912) XT0 0.06 0.69 0 k-1024.9053 1431.356 m-1299.6406 1520.3525 -1407.4321 1627.0786 v-1515.2109 1733.8022 -1793.7412 1518.2017 -1654.1021 1331.7344 c-1514.4639 1145.2671 -1344.5322 1102.2529 -1091.4277 1265.958 c-898.5498 1390.7251 -1024.9053 1431.356 yf/BBAccumRotation (0.113912) XT-207.7778 1352.2979 m95.7456 1490.3594 187.4468 1637.7979 v279.1479 1785.2354 709.709 1604.4893 609.8848 1358.3857 c510.0488 1112.2827 208.0034 1053.3945 -170.5454 1180.8271 c-459.0322 1277.9438 -207.7778 1352.2979 yf/BBAccumRotation (0.213604) XT/BBAccumShear (7.000000 -8.000000) XT0.031373 0.12549 0.960784 0 k-1277.6865 1248.1372 m-1402.9619 1005.2861 -1581.249 960.3525 v-2082.7358 833.9634 -2634.8379 225.1191 -2090.1543 -356.1855 c-1868.8496 -592.3711 -1352.0537 -683.792 -975.4746 -519.6426 c-507.2876 -315.5615 -716.3716 -6.86328 -375.2349 308.6885 c104.9575 752.8662 68.9429 1365.1113 -489.585 1614.3613 c-693.7383 1705.4673 -1191.561 1629.2168 -1277.6865 1248.1372 cf0 0.08 1 0 k-876.0459 1491.312 m-1203.2959 1956.6265 -1280.8848 2044.0996 v-1358.5059 2131.5547 -1465.6689 2178.6968 y-1229.0439 2397.1216 l-1196.3428 2221.4795 -1145.2637 2105.9604 v-1094.1802 1990.4434 -774.0127 1545.6489 y-876.0459 1491.312 lf/BBAccumRotation (0.416903) XT0.015686 0.517647 0 0 k-1312.0889 2232.3081 m-1380.6914 2133.3447 -1492.1582 2135.3184 v-1603.6084 2137.3281 -1578.373 2315.167 -1444.6611 2451.1914 c-1310.9355 2587.1997 -1157.9492 2521.6401 -1194.5742 2413.6162 c-1231.1973 2305.5889 -1243.9834 2309.2041 -1312.0889 2232.3081 cf/BBAccumRotation (0.510743) XT0 0.08 1 0 k-625.6089 1525.1758 m-477.9404 1967.8877 -457.0278 2067.25 v-436.1309 2166.6553 -452.6504 2285.8223 y-217.2744 2101.7183 l-311.667 2025.8203 -361.1572 1946.2119 v-410.647 1866.5854 -548.6865 1436.0396 y-625.6089 1525.1758 lf/BBAccumShear (24.000000 -4.000000) XT0.015686 0.517647 0 0 k-354.2432 2144.7227 m-444.457 2189.3652 -490.6665 2301.7817 v-536.8589 2414.2061 -416.4536 2432.4424 -275.6792 2331.5088 c-134.9238 2230.5576 -110.2417 2060.8525 -192.4326 2071.1436 c-274.6284 2081.4463 -277.8496 2095.1758 -354.2432 2144.7227 cf/BBAccumShear (24.000000 -4.000000) XT-1693.8936 292.2529 m-1772.1172 375.1777 -1818.9136 299.3159 v-1865.7124 223.4551 -1880.8403 190.0527 -1842.6836 166.6436 c-1804.5269 143.2344 -1491.8379 94.127 -1693.8936 292.2529 cBb1 (Unnamed gradient 5) 5635.0117 9.53223 20.1115 461.0527 -0.483842 0.16697 0.179387 0.672241 11108.3828 331.0287 Bg-237.9133 34.284 0.735842 -243.5211 -1626.9556 355.6357 Xm-7053.2124 1016.389 0.735842 -243.5211 5426.2568 -660.7529 Bc-237.9133 34.284 0.735842 -243.5211 -1626.9556 355.6357 Bm-7053.2124 1016.389 0.735842 -243.5211 -1864.8687 389.9199 Bcf0 BB/BBAccumRotation (0.175545) XT1 Ap-824.8726 1139.5049 m-811.751 960.3755 -917.7861 791.8398 -1061.7397 763.1284 c-1205.6865 734.4175 -1333.0127 856.3789 -1346.1309 1035.5303 c-1359.2407 1214.71 -1239.3315 1370.4648 -1095.3823 1399.1729 c-951.4336 1427.8638 -837.98 1318.6499 -824.8726 1139.5049 cBb1 (Unnamed gradient 5) 741.707 4109.0659 0 601.042 -0.851168 0.305676 0.14506 0.839526 13551.4473 1038.7566 Bg-511.5879 -183.7244 113.5051 -656.9037 -884.9248 1499.5244 Xm-7262.2236 -2608.052 113.5051 -656.9037 6377.2988 4107.5762 Bc-511.5879 -183.7244 113.5051 -656.9037 -884.9248 1499.5244 Bm-7262.2236 -2608.052 113.5051 -656.9037 -1396.5127 1315.7998 Bcf0 BB-841.6987 1118.4688 m-829.6831 962.459 -928.7842 814.5811 -1063.0356 788.228 c-1197.3105 761.8838 -1315.8628 867.001 -1327.8477 1023.0303 c-1339.8301 1179.0815 -1240.7319 1326.9375 -1106.4751 1353.2803 c-972.2007 1379.6206 -853.6851 1274.5156 -841.6987 1118.4688 cBb0 0 0 0 Bh1 (Unnamed gradient 21) 14036.4844 4189.877 0 232.8462 0.939093 -0.631869 0.466276 1.05623 -15797.3301 16656.2617 Bg218.6643 147.1282 108.5706 -245.9391 -1084.7676 1070.75 Bmf0 BBu0.301961 0.027451 0 0 k-840.6724 1054.3232 m-832.5532 955.2588 -902.9209 860.0542 -997.7793 841.7734 c-1092.7085 823.4834 -1176.1885 889.0913 -1184.3213 988.1221 c-1192.458 1087.2461 -1122.1479 1182.4033 -1027.2212 1200.6943 c-932.3579 1218.959 -848.8101 1153.4272 -840.6724 1054.3232 cf1 0.631373 0.627451 0.564706 k-869.1489 1051.1177 m-866.2441 983.644 -912.6104 917.0996 -972.6367 902.5117 c-1032.6865 887.9341 -1083.6807 930.8896 -1086.5591 998.353 c-1089.4185 1065.8813 -1043.1182 1132.4126 -983.0625 1147.002 c-923.041 1161.563 -872.0195 1118.6416 -869.1489 1051.1177 cf0 0 0 0 k-1008.4702 989.9468 m-1006.8335 952.4136 -1032.6416 915.418 -1066.1016 907.3447 c-1099.5786 899.2769 -1128.0176 923.188 -1129.6597 960.7173 c-1131.2988 998.2773 -1105.5103 1035.2524 -1072.0347 1043.3335 c-1038.583 1051.4033 -1010.1104 1027.5034 -1008.4702 989.9468 cfU-310.8647 1133.959 m-259.0464 949.9849 -325.8823 748.4121 -460.1904 683.7886 c-594.4961 619.1689 -745.3818 715.9521 -797.2017 899.9507 c-849.0205 1083.9819 -765.8545 1275.541 -631.5479 1340.1567 c-497.2378 1404.7563 -362.6753 1317.9556 -310.8647 1133.959 cBb1 (Unnamed gradient 5) 632.8564 4267.6152 0 598.4404 -0.767396 0.527612 0.320785 0.84005 12543.2051 -657.3917 Bg-459.241 -315.7444 252.2082 -660.4648 -447.2334 1496.7251 Xm-6463.5273 -4443.9038 252.2082 -660.4648 6016.2939 5940.6289 Bc-459.241 -315.7444 252.2082 -660.4648 -447.2334 1496.7251 Bm-6463.5273 -4443.9038 252.2082 -660.4648 -906.4746 1180.9805 Bcf0 BB-322.7139 1107.9375 m-277.0073 947.8472 -341.5728 769.5239 -466.9248 709.6987 c-592.2979 649.8774 -730.9478 731.1733 -776.6274 891.2891 c-822.3096 1051.4312 -757.7427 1229.7295 -632.3862 1289.5464 c-507.0107 1349.3633 -368.3984 1268.0713 -322.7139 1107.9375 cBb0 0 0 0 Bh1 (Unnamed gradient 21) 14207.8008 4267.3604 0 232.8452 0.779373 -0.886 0.685297 0.991254 -12801.1602 22776.9883 Bg181.4734 206.3008 159.5682 -230.8087 -549.6641 999.6152 Bmf0 BBu0.301961 0.027451 0 0 k-333.1167 1030.3545 m-303.6177 928.8174 -351.5952 812.4316 -440.2368 770.5166 c-528.9507 728.5737 -624.7495 777.0327 -654.2554 878.5298 c-683.7852 980.125 -635.8521 1096.4473 -547.146 1138.3896 c-458.4927 1180.2915 -362.6431 1131.9297 -333.1167 1030.3545 cf1 0.631373 0.627451 0.564706 k-362.2827 1006.0156 m-343.2974 940.8013 -374.1367 866.0601 -431.0898 839.1152 c-488.0718 812.1758 -549.627 843.2842 -568.5825 908.4951 c-587.5347 973.772 -556.7622 1048.4844 -499.7788 1075.4385 c-442.8232 1102.354 -381.2451 1071.2847 -362.2827 1006.0156 cf0 0 0 0 k-476.5425 917.1841 m-465.687 879.8145 -483.3452 836.9912 -515.9727 821.5635 c-548.6221 806.1357 -583.8711 823.9531 -594.7314 861.3145 c-605.5933 898.7095 -587.9507 941.5088 -555.3066 956.9482 c-522.686 972.3706 -487.4058 954.5718 -476.5425 917.1841 cfU0 Ap-1172.4946 192.0332 m-1110.4956 283.4434 -1063.458 212.332 v-1016.4219 141.2188 -1000.5137 109.3301 -1032.1069 81.8252 c-1063.7002 54.3223 -1333.9209 -27.9707 -1172.4946 192.0332 cBb1 (Unnamed gradient 5) -242.7759 -1097.6113 20.1115 460.8167 0.436848 0.114955 -0.106307 0.693502 4275.1665 863.7476 Bg205.8767 60.1432 17.7816 -243.7721 -1235.6074 248.3057 Xm3480.2336 1016.6885 17.7816 -243.7721 -4715.8408 -768.3828 Bc205.8767 60.1432 17.7816 -243.7721 -1235.6074 248.3057 Bm3480.2336 1016.6885 17.7816 -243.7721 -1029.731 308.4487 Bcf0 BBu0.05098 0.81 0 0 k11.7222 460.0068 m-98.8818 443.7949 -120.8198 290.7871 -3.33301 257.7793 c138.9043 217.8145 122.3242 476.2192 11.7222 460.0068 cf/BBAccumRotation (0.213803) XT92.832 42.6377 m9.67334 40.1875 -18.1006 -122.9619 117.936 -143.0693 c251.564 -162.8203 175.9888 45.0879 92.832 42.6377 cf/BBAccumRotation (0.213803) XT349.0073 -282.2031 m286.3247 -337.4111 257.1631 -469.9658 396.2002 -485.6768 c535.2363 -501.3887 528.4023 -352.1221 506.3008 -312.5986 c484.1309 -272.9473 411.6909 -226.9971 349.0073 -282.2031 cf/BBAccumRotation (0.213803) XT591.0205 -783.3389 m503.6826 -786.4717 496.8223 -911.5605 606.4961 -939.9697 c716.1699 -968.3799 678.3584 -780.207 591.0205 -783.3389 cf/BBAccumRotation (0.213803) XT939.416 -1570.041 m779.1514 -1567.7773 740.7041 -1819.9482 930.4551 -1870.4258 c1138.7734 -1925.8418 1099.6787 -1572.3037 939.416 -1570.041 cf/BBAccumRotation (0.213803) XT1087.457 -2605.5176 m918.376 -2619.1416 853.917 -2909.9023 1094.4297 -2920.2793 c1358.1484 -2931.6563 1268.4023 -2590.9414 1087.457 -2605.5176 cf/BBAccumRotation (0.213803) XT989.4209 -2219.3965 m881.3623 -2212.2891 819.0664 -2389.665 964.8135 -2430.1914 c1135.5811 -2477.6758 1096.2939 -2226.4258 989.4209 -2219.3965 cf/BBAccumRotation (0.213803) XT1064.1328 -3460.9238 m1005.2695 -3463.1494 766.7998 -3551.8691 897.0488 -3776.9014 c1027.2969 -4001.9326 1341.3154 -3761.3594 1280.3916 -3605.7129 c1219.4668 -3450.0664 1122.9961 -3458.6982 1064.1328 -3460.9238 cf/BBAccumRotation (0.213803) XT1281.6602 -3128.959 m1239.9199 -3178.6055 1219.4355 -3304.8086 1339.6709 -3346.3428 c1459.9072 -3387.877 1540.292 -3302.7832 1503.2451 -3189.0742 c1466.1982 -3075.3652 1323.3994 -3079.3105 1281.6602 -3128.959 cf/BBAccumRotation (0.213803) XTU0.015686 0.517647 0 0 k1710.3906 -516.7236 m2533.1133 87.4473 l2307.6758 203.2988 1963.5264 172.4336 v1728.4814 151.3535 1720.9961 -135.3652 y1643.6084 32.5566 1455.1865 -211.5352 v1370.6191 -321.0898 1440.7861 -473.1992 y1268.7109 -313.6357 1147.752 -511.2568 v1025.1973 -711.4834 1099.7266 -888.2236 y985.7764 -724.9434 864.4492 -903.8545 v733.5322 -1096.9102 851.6416 -1217.7861 y632.9688 -1104.7383 553.2559 -1407.0215 v526.125 -1509.9072 582.6035 -1592.6729 y438.2715 -1438.7412 341.5376 -1668.3916 v264.9639 -1850.1826 372.1304 -1903.8633 y183.0146 -1782.7588 70.4287 -2015.6211 v-14.7764 -2191.8535 98.3052 -2311.4014 y-113.6011 -2239.7158 -281.4248 -2508.7178 v-449.249 -2777.7227 -300.0889 -2946.46 y-425.417 -2904.4775 -593.2598 -3073.0811 v-750.2939 -3230.8301 -636.6602 -3451.0479 y-864.3433 -3348.7764 -966.4888 -3508.792 v-1092.3652 -3705.9834 -950.2256 -3796.2607 y-742.9092 -3867.5615 l1710.3906 -516.7236 lf0.007843 0.176471 0.988235 0 k476.9619 -1722.3652 m-488.2944 -3130.5674 -742.9092 -3867.5615 y242.1226 -4202.7236 l372.4858 -2530.6006 960.0361 -1638.1299 v1465.2627 -870.707 2244.957 -274.6592 y1998.3994 64.6992 l1442.2207 -314.1631 476.9619 -1722.3652 vf0.031373 0.12549 0.960784 0 k2543.2686 -1870.0088 m2517.3613 -2005.6445 2203.6406 -1994.4346 v1889.9219 -1983.2246 1635.1113 -1648.833 1655.583 -1357.4219 c1672.9131 -1110.75 1992.7129 -440.5586 y2613.7705 -1687.4385 2543.2686 -1870.0088 vfu0 0 0 0 k2859.7393 -1546.252 m2886.5869 -1461.9248 2374.3398 44.9873 1917.2666 -864.1279 c1460.1934 -1773.2412 2359.5625 -1948.7295 2529.2598 -1949.3506 c2698.957 -1949.9697 3033.7051 -1630.2344 y2859.7393 -1546.252 lf%_u%_0 R%_0.129412 0 0.023529 0 K%_2.4 w%_2859.7393 -1546.252 m%_2886.5869 -1461.9248 2374.3398 44.9873 1917.2666 -864.1279 c%_1460.1934 -1773.2412 2359.5625 -1948.7295 2529.2598 -1949.3506 c%_2698.957 -1949.9697 3033.7051 -1630.2344 y%_2859.7393 -1546.252 l%_s%_U0 Ap0 Au0 J 0 j 1 w 4 M []0 d0 XR2859.7393 -1546.252 m2886.5869 -1461.9248 2374.3398 44.9873 1917.2666 -864.1279 c1460.1934 -1773.2412 2359.5625 -1948.7295 2529.2598 -1949.3506 c2698.957 -1949.9697 3033.7051 -1630.2344 y2859.7393 -1546.252 ln0 O0.129412 0 0.023529 0 k2871.1504 -1547.3154 m2874.0674 -1537.9941 2874.0537 -1528.499 2873.0693 -1518.8682 c2871.6992 -1505.4688 2869.2168 -1492.1768 2866.3955 -1479.0166 c2858.209 -1440.8447 2847.0918 -1403.2734 2835.2676 -1366.0918 c2819.1572 -1315.4316 2801.0889 -1265.3906 2781.6475 -1215.917 c2758.9668 -1158.1982 2734.25 -1101.2793 2707.5322 -1045.3145 c2680.1406 -987.9365 2650.4648 -931.5996 2617.7471 -877.0713 c2586.6055 -825.1689 2552.6191 -774.7852 2514.1982 -727.9648 c2480.0195 -686.3135 2441.9268 -647.0078 2398.2305 -615.2598 c2361.2637 -588.4004 2319.1621 -567.2764 2273.75 -559.7988 c2228.3203 -552.3193 2182.3721 -561.0371 2141.2822 -581.2021 c2087.4346 -607.6289 2043.3281 -651.9434 2006.7598 -698.666 c1949.8506 -771.3779 1907.0918 -854.8379 1870.0264 -939.0322 c1831.0205 -1027.6367 1800.083 -1120.8047 1785.2559 -1216.6758 c1773.6055 -1292.0107 1772.4648 -1368.9961 1786.5029 -1444.084 c1798.166 -1506.4648 1821.2695 -1566.5508 1854.3086 -1620.7305 c1885.0742 -1671.1826 1924.5889 -1715.6445 1969.0811 -1754.375 c2011.752 -1791.5215 2059.2549 -1822.9102 2109.1357 -1849.4883 c2156.3359 -1874.6387 2205.8203 -1895.4307 2256.458 -1912.5791 c2301.3174 -1927.7715 2347.1201 -1940.2354 2393.5322 -1949.6816 c2427.4922 -1956.5938 2461.8828 -1962.0674 2496.4609 -1964.6621 c2512.9238 -1965.8965 2529.2422 -1966.2969 2545.6855 -1964.3232 c2580.1445 -1960.1875 2613.3994 -1946.9521 2644.6416 -1932.4121 c2721.4902 -1896.6465 2791.791 -1846.4131 2858.7031 -1794.8545 c2911.8789 -1753.8799 2963.252 -1710.4951 3012.8994 -1665.3154 c3021.0781 -1657.873 3029.2402 -1650.4023 3037.2383 -1642.7646 c3041.7363 -1638.4697 3045.1582 -1633.2344 3046.3242 -1627.0293 c3047.0498 -1623.1621 3047.001 -1616.7197 3042.7051 -1614.6455 c2992.5557 -1590.4365 2942.4063 -1566.2266 2892.2568 -1542.0166 c2884.418 -1538.2324 2876.5781 -1534.4482 2868.7393 -1530.6631 c2861.2949 -1527.0703 2853.7188 -1535.0791 2850.3867 -1540.8516 c2847.5488 -1545.7656 2843.3496 -1558.2734 2850.7393 -1561.8408 c2900.8887 -1586.0498 2951.0381 -1610.2598 3001.1875 -1634.4697 c3009.0273 -1638.2539 3016.8662 -1642.0381 3024.7051 -1645.8232 C3026.5273 -1636.4502 3028.3496 -1627.0771 3030.1719 -1617.7041 C3001.9922 -1644.6123 2972.5986 -1670.3232 2942.958 -1695.5967 c2913.4297 -1720.7744 2883.3438 -1745.3018 2852.6338 -1769.0234 c2835.7178 -1782.0908 2818.5918 -1794.8867 2801.2441 -1807.375 c2797.0254 -1810.4121 2792.79 -1813.4248 2788.543 -1816.4219 C2791.5469 -1814.3018 2787.9863 -1816.8096 2787.5703 -1817.1016 c2786.5059 -1817.8477 2785.4385 -1818.5918 2784.3711 -1819.335 c2781.8828 -1821.0703 2779.3867 -1822.7939 2776.8867 -1824.5137 c2767.9922 -1830.6348 2759.0215 -1836.6445 2749.9844 -1842.5537 c2715.6992 -1864.9707 2680.2725 -1885.915 2643.1045 -1903.2129 c2639.0078 -1905.1191 2634.8828 -1906.9639 2630.7402 -1908.7656 c2628.707 -1909.6504 2626.666 -1910.5137 2624.6211 -1911.3701 c2623.6094 -1911.7939 2622.5938 -1912.21 2621.5791 -1912.627 C2624.8584 -1911.2813 2620.4277 -1913.0752 2619.8359 -1913.3105 c2611.7158 -1916.5273 2603.4863 -1919.4688 2595.1621 -1922.1143 c2580.1895 -1926.873 2564.8076 -1930.5332 2549.1748 -1932.252 c2548.5625 -1932.3193 2545.5625 -1932.6016 2548.8672 -1932.3066 C2548.0127 -1932.3828 2547.1582 -1932.4453 2546.3037 -1932.5078 c2544.6191 -1932.6318 2542.9316 -1932.7148 2541.2432 -1932.7832 c2538.7129 -1932.8857 2536.1797 -1932.8955 2533.6484 -1932.8701 c2530.9551 -1932.8438 2528.2627 -1932.7725 2525.5713 -1932.6758 c2519.3145 -1932.4512 2513.0635 -1932.0596 2506.8213 -1931.5723 c2491.1621 -1930.3496 2475.5557 -1928.4727 2460.0137 -1926.2188 c2418.8037 -1920.2412 2377.9893 -1911.4648 2337.7959 -1900.6162 c2326.1699 -1897.4775 2314.5977 -1894.1416 2303.0791 -1890.6309 c2301.6641 -1890.1992 2300.25 -1889.7637 2298.8359 -1889.3262 c2298.127 -1889.1074 2297.418 -1888.8867 2296.71 -1888.666 c2294.1934 -1887.8828 2299.1943 -1889.4463 2296.6758 -1888.6543 c2293.5801 -1887.6816 2290.4883 -1886.6914 2287.4004 -1885.6904 c2281.3809 -1883.7402 2275.3809 -1881.7314 2269.3975 -1879.6768 c2244.5645 -1871.1504 2220.0488 -1861.6963 2195.9346 -1851.3115 c2144.9961 -1829.375 2095.8389 -1803.083 2050.0479 -1771.7451 c2026.5078 -1755.6348 2003.9189 -1738.1279 1982.5537 -1719.2246 c1979.9717 -1716.9404 1977.4141 -1714.6309 1974.8701 -1712.3057 c1972.6973 -1710.3193 1976.6592 -1713.96 1974.4971 -1711.9609 c1973.8633 -1711.375 1973.2324 -1710.7871 1972.6016 -1710.1982 c1971.127 -1708.8252 1969.6631 -1707.4414 1968.2031 -1706.0527 c1962.9775 -1701.0859 1957.8496 -1696.0156 1952.8047 -1690.8643 c1942.6582 -1680.5039 1932.915 -1669.751 1923.5781 -1658.6553 c1904.6035 -1636.1045 1887.4824 -1612.001 1872.4893 -1586.627 c1864.8086 -1573.6279 1857.7383 -1560.2715 1851.2422 -1546.6426 c1850.8477 -1545.8154 1850.458 -1544.9863 1850.0684 -1544.1563 c1848.7344 -1541.3174 1851.1641 -1546.5391 1849.8496 -1543.6875 c1849.0781 -1542.0166 1848.3213 -1540.3389 1847.5693 -1538.6592 c1845.9316 -1535.0029 1844.3467 -1531.3223 1842.7959 -1527.627 c1839.7822 -1520.4473 1836.9541 -1513.1895 1834.2744 -1505.8789 c1823.0811 -1475.3457 1814.9336 -1443.7363 1809.5459 -1411.6758 c1808.8691 -1407.6504 1808.248 -1403.6162 1807.6602 -1399.5771 c1807.5127 -1398.5605 1807.3701 -1397.542 1807.2275 -1396.5244 C1807.7266 -1400.0918 1807.2422 -1396.5928 1807.1602 -1395.9688 c1806.8418 -1393.5723 1806.5459 -1391.1719 1806.2588 -1388.7705 c1805.2148 -1380.0596 1804.3945 -1371.3232 1803.7432 -1362.5742 c1802.3867 -1344.3701 1801.9102 -1326.1055 1802.1406 -1307.8535 c1802.2617 -1298.333 1802.6113 -1288.8164 1803.1318 -1279.3086 c1803.3867 -1274.6436 1803.6992 -1269.9814 1804.0469 -1265.3223 c1804.2227 -1262.9668 1804.415 -1260.6133 1804.6133 -1258.2598 c1804.6699 -1257.5898 1805.0322 -1253.5645 1804.6729 -1257.5244 C1804.8164 -1255.9385 1804.9697 -1254.3535 1805.124 -1252.7686 c1807.1201 -1232.2607 1810.0117 -1211.8438 1813.5918 -1191.5537 c1817.418 -1169.8711 1822.1299 -1148.3477 1827.5098 -1126.999 c1828.8574 -1121.6543 1830.2607 -1116.3223 1831.6963 -1111 c1832.4229 -1108.3057 1833.166 -1105.6152 1833.9141 -1102.9258 c1834.0781 -1102.3398 1835.3643 -1097.8037 1834.2334 -1101.7842 C1834.748 -1099.9717 1835.2725 -1098.1611 1835.7969 -1096.3516 c1839.1455 -1084.8066 1842.7109 -1073.3252 1846.4336 -1061.8955 c1862.7334 -1011.8535 1882.5166 -962.9814 1904.5488 -915.2031 c1905.9746 -912.1104 1907.416 -909.0244 1908.8623 -905.9404 c1909.5898 -904.3887 1910.3223 -902.8389 1911.0547 -901.29 C1909.377 -904.8379 1911.8213 -899.6904 1911.958 -899.4053 c1915.2168 -892.5859 1918.5332 -885.7949 1921.8828 -879.0205 c1927.3838 -867.8984 1933.0195 -856.8438 1938.8125 -845.8711 c1948.9883 -826.5947 1959.6992 -807.5996 1971.0049 -788.9629 c1976.2402 -780.332 1981.627 -771.7949 1987.1484 -763.3447 c1989.6982 -759.4414 1992.2891 -755.5645 1994.9063 -751.7041 c1995.5498 -750.7549 1996.1982 -749.8076 1996.8457 -748.8604 c1999.1748 -745.457 1994.3672 -752.4355 1996.707 -749.0596 c1998.2031 -746.8994 1999.7168 -744.751 2001.2363 -742.6064 c2011.4639 -728.1719 2022.2432 -714.124 2033.6201 -700.5752 c2038.876 -694.3145 2044.2852 -688.1836 2049.8242 -682.1729 c2052.3828 -679.3975 2054.9805 -676.6582 2057.6035 -673.9434 C2053.4609 -678.2305 2058.0781 -673.4775 2059.0479 -672.501 c2060.5479 -670.9912 2062.0635 -669.4971 2063.585 -668.0098 c2073.8506 -657.9736 2084.6475 -648.4766 2095.9746 -639.6543 c2098.5322 -637.6631 2101.125 -635.7178 2103.7402 -633.8018 c2105.0254 -632.8604 2106.3223 -631.9336 2107.6211 -631.0107 C2103.042 -634.2607 2108.3828 -630.5049 2109.5107 -629.7393 c2114.7754 -626.1631 2120.168 -622.7754 2125.6602 -619.5586 c2130.9268 -616.4736 2136.3105 -613.5898 2141.7813 -610.8848 c2144.334 -609.623 2146.9141 -608.416 2149.5088 -607.2451 c2150.7891 -606.667 2152.0781 -606.1064 2153.3691 -605.5508 c2154.0098 -605.2754 2154.6543 -605.0059 2155.2979 -604.7354 c2158.6484 -603.3301 2152.9961 -605.6563 2155.2119 -604.7666 c2165.6113 -600.5898 2176.3379 -597.2354 2187.2598 -594.7314 c2192.5332 -593.5234 2197.8584 -592.5498 2203.21 -591.7695 c2205.749 -591.3994 2208.2959 -591.0908 2210.8467 -590.8193 c2211.4814 -590.752 2212.1172 -590.6904 2212.7539 -590.6289 c2215.1777 -590.3945 2209.7285 -590.8887 2212.1533 -590.6855 c2213.6328 -590.5625 2215.1143 -590.4619 2216.5967 -590.3721 c2237.7246 -589.084 2258.959 -591.373 2279.4766 -596.4795 c2281.9756 -597.1016 2284.4609 -597.7764 2286.9375 -598.4805 c2288.1816 -598.835 2289.4219 -599.2041 2290.6602 -599.5781 c2291.3652 -599.791 2293.6533 -600.5088 2290.3311 -599.4658 C2291.1582 -599.7256 2291.9834 -599.9932 2292.8086 -600.2617 c2298.0107 -601.9551 2303.1504 -603.8408 2308.2334 -605.8623 c2318.6953 -610.0234 2328.876 -614.877 2338.7881 -620.2109 c2359.9717 -631.6113 2379.8223 -645.3945 2398.5488 -660.4619 c2403.5049 -664.4492 2408.373 -668.5459 2413.1748 -672.7168 c2415.5186 -674.752 2417.8398 -676.8125 2420.1475 -678.8877 c2421.3105 -679.9326 2422.4668 -680.9854 2423.6211 -682.041 c2425.6436 -683.8887 2421.752 -680.3135 2423.7686 -682.1758 c2424.54 -682.8887 2425.3086 -683.6055 2426.0762 -684.3223 c2435.8926 -693.4893 2445.3789 -703.0068 2454.6094 -712.7617 c2494.8232 -755.2627 2529.9668 -802.4414 2562.1172 -851.248 c2596.8506 -903.9756 2628.0264 -959.0156 2656.8379 -1015.1777 c2664.1074 -1029.3496 2671.2119 -1043.6055 2678.1787 -1057.9297 c2681.6455 -1065.0576 2685.0713 -1072.2061 2688.4668 -1079.3682 c2690.0908 -1082.7939 2691.7041 -1086.2256 2693.3125 -1089.6592 c2694.1143 -1091.3721 2694.9141 -1093.0869 2695.7119 -1094.8027 c2695.9277 -1095.2676 2697.2793 -1098.1807 2695.9766 -1095.3691 C2696.5059 -1096.5107 2697.0332 -1097.6533 2697.5605 -1098.7959 c2710.5195 -1126.8652 2722.9414 -1155.1826 2734.8809 -1183.7002 c2756.6816 -1235.7695 2776.8574 -1288.5352 2795.1836 -1341.9277 c2809.5596 -1383.8135 2822.918 -1426.123 2833.9404 -1469.0244 c2837.8516 -1484.2451 2841.4619 -1499.5605 2844.3291 -1515.0146 c2844.9004 -1518.0977 2845.4346 -1521.1875 2845.9277 -1524.2852 c2846.1455 -1525.6533 2846.3516 -1527.0234 2846.5498 -1528.3945 c2847.0166 -1531.627 2846.251 -1526.1777 2846.3828 -1527.1563 c2846.4824 -1527.8945 2846.5771 -1528.6328 2846.6689 -1529.3721 c2847.2275 -1533.8477 2847.6563 -1538.3496 2847.7568 -1542.8594 c2847.8008 -1544.8164 2847.7695 -1546.7783 2847.6064 -1548.7295 C2848.1982 -1541.6631 2847.9316 -1545.6211 2847.6328 -1547.3271 c2847.0449 -1550.6885 2847.8115 -1546.8379 2848.3281 -1545.1885 C2846.6035 -1550.6982 2844.8926 -1561.9053 2853.5469 -1562.7188 c2861.5547 -1563.4717 2869.0391 -1554.0654 2871.1504 -1547.3154 cfU(Adobe Calligraphic Brush Tool) 1 0 55 XP%080706053CCF1D3F71A7383F60FD2F3F0001010000007041000000000000%704200000000000070420000000031352070742E204F76616C/Adobe_Brushed_Path () XTU0 0.06 0.69 0 k2695.6738 34.4912 m2946.1328 34.9229 3062.6582 93.6709 v3179.1699 152.418 3355.3379 -96.6172 3192.1328 -212.0459 c3028.9268 -327.4736 2877.0664 -317.9258 2708.791 -117.9023 c2580.5605 34.5391 2695.6738 34.4912 yf2013.0967 197.5459 m1780.6816 386.3901 1723.0469 535.8442 v1665.4141 685.2959 1290.8965 624.0596 1343.4463 386.5547 c1396.0059 149.0449 1636.6328 29.7266 1962.1611 56.0537 c2210.2422 76.1191 2013.0967 197.5459 yf0.031373 0.12549 0.960784 0 k2810.7021 -229.3848 m2852.8496 -460.3916 2989.2793 -543.877 v3373.0215 -778.7041 3610.4824 -1418.4277 3010.998 -1749.543 c2594.9004 -1979.3691 1561.7031 -1702.5908 1896.7656 -805.7051 c1926.9482 -724.9131 1886.5186 -571.6279 1881.668 -495.6328 c1845.6533 68.5938 1907.1211 298.1455 2250.2471 276.3701 c2443.916 264.0801 2764.084 47.7715 2810.7021 -229.3848 cf0 0.08 1 0 k2540.9434 52.1621 m2934.8311 352.3062 3019.8984 406.9004 v3104.9795 461.4775 3195.6357 483.4624 y3112.9248 668.7686 l3026.5273 545.1357 2949.4258 467.1899 v2872.3213 389.2451 2490.7646 103.1738 y2540.9434 52.1621 lf0.015686 0.517647 0 0 k3109.8457 539.8145 m3120.8457 460.25 3198.0039 448.9951 v3275.1602 437.7661 3322.6279 569.5869 3280.4766 683.4331 c3238.3125 797.27 3109.5254 767.1465 3095.2949 684.6519 c3081.0635 602.1558 3091.1504 603.3208 3109.8457 539.8145 cf0 0.08 1 0 k2230.5977 169.7285 m2195.1904 585.3311 2197.8457 667.8145 v2200.5254 750.313 2239.7773 812.522 y1997.209 901.623 l2063.1631 769.4087 2089.415 674.4316 v2115.6611 579.4438 2145.2646 180.1797 y2230.5977 169.7285 lf/BBAccumShear (20.000000 0.000000) XT0.015686 0.517647 0 0 k2124.9482 808.4502 m2212.4951 757.5981 2276.0723 789.2539 v2339.6357 820.9302 2239.0674 938.9478 2095.9121 998.1499 c1952.7695 1057.3252 1895.8711 969.7529 1969.2783 903.8457 c2042.6904 837.9429 2048.3545 843.9448 2124.9482 808.4502 cf/BBAccumShear (20.000000 0.000000) XT2912.8418 -1118.458 m2998.793 -1071.3604 3018.3135 -1145.5352 v3037.8359 -1219.71 3041.8887 -1250.9316 3004.2969 -1260.0039 c2966.7031 -1269.0771 2694.9082 -1227.002 2912.8418 -1118.458 cBb1 (Unnamed gradient 5) -6720.8564 -3644.3369 20.1115 401.0205 0.411544 0.304325 -0.372645 0.587557 14697.6953 2201.2725 Bg206.3584 -33.5806 -62.7557 -197.6412 2873.6426 -1049.6152 Xm657.8096 -107.045 -62.7557 -197.6412 2215.833 -942.5703 Bc206.3584 -33.5806 -62.7557 -197.6412 2873.6426 -1049.6152 Bm657.8096 -107.045 -62.7557 -197.6412 3080.001 -1083.1963 Bcf0 BB1 Ap2407.543 -189.083 m2339.2988 -326.2891 2365.6953 -493.6914 2466.543 -562.9512 c2567.3867 -632.2061 2704.4639 -577.1035 2772.71 -439.8789 c2840.96 -302.6299 2799.791 -140.8291 2698.9473 -71.5752 c2598.0957 -2.33301 2475.7793 -51.8604 2407.543 -189.083 cBb1 (Unnamed gradient 5) -6165.3696 257.6074 0 501.5189 0.667905 0.609777 -0.457057 0.718989 12878.9434 1759.4841 Bg334.967 -305.8149 -303.1808 -476.9292 2570.332 70.9336 Xm1084.1812 -989.8253 -303.1808 -476.9292 1486.1504 1060.7588 Bc334.967 -305.8149 -303.1808 -476.9292 2570.332 70.9336 Bm1084.1812 -989.8253 -303.1808 -476.9292 2905.2988 -234.8809 Bcf0 BB2413.5859 -211.1406 m2353.6992 -330.4463 2381.502 -479.291 2475.6914 -543.5479 c2569.8994 -607.8047 2694.7881 -563.166 2754.6563 -443.833 c2814.5273 -324.4814 2786.7227 -175.6553 2692.5254 -111.4063 c2598.3164 -47.1504 2473.4609 -91.7949 2413.5859 -211.1406 cBb0 0 0 0 Bh1 (Unnamed gradient 21) 19184.7617 755.3574 0 232.8447 -0.513445 -0.802875 -0.700046 0.683169 29607.3125 25174.1758 Bg-119.5531 186.9452 -163.0019 -159.0722 2584.1172 -327.4824 Bmf0 BBu0.301961 0.027451 0 0 k2432.71 -203.2871 m2394.3076 -278.8877 2417.2334 -376.8389 2483.8936 -421.9727 c2550.6064 -467.1367 2635.8154 -442.3467 2674.2148 -366.7773 c2712.6494 -291.1348 2689.7539 -193.2383 2623.043 -148.0752 c2556.374 -102.9512 2471.1357 -127.6611 2432.71 -203.2871 cf1 0.631373 0.627451 0.564706 k2453.4619 -215.0352 m2429.3154 -267.375 2443.1826 -334.9307 2484.3857 -365.873 c2525.6084 -396.8184 2578.5938 -379.4014 2602.7158 -327.0596 c2626.8428 -274.6602 2613.0244 -207.1387 2571.7998 -176.1826 c2530.5947 -145.2607 2477.5986 -162.6406 2453.4619 -215.0352 cf0 0 0 0 k2540.2197 -308.4258 m2526.7725 -337.5342 2534.5029 -375.1006 2557.4893 -392.3027 c2580.4902 -409.5098 2610.0244 -399.8311 2623.4756 -370.7256 c2636.9336 -341.5957 2629.209 -304.0557 2606.2139 -286.8408 c2583.2334 -269.6416 2553.6768 -279.3008 2540.2197 -308.4258 cfU2012.3398 -27.1182 m1912.9063 -155.627 1898.5664 -336.4297 1980.3633 -430.9277 c2062.1602 -525.418 2209.0869 -497.8223 2308.5313 -369.2949 c2407.9844 -240.7432 2406.5703 -62.5605 2324.7715 31.9287 c2242.9658 126.4063 2111.7754 101.4082 2012.3398 -27.1182 cBb1 (Unnamed gradient 5) -5482.7388 -906.3291 0 502.2444 0.505155 0.782362 -0.619442 0.651827 14462.418 582.1672 Bg253.7111 -392.937 -410.2548 -431.7035 2233.4727 208.748 Xm1164.9017 -1804.1506 -410.2548 -431.7035 1068.5713 2012.8984 Bc253.7111 -392.937 -410.2548 -431.7035 2233.4727 208.748 Bm1164.9017 -1804.1506 -410.2548 -431.7035 2487.1836 -184.1895 Bcf0 BB2012.9541 -51.502 m1925.957 -163.126 1917.4346 -324.8369 1993.9375 -412.6455 c2070.4561 -500.457 2202.9854 -481.1318 2289.9707 -369.4785 c2376.9648 -257.8027 2385.4785 -96.1113 2308.9707 -8.30859 c2232.4492 79.501 2099.9482 60.166 2012.9541 -51.502 cBb0 0 0 0 Bh1 (Unnamed gradient 21) 18645.7227 -77.248 0 232.8447 -0.308633 -0.951864 -0.846564 0.560979 25325.5 29037.8613 Bg-71.8636 221.6366 -197.1181 -130.6211 2151.46 -210.4883 Bmf0 BBu0.301961 0.027451 0 0 k2038.8232 -42.8281 m1983.2549 -113.4619 1982.1611 -220.8945 2036.3848 -282.6797 c2090.6563 -344.5098 2179.7217 -337.249 2235.2803 -266.6465 c2290.8906 -195.9766 2291.999 -88.6094 2237.7354 -26.7813 c2183.4971 34.9971 2094.4238 27.8262 2038.8232 -42.8281 cf1 0.631373 0.627451 0.564706 k2053.2373 -71.4873 m2017.5176 -116.8398 2016.8389 -185.8408 2051.6738 -225.5498 c2086.5313 -265.2646 2143.751 -260.6182 2179.4453 -215.2598 c2215.1592 -169.8457 2215.8828 -100.8877 2181.0273 -61.1631 c2146.1816 -21.4766 2088.959 -26.083 2053.2373 -71.4873 cf0 0 0 0 k2111.8252 -178.6123 m2091.376 -204.6074 2090.9766 -244.1387 2110.9365 -266.8789 c2130.9111 -289.6279 2163.6787 -286.9658 2184.1299 -260.9756 c2204.5928 -234.9629 2204.9971 -195.457 2185.0273 -172.7002 c2165.0723 -149.9668 2132.2871 -152.6035 2111.8252 -178.6123 cfU0 Ap2454.9727 -1063.252 m2426.7969 -972.4014 2369.7109 -1018.0537 v2312.624 -1063.7061 2291.3242 -1085.5439 2310.5332 -1116.2764 c2329.7402 -1147.0107 2532.9092 -1285.1201 2454.9727 -1063.252 cBb1 (Unnamed gradient 5) 14365.7441 781.0493 20.1115 400.9961 -0.451219 -0.021278 -0.106461 0.693478 21057.0156 4757.7695 Bg-155.2253 103.6302 -76.8098 -193.8541 2521.6914 -1034.126 Xm-8657.4102 5779.7856 -76.8098 -193.8541 11179.1016 -6813.9121 Bc-155.2253 103.6302 -76.8098 -193.8541 2521.6914 -1034.126 Bm-8657.4102 5779.7856 -76.8098 -193.8541 2366.4658 -930.4961 Bcf0 BBu0.05098 0.81 0 0 k1563.8438 -500.6855 m1655.1523 -534.1797 1647.7598 -666.3271 1542.2168 -672.835 c1414.4385 -680.7139 1472.5371 -467.1914 1563.8438 -500.6855 cf1423.7979 -835.7832 m1494.1074 -852.8057 1489.9502 -994.501 1370.8242 -986.8604 c1253.8115 -979.3545 1353.4873 -818.7598 1423.7979 -835.7832 cf1047.1602 -1205.3477 m1088.8896 -1259.0557 1090.0361 -1368.2822 973.8604 -1358.0596 c857.6836 -1347.8379 888.7754 -1231.29 913.5713 -1203.7305 c938.4473 -1176.0811 1005.4307 -1151.6396 1047.1602 -1205.3477 cf753.4424 -1711.9141 m850.5547 -1735.54 828.5781 -1878.6025 698.9629 -1885.5127 c569.3467 -1892.4268 656.334 -1688.2852 753.4424 -1711.9141 cf429.1904 -2034.5879 m565.8809 -2061.541 555.6445 -2279.7471 385.666 -2287.8828 c199.0557 -2296.8135 292.501 -2007.6357 429.1904 -2034.5879 cf159.6133 -2994.2939 m301.0986 -3036.1475 306.4141 -3291.3682 100.0903 -3256.7666 c-126.1406 -3218.8252 8.20166 -2949.5078 159.6133 -2994.2939 cf276.0977 -2569.6582 m369.2119 -2583.1553 391.9946 -2742.9854 261.1353 -2750.7051 c107.811 -2759.751 184.0049 -2556.3086 276.0977 -2569.6582 cf1.16699 -3596.4385 m50.8516 -3608.8994 238.5654 -3726.1631 89.4722 -3891.2607 c-59.6187 -4056.3604 -285.7319 -3798.2656 -207.415 -3678.8223 c-129.0972 -3559.3789 -48.5186 -3583.9766 1.16699 -3596.4385 cf-208.9678 -3261.8584 m-181.9209 -3310.9678 -185.9873 -3420.3965 -295.3193 -3433.5527 c-404.6523 -3446.708 -458.5317 -3360.9424 -407.6636 -3272.335 c-356.793 -3183.7324 -236.0142 -3212.7461 -208.9678 -3261.8584 cfU0.015686 0.517647 0 0 k1965.5557 2002.6025 m2243.5947 2388.6753 2345.4043 2215.083 v2427.7295 2074.7134 2299.0049 2022.0093 y2533.4307 1895.1602 2381.8457 1827.8145 v2230.2598 1760.4688 2034.0898 1980.7217 1965.5557 2002.6025 cf0.05098 0.698039 0 0 k2067.918 2708.2744 m1948.1582 3717.4795 2330.0234 3573.498 v2678.46 3442.1201 2460.1074 3196.9414 y3053.2207 3367.4082 2916.6133 2987.9619 v2796.7441 2655.0107 2319.7139 2759.9575 2067.918 2708.2744 cf/BBAccumShear (20.000000 -4.000000) XT0.003922 0.235294 0 0 k1625.4746 2269.8848 m1348.4688 2690.665 1541.291 2681.6831 v1734.1445 2672.7002 1653.8457 2507.8145 y1771.0039 2681.3047 1831.7168 2560.0352 v1892.4238 2438.7627 1625.4746 2269.8848 yf/BBAccumRotation (0.089777) XT1480.5928 1663.4468 m1520.7822 1960.8779 1629.8457 1851.8145 v1677.8457 1803.8145 1604.8584 1740.1621 y1752.9424 1738.1963 1734.3887 1653.9741 v1715.832 1569.7549 1480.5928 1663.4468 yf1 Ap4154.4082 -3746.6885 m-3049.0449 -3746.6885 L-3049.0449 4166.98 L4154.4082 4166.98 L4154.4082 -3746.6885 LnQLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF