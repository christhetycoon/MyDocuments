%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 13.0.0%%For: (James  Weston) ()%%Title: (splodge.eps)%%CreationDate: 3/31/09 10:27 PM%%BoundingBox: 53 120 561 662%%HiResBoundingBox: 53.7422 120.2461 560.8252 661.791%%DocumentProcessColors: Cyan Magenta Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306.5 395.5 306.5 395.5%AI3_TileBox: -97 -181.5 709 973.5%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 1%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -673 1121 0.5 1182 767 18 0 0 217 75 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 0%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps true putuserdict /_forceToCMYK true putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRidercurrentpacking true setpackingsetpacking%AI3_EndRider%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Tracing Object) (Tracing) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (PathFinderS.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)%AI5_End_NonPrinting--17 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7B7A797877767574737271706F6E6D6C6C6B6A69686766656463636261605F5E5D5C5C5B5A595857575655545353525150504F4E4E4D4D>0001 %_Br[0.3 0 0 0 1 50 77.4725 %_BS%_0.3 0 0 0 1 50 77.4725 Bs0.6 0 0 0 1 46.1538 0 %_BS%_0.6 0 0 0 1 46.1538 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 10)(Unnamed gradient 10) 0 2 Bd[<4D4E4F50515253545556575858595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F6F70717273747576777879797A7B7C7D7E7F7F8081828384858586878889898A8B8C8D8D8E8F90909192929394959596969798989999>0001 %_Br[0.6 0 0 0 1 50 100 %_BS%_0.6 0 0 0 1 50 100 Bs0.3 0 0 0 1 44.5055 0 %_BS%_0.3 0 0 0 1 44.5055 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 2 Bd[100<00010102020304050506070809090A0B0C0D0E0F0F10111213141516171819191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233>1 %_Br[1 0 0 0.2 1 50 75.8242 %_BS%_1 0 0 0.2 1 50 75.8242 Bs1 0 0 0 1 54.3956 0 %_BS%_1 0 0 0 1 54.3956 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 12)(Unnamed gradient 12) 0 2 Bd[<4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F90919293949596979899>0001 %_Br[0.6 0 0 0 1 50 100 %_BS%_0.6 0 0 0 1 50 100 Bs0.3 0 0 0 1 50 0 %_BS%_0.3 0 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 14)(Unnamed gradient 14) 0 2 Bd[100<00010102020304050506070809090A0B0C0D0E0F0F10111213141516171819191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233>1 %_Br[1 0 0 0.2 1 50 93.956 %_BS%_1 0 0 0.2 1 50 93.956 Bs1 0 0 0 1 54.3956 0 %_BS%_1 0 0 0 1 54.3956 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 15)(Unnamed gradient 15) 0 2 Bd[<9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9A9B9B9B9B9B9B9B9B9B9B9B9C9C9C9C9C9C9C9C9D9D9D9D9D9D9D9E9E9E9E9E9E9F9F9F9F9FA0A0A0A0A0A1A1A1A1A2A2A2A2A3A3A3A4A4A4A4A5A5A5A6A6A6A7A7A7A8A8A8A9A9AAAAAAABABACACACADADAEAEAFAFB0B0B1B1B2B2B3B3B4B4B5B5B6B6B7B8B8B9B9BABBBBBCBDBDBEBFBFC0C1C1C2C3C4C4C5C6C7C7C8C9CACBCBCCCDCECFD0D1D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E8E9EAEBECEDEFF0F1F2F3F5F6F7F8FAFBFCFEFF>0001 %_Br[1 0 0 0 1 50 100 %_BS%_1 0 0 0 1 50 100 Bs0.6 0 0 0 1 80.2198 0 %_BS%_0.6 0 0 0 1 80.2198 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 17)(Unnamed gradient 17) 0 2 Bd[<999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D>0001 %_Br[0.3 0 0 0 1 50 100 %_BS%_0.3 0 0 0 1 50 100 Bs0.6 0 0 0 1 50 0 %_BS%_0.6 0 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 18)(Unnamed gradient 18) 0 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4D>0001 %_Br[0.3 0 0 0 1 50 100 %_BS%_0.3 0 0 0 1 50 100 Bs0 0 0 0 1 50 0 %_BS%_0 0 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 2)(Unnamed gradient 2) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C7C6C5C4C3C2C1C0BFBEBDBCBCBBBAB9B8B7B6B5B4B4B3B2B1B0AFAEAEADACABAAA9A8A8A7A6A5A4A4A3A2A1A1A09F9E9E9D9C9B9B9A9A99>0001 %_Br[0.6 0 0 0 1 50 100 %_BS%_0.6 0 0 0 1 50 100 Bs1 0 0 0 1 46.1538 0 %_BS%_1 0 0 0 1 46.1538 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 20)(Unnamed gradient 20) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEEEDECEBEAE9E8E7E6E5E4E4E3E2E1E0DFDEDDDDDCDBDAD9D8D8D7D6D5D4D3D3D2D1D0D0CFCECDCCCCCBCAC9C9C8C7C7C6C5C4C4C3C2C2C1C0C0BFBEBDBDBCBCBBBABAB9B8B8B7B7B6B5B5B4B4B3B2B2B1B1B0B0AFAFAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A0A09F9F9F9E9E9E9E9D9D9D9C9C9C9C9C9B9B9B9B9A9A9A9A9A9A9A9999999999999999>0001 %_Br[0.6 0 0 0 1 50 52.1978 %_BS%_0.6 0 0 0 1 50 52.1978 Bs1 0 0 0 1 33.6842 0 %_BS%_1 0 0 0 1 33.6842 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 21)(Unnamed gradient 21) 0 2 Bd[100<000000000000000000000000010101010101010101020202020203030303030404040505050506060607070708080909090A0A0B0B0C0C0D0D0E0E0F0F10101111121213141415151617171819191A1B1C1C1D1E1F1F2021222323242526272829292A2B2C2D2E2F30313233>1 %_Br[1 0 0 0.2 1 50 100 %_BS%_1 0 0 0.2 1 50 100 Bs1 0 0 0 1 71.978 0 %_BS%_1 0 0 0 1 71.978 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 25)(Unnamed gradient 25) 0 2 Bd[100<00010102020304050506070809090A0B0C0D0E0F0F10111213141516171819191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233>1 %_Br[1 0 0 0.2 1 50 100 %_BS%_1 0 0 0.2 1 50 100 Bs1 0 0 0 1 54.3956 0 %_BS%_1 0 0 0 1 54.3956 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 40)(Unnamed gradient 40) 0 2 Bd[100<00010102020304050506070809090A0B0C0D0E0F0F10111213141516171819191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233>1 %_Br[1 0 0 0.2 1 50 100 %_BS%_1 0 0 0.2 1 50 100 Bs1 0 0 0 1 54.3956 0 %_BS%_1 0 0 0 1 54.3956 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 41)(Unnamed gradient 41) 0 2 Bd[100<000102030405060708090A0B0C0D0E0F10111213141415161718191A1B1C1D1D1E1F202122222324252626272829292A2B2C2C2D2E2E2F3030313132323333>1 %_Br[1 0 0 0.2 1 50 100 %_BS%_1 0 0 0.2 1 50 100 Bs1 0 0 0 1 42.8571 0 %_BS%_1 0 0 0 1 42.8571 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 5)(Unnamed gradient 5) 0 3 Bd[100<333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A1817161514131211100F0E0D0C0B0A09080706050403020100>1 %_Br100<00010102020304050506070809090A0B0C0D0E0F0F10111213141516171819191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233>1 %_Br[1 0 0 0 1 50 100 %_BS%_1 0 0 0 1 50 100 Bs1 0 0 0.2 1 50 46.1538 %_BS%_1 0 0 0.2 1 50 46.1538 Bs1 0 0 0 1 54.3956 0 %_BS%_1 0 0 0 1 54.3956 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 6)(Unnamed gradient 6) 0 2 Bd[100<00010102020304050506070809090A0B0C0D0E0F0F10111213141516171819191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F30313233>1 %_Br[1 0 0 0.2 1 50 46.1538 %_BS%_1 0 0 0.2 1 50 46.1538 Bs1 0 0 0 1 54.3956 0 %_BS%_1 0 0 0 1 54.3956 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 8)(Unnamed gradient 8) 0 2 Bd[<4D4D4E4F5050515253545556565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F70717272737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F90919293949596979899>0001 %_Br[0.6 0 0 0 1 50 100 %_BS%_0.6 0 0 0 1 50 100 Bs0.3 0 0 0 1 52.1978 0 %_BS%_0.3 0 0 0 1 52.1978 0 BsBD%AI5_EndGradient%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pattern)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7885 8587 m-7608.0454 8587 L-7608.0454 8558.127 L-7885 8558.127 L-7885 8587 Ln1 Ap0 O0.746094 0.675781 0.667969 0.898438 k-7608.0454 8572.5625 m-7862.5898 8587 -7870.5625 8587 v-7878.5361 8587 -7885 8580.5361 -7885 8572.5625 c-7885 8564.5898 -7878.5361 8558.127 -7870.5625 8558.127 c-7862.5898 8558.127 -7608.0454 8572.5625 yfU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe ArtOnPath Brush Tool/ Art Brush 1/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Art Brush 1)(1 / Unnamed Brush Pattern/ / / / / 0 1 /  1 1 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration])Pc0.6 0 0 0 k(C=60 M=0 Y=0 K=0 1)Pc1 0 0 0 k(C=100 M=0 Y=0 K=0 1)Pc0.3 0 0 0 k(C=30 M=0 Y=0 K=0 1)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Layer 1) Ln0 A0 Ap0 O1 0.19 0 0.32 k0 J 0 j 1 w 4 M []0 d0 XR408.25 491.5 m404.75 495.5 402.75 500.5 407 504.5 c411.25 508.5 425 525.5 416.5 549.25 c390.5 518 l390.75 495 l408.25 491.5 lf1 0 0 0.2 k406.5 493.5 m402.75 499.5 401.25 505.75 408.25 515 c415.25 524.25 423.5 538.75 413.75 555.25 c400.25 516.5 l398 492.75 l406.5 493.5 lf1 0.19 0 0.32 k239.8335 508.8335 m233.3335 506.8335 221.1665 497.6665 226.5 485.1665 c231.8335 472.6665 244 465 242.5 444.5 c254.6665 473.1665 l239.8335 508.8335 lf1 0 0 0.2 k240.6665 509.333 m232.6411 506.7437 224.6665 498 230 485.6665 c235.3335 473.333 246 456.6665 242 439.6665 c265 460.333 l262.667 472.3335 264.3335 484 v266 495.6665 257.583 514.791 240.6665 509.333 cf1 0.19 0 0.32 k390.75 427.75 m388 434 386 445.75 398.5 448.5 c411 451.25 417 443.75 422.25 453.25 c427.5 462.75 423.25 476.5 418.25 483.5 c384.25 454.75 l383.75 435.75 l390.75 427.75 lf1 0 0 0.2 k388.25 436 m388.25 443 391.75 451.25 402.5 451.25 c413.25 451.25 431.25 455 420 480.25 c390 457.5 l379 435 l388.25 436 lf1 0.19 0 0.32 k367.667 272.5 m366.167 284.167 364.334 296.999 376.667 299.833 c389 302.667 395.167 302.166 402.667 297.333 c410.167 292.5 413.834 289.501 421.167 294.167 c428.5 298.833 421.834 312.499 420.667 313.833 c419.5 315.167 382.833 320.499 373.5 315.333 c364.167 310.167 354.166 299.833 356 291.333 c357.834 282.833 367.667 272.5 yf1 0 0 0.2 k366.5 279.833 m365.667 288.167 364.834 300.333 377.834 303.5 c390.834 306.667 394.833 305.167 400.5 301.5 c406.167 297.833 410 293.834 418.5 297.167 c427 300.5 423.167 310.666 419.667 315.333 c376.667 310.833 l363.5 301.167 l359.834 284 l366.5 279.833 lf1 0.19 0 0.32 k417 318.25 m410 329.25 416.25 328 v422.5 326.75 430.5 323.75 438.25 313.75 c446 303.75 456.25 295.75 466.25 304 c476.25 312.25 476.5 337.75 458.75 345.25 c441 352.75 394.75 336.75 405.25 323.75 c415.75 310.75 417 318.25 yf1 0 0 0.2 k414.5 323.25 m412 329.5 409.5 334.75 416.5 332.25 c423.5 329.75 430.75 327 438.75 319.5 c446.75 312 453.75 304.75 462.75 308.75 c471.75 312.75 471.75 329.75 468 335.75 c405.25 337.75 l405.25 326.75 l414.5 323.25 lf1 0.19 0 0.32 k179.9995 319.332 m165.6665 314.166 160.6665 311.999 v155.6665 309.832 149.1665 301.832 153.833 289.832 c158.4995 277.832 168.666 276.832 180.4995 284.999 c192.333 293.166 204.4995 304.833 210.9995 301.666 c217.4995 298.499 223.3325 294.498 212.4995 282.332 c223.333 285.499 l228.333 301.833 228.333 302.666 v228.333 303.499 208.333 313.999 y179.9995 319.332 lf1 0 0 0.2 k179.333 318.832 m166.8335 314.332 161.6665 311.332 v156.4995 308.332 151 299.499 157.1665 291.499 c163.333 283.499 173.3335 285.498 187.6665 295.332 c201.9995 305.166 214.6665 305.166 218.1665 298.499 c221.6665 291.832 214.4995 283.498 211.333 280.332 c208.1665 277.166 218.6665 274.832 222.6665 281.332 c226.6665 287.832 233.8325 298.832 225.9995 306.999 c218.1665 315.166 191.9995 313.999 188.833 313.999 c185.6665 313.999 179.333 318.832 yf1 0.19 0 0.32 k119.6665 391.333 m118.5 384.166 114.6729 361.0859 129.25 357.25 c148.25 352.25 164.9839 361.5 179.5 361.5 c192.167 361.5 214.5039 360.6123 208.395 339.1045 c208.3228 338.8506 208.2466 338.5938 208.167 338.333 c201.3335 316 220.3335 345.666 y205.5 366.5 l172.167 375.166 l119.6665 391.333 lf1 0 0 0.2 k143 362.333 m133.186 362.9463 118.167 368 119.667 387 c188.8335 370.333 l207.667 365.333 l212.5 347.667 l208.3809 358.4424 201.5 361.5 v192.5 365.5 189 364.167 170 363.5 c151 362.833 151 361.833 143 362.333 cf1 0.19 0 0.32 k242.25 213 m242.7671 196.5859 254.25 194.25 v269 191.25 281.5 199.75 280.25 213.25 c279 226.75 267.5 251 286 263.5 c304.5 276 316.75 276.25 328.5 275.5 c340.25 274.75 359.5 273.5 362.25 236 c362.5 263 l337.25 292 l286.5 277 l269 247.25 l242.25 213 lf1 0 0 0.2 k357.334 262.667 m350.334 275.999 338.834 277.833 v327.334 279.667 314.667 280 300.8335 275.5 c342.834 304.334 357.334 262.667 vf242.834 210.668 m244.667 197.334 260.0005 197.334 v275.334 197.334 279.667 208.334 278.667 214.501 c242.834 210.668 lf1 0.19 0 0.32 k200.75 237 m216.75 270.75 230.75 275 v244.75 279.25 257.5 278.5 259.25 268.5 c261 258.5 244 243.75 246.25 234.5 c269.5 271.5 l256.25 291.5 l226.25 284 l198.25 245.75 200.75 237 vf1 0 0 0.2 k219.5 271 m231 280.167 243 280.167 v255 280.167 266.5005 276.5 261.667 263.167 c273.8335 275.166 259.3335 284 v244.8335 292.834 221.1665 278.666 219.5 271 cf1 0.19 0 0.32 k196.9541 228.75 m194.9282 219.8867 193.4087 187.7236 193.1558 174.5557 c192.9023 161.3867 184.292 150.75 163.2725 150.75 c142.2529 150.75 113.1299 177.0879 132.3765 208.9971 c196.9541 228.75 lf360 169.332 m360 154.332 372.9297 122.5879 395.667 120.499 c426.5 117.666 454.5 138.832 433 174.999 c360 169.332 lf1 0 0 0.2 k193.167 202.501 m194.334 173.501 189.0005 165.001 v183.667 156.501 172.667 153.168 164.5005 153.168 c156.334 153.168 133 161.668 130.167 179.501 c193.167 202.501 lf1 0.19 0 0.32 k296.625 169.25 m296.625 165 295.3125 156.8125 286.125 156.8125 c276.9375 156.8125 266.4375 177.75 275.3125 185.0625 c296.625 169.25 lf105.624 269.1865 m105.624 267.3115 106.2476 261.5615 113.6079 261.5615 c120.9683 261.5615 137.061 265.749 147.1035 283.0615 c105.624 269.1865 lf80.9688 444.5625 m82.0811 444.7305 80.5938 442.2813 73.5313 442.2813 c66.4688 442.2813 62.5415 441.625 57.7085 444.6665 c53.5024 447.3135 53.084 457.042 54.417 460.625 c66.8125 442.4272 80.9688 444.5625 vf63.667 421.25 m63.667 416.9165 64.084 398.25 84.917 398.25 c105.75 398.25 102.917 411.6665 114.8335 414.833 c122.6558 416.9116 144.0835 409.9165 135.0835 418.6665 c63.667 421.25 lf105.75 482.583 m99.6665 465.4165 109.5 448.4165 v119.3335 431.4165 137.25 429.5835 145.8335 428.5835 c154.417 427.5835 198.5005 435.416 206.8335 402.333 c207.667 409.6665 l192.667 431.5 l105.75 482.583 lf1 0 0 0.2 k208.3335 397.667 m208.3335 412.6665 188.6665 434 166.6665 434 c144.6665 434 132 435.667 117.6665 445.3335 c100.4766 456.9263 102.0005 481.667 109.3335 490.667 c111.333 461.667 134.6665 451.3335 v158 441 183.6665 447.667 197 430.667 c210.3335 413.667 208.3335 397.667 yf1 0.19 0 0.32 k222.375 525.25 m222 521.0625 224.5 517.625 v227 514.1875 234.5 514.5 235.5625 519.5625 c236.625 524.625 238.375 522.8125 242.875 521.0625 c247.375 519.3125 253.375 526.375 251 532.3125 c222.375 525.25 lf472.75 625.75 m471.625 610.875 463.125 597 v454.625 583.125 427.375 577.875 413.375 591.375 c399.375 604.875 399.625 632.625 404.125 636 c472.75 625.75 lf426.875 468.5 m426.875 460.5 433 454 443.75 454 c454.5 454 463.375 465 460.875 475.25 c426.875 468.5 lf429.334 289.083 m416.5 290.083 416.5 281.833 v416.5 273.583 415.583 267.834 426.5 261.917 c437.417 256 424.25 253.834 432.167 240.167 c440.084 226.5 449.6133 222.6982 459.625 222.667 c473.25 222.625 478.083 238.084 477.5 243.917 c429.334 289.083 lf501.5 312.875 m501.1875 310.3125 499.5 300.9375 492.1875 300.9375 c484.875 300.9375 477.9375 309.6875 480.375 315.125 c501.5 312.875 lf511.584 363.166 m509 364.165 511 361.249 v513 358.333 521.084 358.415 524.5 353.249 c527.916 348.083 529.75 333.75 539.916 331.333 c550.084 328.916 561.583 339.25 560.666 348.833 c511.584 363.166 lf520.834 445.166 m534.167 440.166 536.334 416.666 v538.5 393.166 526.167 370.334 496.334 371.5 c466.5 372.666 399.834 401.334 419.834 363.5 c409.5 368.166 l408.334 397.166 l470 408.8325 l520.834 445.166 lf1 0 0 0.2 k415.5 368.666 m414 374.666 411 386.167 421.667 388.5 c432.334 390.833 447.5 385.834 468.167 381 c488.834 376.166 515.834 377.333 527.5 398.333 c536.5176 414.5649 536.5 429.833 526.334 440.9995 c461.5 406.833 l416.667 400.666 l405.5 385 l415.5 368.666 lf64.1665 423.7495 m63 420.9165 62.75 414.2495 71.75 407.7495 c80.75 401.25 93 400.75 100.5 408.4995 c108 416.2495 114.5 419.4995 125.25 418.083 c131.6162 417.2441 138.0835 417.4995 133.8335 420.083 c129.5835 422.6665 105.2505 425.2495 98.8335 425.083 c92.4165 424.9165 64.1665 423.7495 yf1 D1 0 0 0 k70.6357 431.0127 m53.4307 421.1367 71.4292 405.1519 87.8081 405.8354 c108.6909 406.707 93.9673 423.1636 133.2686 419.772 c140.8579 419.1147 87.8413 440.8896 70.6357 431.0127 cf0 D1 0 0 0.2 k360.75 166.75 m366 131 400.75 131 v435.5 131 457.25 163.75 412.5 196.5 c360.75 166.75 lf*u1 D1 0 0 0 k419.4902 364.8682 m408.0762 377.3203 410.6699 397.0352 433.498 392.8848 c456.3262 388.7344 506.1348 367.4629 526.3691 402.2236 c546.6025 436.9854 514.4355 463.9644 485.9004 438.0229 c457.3643 412.0815 420.0088 404.8179 402.3691 415.1943 c384.7285 425.5708 381.6152 454.1064 404.9629 453.0688 c428.3105 452.0313 425.7158 483.1606 411.1895 490.4243 c396.6621 497.688 402.3691 512.2148 410.6699 524.1479 c418.9707 536.0811 422.084 545.939 404.9629 571.3613 c387.8418 596.7837 352.5615 574.9932 350.4863 554.7588 c348.4111 534.5244 329.2148 475.897 299.6411 459.2949 c270.0679 442.6924 262.8042 456.7007 262.8042 485.7549 c262.8042 514.8091 240.4951 514.2905 232.7124 503.395 c224.9302 492.4995 242.5703 472.2656 242.5703 447.8804 c242.5703 423.4956 212.9971 399.1113 190.6875 450.4746 c168.3779 501.8384 132.0601 517.4033 111.8257 494.5752 c91.5913 471.7466 123 438.5415 156.4448 438.5415 c184.9854 438.5415 202.6206 422.458 206.771 401.7051 c210.9219 380.9521 170.9722 384.0654 156.4448 402.2236 c141.918 420.3828 112.8633 408.4497 120.6455 378.3584 c128.4282 348.2656 198.9888 380.9521 208.3276 356.5674 c217.6665 332.1826 190.6875 324.9189 167.8589 314.0234 c145.0308 303.1279 161.6328 281.3369 180.311 294.3076 c198.9888 307.2783 212.478 312.9854 219.7417 301.0527 c227.0054 289.1201 211.9595 289.1201 195.876 258.5088 c179.792 227.8984 128.9473 228.417 126.8716 192.6182 c124.7964 156.8184 174.085 145.9238 187.0557 166.6768 c200.0264 187.4297 185.499 211.8145 209.3652 254.877 c233.2314 297.9395 259.1729 277.7051 Y279.9258 268.3662 239.9761 255.915 242.0513 213.3711 c243.0171 193.5693 278.8882 198.8438 278.8882 212.8525 c278.8882 226.8604 254.8491 264.7334 316.0703 279.6074 c377.292 294.4805 360.3438 212.5059 359.6523 173.7666 c358.96 135.0283 407.3848 127.418 425.0244 144.3662 c442.6641 161.3154 431.5957 181.7217 406 201.7832 c380.4053 221.8447 367.6074 265.0801 365.5322 288.5996 c363.457 312.1201 391.1279 307.9697 Y402.7148 307.623 402.3691 295.8643 417.9336 300.5342 c433.498 305.2031 408.5947 326.9941 410.6699 333.2197 c412.7451 339.4463 430.9043 330.1074 448.5449 316.0986 c466.1846 302.0908 473.4482 325.4375 467.2227 337.8896 c460.9961 350.3418 430.9043 352.417 419.4902 364.8682 cf*U0 D394.5 141 m376.75 146.75 363.25 160.25 365.75 185.75 c368.25 211.25 369.25 219.5 367.25 238 c365.25 256.5 364.75 279.5 374.5 239.75 c384.25 200 395 191.25 391.75 174.75 c388.5 158.25 394.5 141 yBb1 (Unnamed gradient 6) 365.4512 201.3184 0 29.0488 1 0 0 1 0 0 Bg29.0488 0 0 -142.5 365.4512 281.5 Xm8255.6523 0 0 -142.5 -7890.2012 281.5 Bc13.4071 0 0 -142.5 365.4512 281.5 Bm8255.6523 0 0 -142.5 378.8584 281.5 Bcf0 BB525.2881 402.2568 m521.2256 393.1162 508.2764 388.5459 v495.3281 383.9766 474 384.2305 454.957 391.8467 c435.915 399.4639 431.0908 403.2725 422.7119 404.2881 c431.3447 403.2725 447.5938 405.5576 v463.8438 407.8428 523.0029 434.5024 525.2881 402.2568 cBb1 (Unnamed gradient 25) 422.7119 401.8018 0 102.5762 1 0 0 1 0 0 Bg102.5762 0 0 -54.5259 422.7119 436.5024 Xm8310.7119 0 0 -54.5259 -7888 436.5024 Bc102.5762 0 0 -54.5259 422.7119 436.5024 Bm8310.7119 0 0 -54.5259 525.2881 436.5024 Bcf0 BB0.6 0 0 0 k531.666 423.333 m531.666 438.5 519.25 447 509.75 447 c500.25 447 489.75 440.25 487.75 438 c485.75 435.75 457.5 409.25 423.25 409.25 c389 409.25 386.75 435.5 386.75 437.75 c382 406 422.834 406 v463.666 406 521.166 439.5 524.5 402 c531.666 412.1665 531.666 423.333 vf0.3 0 0 0 k445.666 410.833 m462.334 416.167 476 425.8335 v489.666 435.5 495.333 445.1665 509.166 445.1665 c523 445.1665 525.166 435.5005 525.166 429.3335 c525.166 423.1665 519 421 506.334 424.1665 c490.0635 428.2339 452.166 412.4995 445.666 410.833 cf0.6 0 0 0 k401.75 139.25 m418.25 139.25 431.25 150.25 431.25 163.25 c431.25 176.25 415.25 192 401.75 202.25 c388.25 212.5 374.75 238.75 369.5 258.25 c374.25 225.75 381.5 208.5 v388.75 191.25 383 173.25 383 156.75 c383 140.25 399.5 139.25 401.75 139.25 cf402 144.75 m409.25 144.75 425.75 149.5 425.75 163.5 c425.75 177.5 406.5 190.25 402.25 193.5 c393.2236 200.4023 391 202.75 392 193.25 c393 183.75 378.25 144.75 402 144.75 cBb1 (Unnamed gradient 17) 407.0664 199.5508 -90 54.8008 1 0 0 1 0 0 Bg-0.000002 -54.8008 -51.5 0.000002 427.75 199.5508 Xm-0.000363 -8298.2656 -51.5 0.000002 427.75 8497.8164 Bc-0.000002 -54.8008 -51.5 0.000002 427.75 199.5508 Bm-0.000363 -8298.2656 -51.5 0.000002 427.75 144.75 Bcf0 BB402 149 m405 149 418.75 154.5 418.75 158.75 c418.75 163 404.75 158 399.5 158 c394.25 158 394.5 149 402 149 cBb1 (Unnamed gradient 18) 407.332 160.4619 -90 11.4619 1 0 0 1 0 0 Bg-0.000001 -11.4619 -28.5 0.000001 420.75 160.4619 Xm-0.000363 -8297.8701 -28.5 0.000001 420.75 8458.332 Bc-0.000001 -11.4619 -28.5 0.000001 420.75 160.4619 Bm-0.000363 -8297.8701 -28.5 0.000001 420.75 149 Bcf0 BB1 0 0 0.2 k480.0352 314.2842 m479.707 308.7266 483.9512 305.7949 v488.1953 302.8643 492.0361 302.1318 495.5732 303.8496 c499.1094 305.5684 501.7881 309.8633 501.5859 313.9053 c500.1582 306.0225 492.6289 306.0225 v485.1006 306.0225 480.0352 314.2842 yf1 D1 0 0 0 k492.3643 305.0371 m496.4199 305.0371 504.7119 310.7227 500.7012 318.2725 c496.6895 325.8223 487.8594 326.0215 481.3545 317.5645 c476.6357 311.4307 485.3535 305.0371 492.3643 305.0371 cf491.9102 317.0508 m496.0781 315.3076 502.9053 311.0645 499.3896 317.6816 c495.874 324.2988 488.1338 324.4736 482.4316 317.0605 c478.2949 311.6846 485.9219 319.5547 491.9102 317.0508 cBb1 (Unnamed gradient 2) 481.2539 318.3662 0 19.1084 1 0 0 1 0 0 Bg19.1084 0 0 -17.4092 481.2539 326.4736 Xm8372.2129 0 0 -17.4092 -7890.959 326.4736 Bc19.1084 0 0 -17.4092 481.2539 326.4736 Bm8372.2129 0 0 -17.4092 500.3623 326.4736 Bcf0 BB0 D488.6123 321.0293 m489.7949 321.6602 493.1602 322.584 495.9648 320.4609 c498.7695 318.3389 498.8438 316.5645 498.8066 316.2168 c498.6934 315.1563 496.2305 316.748 495.2441 318.2256 c494.2598 319.7031 492.2891 321.1816 490.7725 320.9541 c489.2568 320.7266 487.4756 320.4238 488.6123 321.0293 cBb1 (Unnamed gradient 1) 488.252 318.8271 0 10.5605 1 0 0 1 0 0 Bg10.5605 0 0 -11.4277 488.252 324.584 Xm8377.0283 0 0 -11.4277 -7888.7764 324.584 Bc8.18152 0 0 -11.4277 488.252 324.584 Bm8377.0283 0 0 -11.4277 496.4336 324.584 Bcf0 BB0 0 0 0 k494.6758 320.4609 m496.9492 319.1729 497.7461 317.543 v498.541 315.9141 496.6094 317.3281 496.1543 318.2637 c495.8721 318.8428 495.0547 320.1582 494.6758 320.4609 cf1 0 0 0.2 k426.9688 467.1709 m428.5791 459.9453 436.2793 458.1865 v443.9785 456.4292 450.2139 457.2803 455.043 461.1099 c459.8721 464.9404 462.3887 471.6509 460.5332 476.7012 c461.3252 466.0059 449.6504 462.5078 v437.9746 459.0093 426.9688 467.1709 yf/BBAccumRotation (0.291085) XT1 D1 0 0 0 k449.6143 461.1304 m455.9033 463.0146 466.5938 474.1025 457.4961 481.8477 c448.3975 489.5928 434.6279 485.7441 427.7646 471.958 c422.7871 461.9604 438.7422 457.874 449.6143 461.1304 cf/BBAccumRotation (0.291085) XT444.3281 476.209 m451.457 475.9272 463.6631 473.6987 455.6875 480.4868 c447.7129 487.2749 435.6436 483.9019 429.627 471.8174 c425.2637 463.0542 434.0879 476.6133 444.3281 476.209 cBb1 (Unnamed gradient 2) 401.0996 314.4766 0 30.9346 0.9579 -0.287 0.3059 1.0211 -2155.5151 2045.1056 Bg29.6322 8.87822 6.33637 -21.1509 424.3643 482.7476 Xm7944.7173 2380.3464 6.33637 -21.1509 -7520.353 -1897.5986 Bc29.6322 8.87822 6.33637 -21.1509 424.3643 482.7476 Bm7944.7173 2380.3464 6.33637 -21.1509 453.9961 491.626 Bcf0 BB/BBAccumRotation (0.291085) XT0 D437.6992 479.7402 m439.291 481.0923 444.1582 483.8315 449.3164 482.4326 c454.4756 481.0352 455.2676 478.811 455.3428 478.3516 c455.5703 476.9492 451.1445 477.8311 449.0527 479.2534 c446.9609 480.6758 443.3418 481.6421 441.0762 480.6484 c438.8145 479.6548 436.167 478.4414 437.6992 479.7402 cBb1 (Unnamed gradient 1) 412.4287 315.0508 0 17.0957 0.9579 -0.287 0.3059 1.0211 -2155.5151 2045.1056 Bg16.376 4.90647 4.05556 -13.5376 435.9365 483.5942 Xm7952.1855 2382.5842 4.05556 -13.5376 -7516.249 -1898.9902 Bc12.6869 3.80116 4.05556 -13.5376 435.9365 483.5942 Bm7952.1855 2382.5842 4.05556 -13.5376 448.623 487.3955 Bcf0 BB/BBAccumRotation (0.291085) XT0 0 0 0 k447.3184 481.8345 m451.3359 481.2515 453.1914 479.5464 v455.0469 477.8438 451.5098 478.7451 450.4473 479.7241 c449.791 480.3301 448.0225 481.625 447.3184 481.8345 cf/BBAccumRotation (0.291085) XT1 0 0 0.2 k276.6865 186.4707 m271.7939 183.7959 272.5923 177.2529 v273.3921 170.7109 275.7183 165.8477 279.8584 162.6855 c283.9995 159.5225 289.6353 158.7744 292.856 161.2324 c285.1807 158.5547 279.4214 167.2988 v273.6621 176.043 276.6865 186.4707 yf1 D1 0 0 0 k278.3955 167.0645 m281.498 162.3555 292.5894 155.8516 295.8257 164.6631 c299.063 173.4746 292.4741 183.8398 280.4351 186.7432 c271.7031 188.8496 273.0327 175.207 278.3955 167.0645 cf288.0811 174.2012 m289.8135 168.4014 291.4932 158.1377 294.3296 165.8613 c297.1665 173.584 291.3911 182.6699 280.8384 185.2148 c273.1846 187.0615 285.5908 182.5332 288.0811 174.2012 cBb1 (Unnamed gradient 2) -35.8447 701.4521 0 26.5752 0.5501 0.8351 -0.8351 0.5501 10433.4277 -2492.9688 Bg14.619 -22.1929 -14.5388 -9.57706 287.7983 191.7588 Xm4321.7349 -6560.7725 -14.5388 -9.57706 -4033.9365 6752.5313 Bc14.619 -22.1929 -14.5388 -9.57706 287.7983 191.7588 Bm4321.7349 -6560.7725 -14.5388 -9.57706 302.4175 169.5654 Bcf0 BB0 D288.8809 180.2197 m290.312 179.1934 293.6582 175.792 294.0303 171.3682 c294.4038 166.9434 292.979 165.8799 292.6602 165.7324 c291.688 165.2803 291.1328 169.0166 291.6133 170.9736 c292.0933 172.9316 291.8203 176.0332 290.4707 177.6689 c289.1211 179.3047 287.5059 181.2061 288.8809 180.2197 cBb1 (Unnamed gradient 1) -26.1123 701.9131 0 14.6865 0.5501 0.8351 -0.8351 0.5501 10433.4277 -2492.9688 Bg8.07906 -12.2647 -9.54371 -6.28666 291.5732 182.5928 Xm4325.418 -6566.3643 -9.54371 -6.28666 -4033.8447 6748.957 Bc6.25905 -9.50178 -9.54371 -6.28666 291.5732 182.5928 Bm4325.418 -6566.3643 -9.54371 -6.28666 297.8325 173.0908 Bcf0 BB0 0 0 0 k293.0449 172.8633 m293.7085 169.5146 292.9561 167.6934 v292.2046 165.873 291.9072 168.8965 292.3403 169.9395 c292.6084 170.585 293.082 172.2568 293.0449 172.8633 cf1 0 0 0.2 k145.1387 288.207 m150.1636 285.3555 145.0298 279.4629 v139.8936 273.5732 133.7124 269.3408 126.1055 266.8125 c118.4976 264.2822 110.3418 264.0791 107.4639 266.5918 c116.2876 263.501 129.5537 270.9775 v142.8203 278.4531 145.1387 288.207 yf1 D1 0 0 0 k140.1895 288.7734 m121.9604 287.1504 106.5596 278.2686 105.5313 269.9688 c104.5024 261.668 123.6636 266.6514 130.8101 270.6777 c143.1631 277.6377 153.4121 289.9512 140.1895 288.7734 cf138.6948 287.417 m122.7168 285.9941 109.2153 278.208 108.3149 270.9326 c107.4121 263.6563 116.0493 272.8623 122 278 c130.5493 285.376 150.2842 288.4482 138.6948 287.417 cBb1 (Unnamed gradient 2) -940.8628 -385.0781 0 26.5752 -1.2671 0.714 0.8 0.5719 9645.9785 -1791.5779 Bg-33.6734 -18.9747 13.9281 -9.95687 133.2393 293.9688 Xm-8807.9297 -4963.1938 13.9281 -9.95687 8941.168 5257.1626 Bc-33.6734 -18.9747 13.9281 -9.95687 133.2393 293.9688 Bm-8807.9297 -4963.1938 13.9281 -9.95687 99.5659 274.9941 Bcf0 BB0 D124.6279 283.5479 m122.04 282.7344 115.3696 279.9199 112.1279 275.9219 c108.8823 271.9258 110.1699 270.8359 110.5132 270.6738 c111.562 270.1787 114.6284 273.5361 115.1831 275.3584 c115.7378 277.1836 118.0283 279.9844 120.8823 281.3594 c123.7349 282.7354 127.1152 284.3311 124.6279 283.5479 cBb1 (Unnamed gradient 1) -931.1304 -384.6172 0 14.686 -1.2671 0.714 0.8 0.5719 9645.9785 -1791.5779 Bg-18.6087 -10.4858 9.14141 -6.53496 122.4204 285.9375 Xm-8816.418 -4967.9761 9.14141 -6.53496 8938.8379 5253.9136 Bc-14.4166 -8.12363 9.14141 -6.53496 122.4204 285.9375 Bm-8816.418 -4967.9761 9.14141 -6.53496 108.0039 277.8135 Bcf0 BB0 0 0 0 k114.3965 277.2021 m111.4204 274.207 111.3218 272.4844 v111.2227 270.7627 113.4976 273.4912 113.5508 274.4785 c113.5845 275.0889 113.9707 276.6514 114.3965 277.2021 cf119 497.333 m111 489 102.0005 476.9995 117.3335 460.333 c132.6665 443.6665 156.3335 445 171.3335 442.6665 c186.3335 440.333 200.9995 424.6665 203.6665 420.6665 c206.3335 416.6665 221.333 401.666 216.6665 413.333 c212 425 212.333 416 193.6665 437 c175 458 119 497.333 yBb1 (Unnamed gradient 11) 157.9355 423.5972 76 62.1265 1 0 0 1 0 0 Bg15.0298 60.281 133.9131 -33.3883 90.7983 440.3364 Xm1947.9255 7812.7026 133.9131 -33.3883 -1857.127 -7372.3662 Bc11.3962 45.7076 133.9131 -33.3883 90.7983 440.3364 Bm1947.9255 7812.7026 133.9131 -33.3883 102.1943 486.0439 Bcf0 BB1 Ap0 0 0 0 k519.7617 431.0391 m518.1465 428.6318 513.6816 428.7964 509.79 431.4072 c505.8975 434.019 504.0527 438.0879 505.668 440.4956 c507.2832 442.9033 511.748 442.7383 515.6396 440.127 c519.5313 437.5156 521.377 433.4473 519.7617 431.0391 cf0 Ap0.6 0 0 0 k132.5 503 m144.4868 503.5605 162.625 496.75 179 469 c195.375 441.25 193.25 433.25 210.125 421.875 c192.6895 433.4253 184.875 442.625 v167.25 463.375 156.125 459.25 133.75 470 c111.375 480.75 111.125 502 132.5 503 cf132.5 500.8335 m145.7881 501.9336 162.1665 491.5 174.5 470 c186.8335 448.5 190.6665 440.5005 191.1665 439.8335 c186.6665 447 179.1665 456.5 v171.6665 466 164 475 150.3335 476.3335 c123.79 478.9233 106.3335 498.667 132.5 500.8335 cBb1 (Unnamed gradient 8) 119.5757 470.373 0 71.5908 1 0 0 1 0 0 Bg71.5908 0 0 -66.1001 119.5757 503.9336 Xm8020.8179 0 0 -66.1001 -7901.2422 503.9336 Bc71.5908 0 0 -66.1001 119.5757 503.9336 Bm8020.8179 0 0 -66.1001 191.1665 503.9336 Bcf0 BB0 0 0 0 k134 499 m140.6646 498.8311 152.1665 494 152.1665 487.8335 c152.1665 481.6665 136.333 480.4995 130.1665 485.1665 c124 489.8335 120.8335 499.3335 134 499 cf65.1665 421.6665 m65.1665 428.333 74.75 432.333 84 432.333 c93.25 432.333 114.583 426.6665 128.4165 421.583 c123.166 422.4165 107.333 422.9165 v91.5 423.4165 89.7495 413.7495 77.583 413.7495 c65.4165 413.7495 65.1665 419.6665 65.1665 421.6665 cBb1 (Unnamed gradient 15) 73.5327 407.2676 35 53.1693 1 0 0 1 0 0 Bg43.5537 30.4967 26.2747 -37.5242 59.7354 426.9722 Xm6524.1064 4568.229 26.2747 -37.5242 -6464.3711 -4141.2568 Bc43.5537 30.4967 26.2747 -37.5242 59.7354 426.9722 Bm6524.1064 4568.229 26.2747 -37.5242 103.2891 457.4688 Bcf0 BB83.75 431.4165 m91.083 431.4165 108.1665 427.0825 108.1665 425.7495 c108.1665 424.4165 98.9165 426.5835 89.9165 422.9165 c80.9165 419.2495 79.3335 418.0825 73.75 419.9995 c68.1665 421.9165 68.417 431.4165 83.75 431.4165 cBb1 (Unnamed gradient 12) 70.417 425.252 0 37.7495 1 0 0 1 0 0 Bg37.7495 0 0 -17.334 70.417 433.4165 Xm7960.6675 0 0 -17.334 -7890.2505 433.4165 Bc37.7495 0 0 -17.334 70.417 433.4165 Bm7960.6675 0 0 -17.334 108.1665 433.4165 Bcf0 BB0 0 0 0 k71.9165 424.4995 m71.9165 426.6665 76.5 429.7495 83.9165 429.7495 c91.333 429.7495 85.9995 427.666 82.833 426.4995 c79.6665 425.333 71.9165 418.916 71.9165 424.4995 cf1 0 0 0.2 k560.6895 348.3486 m560.8887 345.5264 559.6289 339.5674 551.9961 336.291 c544.3633 333.0127 535.7676 335.9268 532.2363 344.8271 c528.7041 353.7275 524.8984 358.3799 517.1445 360.0713 c512.5527 361.0752 508.127 363.0723 511.627 364.1895 c515.127 365.3086 532.543 360.9258 536.9531 359.0215 c541.3633 357.1172 560.6895 348.3486 yf1 D1 0 0 0 k511.9512 363.7607 m539.9131 355.9932 526.1758 345.4873 540.459 338.998 c551.6611 333.9082 567.5664 343.1006 557.7656 356.5371 c547.9648 369.9746 506.5508 365.2588 511.9512 363.7607 cf0 D559.5488 346.7822 m560.9805 352.6709 555.1992 358.8301 548.7891 361.3633 c542.3789 363.8965 526.3809 364.7344 515.7021 364.0313 c519.5195 363.3301 530.5986 359.4355 v541.6768 355.541 540.8125 346.5205 549.2441 343.1885 c557.6748 339.8564 559.1191 345.0146 559.5488 346.7822 cBb1 (Unnamed gradient 15) -737.8203 535.0293 35 42.1062 -0.9552 -0.2961 -0.2961 0.9552 17648.5 2672.8962 Bg-25.795 33.2821 -25.948 -20.1108 565.8652 349.6348 Xm-4381.9893 5653.8672 -25.948 -20.1108 4947.8545 -5304.2324 Bc-25.795 33.2821 -25.948 -20.1108 565.8652 349.6348 Bm-4381.9893 5653.8672 -25.948 -20.1108 540.0703 382.917 Bcf0 BB548.7656 360.4863 m543.6846 362.4941 530.916 363.3438 530.6289 362.166 c530.3428 360.9893 537.2178 360.3701 542.666 354.666 c548.1152 348.9609 548.9609 347.4961 553.2422 347.6611 c557.5234 347.8252 559.3906 356.2861 548.7656 360.4863 cBb1 (Unnamed gradient 12) -738.4116 548.6245 0 28.1328 -0.9552 -0.2961 -0.2961 0.9552 17648.5 2672.8962 Bg-26.8725 8.33013 -4.96343 -16.0117 559.3301 359.7383 Xm-6831.0073 2117.5266 -4.96343 -16.0117 7390.3379 -1757.7881 Bc-26.8725 8.33013 -4.96343 -16.0117 559.3301 359.7383 Bm-6831.0073 2117.5266 -4.96343 -16.0117 532.458 368.0684 Bcf0 BB0 0 0 0 k555.4795 351.1338 m555.9453 353.0488 553.4316 357.0273 548.293 359.0586 c543.1523 361.0898 546.4014 357.7891 548.3447 355.8906 c550.2881 353.9922 554.2803 346.2012 555.4795 351.1338 cf1 0 0 0.2 k476.2422 238.5801 m474.2988 235.5479 474.9375 229.2549 459.6797 228.2002 c446.3965 227.2832 429.4375 245.7305 432.6016 257.501 c435.7637 269.2715 420.2344 263.4209 419.293 279.3203 c418.5186 292.3955 431.875 289.1904 436.2969 287.6699 c440.7207 286.1514 455.165 268.4336 458.2188 263.1367 c461.2734 257.8379 476.2422 238.5801 yf1 D1 0 0 0 k435.542 287.9473 m426.9023 289.918 419.4404 283.3066 423.7773 275.0859 c427.5332 267.9668 433.4082 270.0439 437.1055 262.082 c438.6709 258.708 434.3906 251.0234 439.4551 243.666 c451.5078 226.1533 477.8359 222.6113 477.5742 244.7734 c477.3242 265.9414 442.4961 286.3604 435.542 287.9473 cf0 D466 233 m460.582 228.5674 442.25 239.25 442.5 252.5 c442.75 265.75 446.5 265.25 438.25 272.25 c430 279.25 436.75 290.25 446 279 c455.25 267.75 468.75 235.25 466 233 cBb1 (Unnamed gradient 40) 431.2588 261.2705 -10 39.3174 1 0 0 1 0 0 Bg38.7201 -6.82739 -10.5242 -59.6857 436.7275 292.2852 Xm8197.166 -1445.3816 -10.5242 -59.6857 -7760.4385 1737.667 Bc38.7201 -6.82739 -10.5242 -59.6857 436.7275 292.2852 Bm8197.166 -1445.3816 -10.5242 -59.6857 475.4473 285.458 Bcf0 BB471.6338 234.2451 m477.5732 239.168 476.3555 249.8506 471.7402 257.3105 c467.123 264.7695 451.4297 277.792 439.9961 285.1934 c443.3594 281.5762 451.7061 269.1758 v460.0527 256.7764 452.3105 248.2256 458.3828 238.4141 c464.4551 228.5996 469.8516 232.7686 471.6338 234.2451 cBb1 (Unnamed gradient 15) -441.8242 746.9307 35 53.5946 -0.5891 -0.8081 -0.8081 0.5891 19063.7871 9751.3066 Bg-1.02126 53.5866 -40.6868 -0.775414 479.7041 232.3438 Xm-141.9547 7448.5156 -40.6868 -0.775414 621.6592 -7216.1719 Bc-1.02126 53.5866 -40.6868 -0.775414 479.7041 232.3438 Bm-141.9547 7448.5156 -40.6868 -0.775414 478.6826 285.9307 Bcf0 BB471.0488 256.4336 m467.3887 262.3457 455.002 272.9238 453.8145 271.9385 c452.627 270.9561 459.1729 265.0957 460.3965 255.1299 c461.6211 245.1631 461.3701 243.0254 465.8652 239.9375 c470.3604 236.8496 478.6992 244.0664 471.0488 256.4336 cBb1 (Unnamed gradient 12) -442.5776 764.2354 0 35.8076 -0.5891 -0.8081 -0.8081 0.5891 19063.7871 9751.3066 Bg-21.0943 28.9361 -16.3593 -11.9258 480.8223 247.3135 Xm-4387.4492 6018.4985 -16.3593 -11.9258 4868.2715 -5771.1855 Bc-21.0943 28.9361 -16.3593 -11.9258 480.8223 247.3135 Bm-4387.4492 6018.4985 -16.3593 -11.9258 459.7275 276.25 Bcf0 BB0 0 0 0 k470.7891 241.7813 m472.7207 243.3828 473.1816 249.3535 469.4805 255.335 c465.7783 261.3174 466.584 255.4775 467.125 252.0615 c467.6641 248.6465 465.8145 237.6592 470.7891 241.7813 cf1 0 0 0.2 k242.6104 539.3765 m244.541 538.5845 247.8345 538.6709 250.7329 532.998 c253.2559 528.0596 245.9072 522.2212 239.0806 523.6733 c232.2563 525.125 237.7808 519.2363 229.3579 519.2671 c222.4302 519.2925 222.1182 524.1602 222.2612 525.7607 c222.4043 527.3618 229.7441 532.2861 232.1323 533.2905 c234.52 534.2944 242.6104 539.3765 yf1 D1 0 0 0 k222.2275 525.4883 m222.4858 522.3369 227.1865 519.417 230.9541 520.8267 c234.2158 522.0469 232.1997 524.271 235.9253 525.4497 c237.5039 525.9497 242.2979 524.1812 245.4888 525.8804 c253.0835 529.9243 250.9707 539.5859 239.0693 540.0176 c227.7026 540.4292 222.02 528.0244 222.2275 525.4883 cf0 D245.6504 537.5669 m242.0898 539.8833 236.5205 539.687 233.2065 538.1563 c229.8926 536.6255 225.2729 531.127 223.0308 527.0708 c224.4663 528.23 229.8726 531.0239 v235.2788 533.8169 241.0684 530.7485 245.4282 532.7612 c249.7881 534.7754 246.7183 536.8721 245.6504 537.5669 cBb1 (Unnamed gradient 15) -127.291 -223.6113 35 25.6434 -0.7174 0.6967 0.6967 0.7174 7559.5996 -3674.4927 Bg-25.317 -4.08293 2.27789 -14.1245 246.3887 543.3032 Xm-7663.8906 -1235.9734 2.27789 -14.1245 7910.2793 1779.2764 Bc-25.317 -4.08293 2.27789 -14.1245 246.3887 543.3032 Bm-7663.8906 -1235.9734 2.27789 -14.1245 221.0718 539.2202 Bcf0 BB233.7847 537.8794 m231.1572 536.6655 227.3501 532.333 228.0625 531.8701 c228.7729 531.4067 230.9307 533.6909 236.1138 533.9058 c241.2964 534.1216 242.4873 533.9775 243.4644 535.5679 c244.4414 537.1577 239.2788 540.417 233.7847 537.8794 cBb1 (Unnamed gradient 12) -124.8032 -216.6191 0 14.3647 -0.7174 0.6967 0.6967 0.7174 7559.5996 -3674.4927 Bg-10.3053 -10.0079 9.62929 -9.91539 236.0771 544.231 Xm-5570.0869 -5409.3667 9.62929 -9.91539 5806.1641 5953.5977 Bc-10.3053 -10.0079 9.62929 -9.91539 236.0771 544.231 Bm-5570.0869 -5409.3667 9.62929 -9.91539 225.772 534.2231 Bcf0 BB0 0 0 0 k241.7178 537.4346 m240.561 538.187 237.2734 538.5 234.6152 537.2729 c231.958 536.0454 234.981 536.2046 236.7388 536.3228 c238.4961 536.4419 244.6992 535.4951 241.7178 537.4346 cf1 0 0 0.2 k401.709 630 m400.625 611.667 414.625 602 v428.625 592.333 441.292 589.916 452.959 595.583 c464.625 601.25 473.459 615.417 472.792 628.75 c468.083 602.75 443.25 602.75 v418.417 602.75 401.709 630 yf1 D1 0 0 0 k442.375 599.5 m455.75 599.5 483.1016 618.2524 469.8721 643.1553 c456.6426 668.0576 427.5156 668.7139 406.0596 640.8203 c390.4961 620.5874 419.25 599.5 442.375 599.5 cf440.875 639.125 m454.625 633.375 477.1426 619.3779 465.5469 641.2061 c453.9512 663.0342 428.4199 663.6094 409.6133 639.1597 c395.9707 621.4248 421.124 647.3843 440.875 639.125 cBb1 (Unnamed gradient 2) 405.7295 643.4639 0 63.0273 1 0 0 1 0 0 Bg63.0273 0 0 -48.2314 405.7295 665.6094 Xm8303.4883 0 0 -48.2314 -7897.7588 665.6094 Bc63.0273 0 0 -48.2314 405.7295 665.6094 Bm8303.4883 0 0 -48.2314 468.7568 665.6094 Bcf0 BB0 D430 652.25 m433.8984 654.3291 445 657.375 454.25 650.375 c463.5 643.375 463.748 637.521 463.625 636.375 c463.25 632.875 455.125 638.125 451.875 643 c448.625 647.875 442.125 652.75 437.125 652 c432.125 651.25 426.25 650.25 430 652.25 cBb1 (Unnamed gradient 1) 428.8105 644.9844 0 34.832 1 0 0 1 0 0 Bg34.832 0 0 -28.5 428.8105 659.375 Xm8319.3711 0 0 -28.5 -7890.5605 659.375 Bc26.9852 0 0 -28.5 428.8105 659.375 Bm8319.3711 0 0 -28.5 455.7959 659.375 Bcf0 BB0 0 0 0 k450 650.375 m457.5 646.125 460.125 640.75 v462.75 635.375 456.375 640.0415 454.875 643.125 c453.9453 645.0361 451.25 649.375 450 650.375 cf1 0 0 0.2 k54.5835 460.6665 m53.7163 457.3418 53.667 450.3335 59.0835 446 c64.5 441.6665 86.5 442.7495 80.25 445.083 c74 447.4165 65.4165 449.4165 63.5 452.6665 c61.5835 455.9165 55.0835 462.583 54.5835 460.6665 cf1 D1 0 0 0 k80.1304 445.1846 m65.1846 452.1323 72.8291 459.1504 65.248 464.5366 c59.3018 468.7622 50.5137 462.8008 55.5264 452.5601 c60.5386 442.3193 83.0166 443.8438 80.1304 445.1846 cf0 D0.6 0 0 0 k60.875 465 m57.625 465 54.75 462.125 54.75 458.375 c54.75 454.625 64.375 454.875 71.5 449.125 c68.25 454.375 68.25 456.75 v68.25 459.125 65.625 465 60.875 465 cf61.5 463.625 m58.125 463.625 57.25 461.625 57.25 459.75 c57.25 457.875 64.625 457.875 66 455.375 c66.25 463.625 61.5 463.625 vBb1 (Unnamed gradient 10) 61.6265 463.625 -90 8.25 1 0 0 1 0 0 Bg0 -8.25 -13 0.000001 68.25 463.625 Xm-0.000347 -7949.6265 -13 0.000001 68.2505 8413.252 Bc0 -8.25 -13 0.000001 68.25 463.625 Bm-0.000347 -7949.6265 -13 0.000001 68.25 455.375 Bcf0 BB0 0 0 0 k63.75 460.5 m60.375 464.25 58.625 460.5 v60.75 462.375 63.75 460.5 vf147.6665 164.999 m131.6665 173.333 131.6665 189.666 v131.6665 205.999 143 215.665 167 226.999 c191 238.333 199.0005 253 203.3335 261.333 c207.6665 269.666 218.6665 281.667 221 283.333 c210 266 204 253.333 v198 240.666 182.3335 204.665 176.3335 200.999 c170.3335 197.333 147.6665 164.999 yBb1 (Unnamed gradient 25) 176.3335 283.333 -90 118.334 1 0 0 1 0 0 Bg-0.000005 -118.334 -93.3335 0.000004 223 283.333 Xm-0.000353 -8064.334 -93.3335 0.000004 223.0005 8347.667 Bc-0.000005 -118.334 -93.3335 0.000004 223 283.333 Bm-0.000353 -8064.334 -93.3335 0.000004 223 164.999 Bcf0 BB0.6 0 0 0 k205 254.5 m195.5 235.25 194.5 228 v193.5 220.75 191.5 203.25 191.5 194 c191.5 184.75 189.75 158.5 167 158.5 c144.25 158.5 129.25 177.25 141 191 c152.75 204.75 170.25 202.25 182 221.25 c193.75 240.25 200 248.25 205 254.5 cf166.5 163.5 m171.75 163.5 187.25 169.5 187.25 189.75 c187.25 210 188.5 211.25 185.5 212.75 c182.5 214.25 179 204.5 169 201.5 c159 198.5 144 191 144 181.75 c144 172.5 150.5 163.5 166.5 163.5 cBb1 (Unnamed gradient 17) 192.9766 204.4189 220 56.2787 1 0 0 1 0 0 Bg-43.112 -36.1752 -31.0283 36.9781 209.0903 185.2158 Xm-6191.124 -5194.9692 -31.0283 36.9781 6400.2148 5380.1851 Bc-43.112 -36.1752 -31.0283 36.9781 209.0903 185.2158 Bm-6191.124 -5194.9692 -31.0283 36.9781 165.9785 149.041 Bcf0 BB166.833 169.083 m174.583 169.083 179.083 177.833 179.083 185.083 c179.083 192.333 172.9995 184.083 168.583 184.083 c162.9995 184.083 157.583 180.583 157.583 176.333 c157.583 172.083 162.083 169.083 166.833 169.083 cBb1 (Unnamed gradient 18) 168.333 169.083 90 18.9824 1 0 0 1 0 0 Bg-0.000001 18.9824 25.5 0.000001 155.583 169.083 Xm-0.000352 8056.333 25.5 0.000001 155.5835 -7887.25 Bc-0.000001 18.9824 25.5 0.000001 155.583 169.083 Bm-0.000352 8056.333 25.5 0.000001 155.583 188.0654 Bcf0 BB275.5 216.5 m273.75 226.5 263.25 246.5 279 264 c294.75 281.5 294.25 271 305.25 282.75 c300.75 282.5 296 279 v291.25 275.5 283.5 279.5 279.5 283.25 c275.5 287 249.75 288.5 269.75 284.5 c289.75 280.5 269.5 285.5 y273.25 273.75 272.5 271 v271.75 268.25 257.75 240.25 yBb1 (Unnamed gradient 6) 281.5 286.8701 -90 70.3701 1 0 0 1 0 0 Bg-0.000003 -70.3701 -59.5 0.000003 307.25 286.8701 Xm-0.000357 -8171.1299 -59.5 0.000003 307.25 8458 Bc-0.000001 -32.4785 -59.5 0.000003 307.25 286.8701 Bm-0.000357 -8171.1299 -59.5 0.000003 307.25 254.3916 BcF0 BB0.6 0 0 0 k253.5 283 m260.8359 279.6377 269.25 277 267.5 269 c265.75 261 249.75 249.5 246.5 231.5 c243.1831 213.1289 241.25 206.75 256.75 203 c272.25 199.25 278.5 211.5 275.5 217.5 c272.5 223.5 259.75 227.5 263.5 245.25 c267.25 263 289.25 275.5 275.5 283 c261.75 290.5 247.5 285.75 253.5 283 cf260.5 284.25 m262.8477 287.1846 278.25 282 278 276.75 c277.75 271.5 261.75 256 261 245 c260.25 234 261.25 225 266.25 218 c271.25 211 267.25 204.75 258.25 204.75 c249.25 204.75 246.75 211.25 247.25 218.25 c247.75 225.25 253.25 242.5 258.75 249.75 c264.25 257 273.75 271.75 271.75 275.25 c269.75 278.75 257.5 280.5 260.5 284.25 cBb1 (Unnamed gradient 17) 247.1895 244.9258 0 30.8135 1 0 0 1 0 0 Bg30.8135 0 0 -86.4346 247.1895 289.1846 Xm8135.6284 0 0 -86.4346 -7888.439 289.1846 Bc30.8135 0 0 -86.4346 247.1895 289.1846 Bm8135.6284 0 0 -86.4346 278.0029 289.1846 Bcf0 BB0 0 0 0 k259.25 223.25 m259.25 226.0449 264.25 216.75 264.25 212.5 c264.25 208.25 260.3311 207.6406 256.5 208 c251.1665 208.5 248 212 251 216 c254 220 259.25 219.75 259.25 223.25 cf121.5 390.5 m121.5 380.5 129 367 159.5 373 c190 379 206.334 373.833 212.167 362.333 c212 385.167 l204.3335 381.834 196.3335 381.167 v188.3335 380.5 182.1665 385.5 175.5 386 c168.8335 386.5 121.5 390.5 yBb1 (Unnamed gradient 25) 212.167 376.417 180 90.667 1 0 0 1 0 0 Bg-90.667 -0.000008 -0.000003 32.167 212.167 360.333 Xm-8100.1675 -0.000708 -0.000003 32.167 8312.334 360.334 Bc-90.667 -0.000008 -0.000003 32.167 212.167 360.333 Bm-8100.1675 -0.000708 -0.000003 32.167 121.5 360.333 Bcf0 BB0 0 0 0 k265.25 282.75 m277.75 281.5 275 273.75 v273.25 280 267.25 280.25 v261.25 280.5 264 282.75 265.25 282.75 cf0.6 0 0 0 k183.8335 385.166 m170.6665 388.5 163.333 391.666 158.1665 396.833 c153 402 149.167 408.833 139.3335 408.833 c129.5 408.833 121.5 398.667 121.5 390.5 c121.5 382.333 125.333 378.334 141.1665 380.5 c157 382.666 167.8335 388.333 184.3335 382.833 c200.8335 377.333 223.4995 385.666 219.1665 398.333 c214.8335 411 209.6665 400.999 210.5 396.666 c211.3335 392.333 210.4878 378.417 183.8335 385.166 cf0.3 0 0 0 k213 396.666 m213 400.666 216.6665 400.166 216.6665 396.333 c216.6665 392.5 211.167 385.834 210.3335 386.5 c209.5 387.166 213 387.999 213 396.666 cf158.6665 388.833 m158.6665 392.833 154.8335 392.999 151 398.166 c147.1665 403.333 145.333 406 140.1665 406 c135 406 125.8335 401.166 125.8335 394.333 c125.8335 387.5 134.6665 385.5 138.6665 385.833 c142.6665 386.166 158.6665 384.666 158.6665 388.833 cf0 0 0 0 k140 403.6665 m145.5 403.6665 147.8335 398.5 147.8335 395.833 c147.8335 393.166 143.8335 392.333 139.5 392.333 c135.1665 392.333 131 395.167 131 398.5 c131 401.833 136.1665 403.6665 140 403.6665 cf0.6 0 0 0 k183.1665 318.833 m176.8418 317.0703 158.833 309.167 158.833 301.333 c158.833 294.999 162.4995 292.499 169.333 292.499 c176.1665 292.499 180.333 299.166 180.333 304.166 c180.333 309.166 193.3335 321.667 183.1665 318.833 cf0.3 0 0 0 k176.166 313 m170.9663 312.5654 161.4995 306.166 161.4995 301.666 c161.4995 297.166 164.6665 294.833 168.333 294.833 c171.9995 294.833 176.166 297.499 176.166 301.666 c176.166 305.833 174.666 309.334 176.166 310.5 c177.666 311.666 178.166 313.167 176.166 313 cf0 0 0 0 k164.166 298.666 m166.4839 295.1123 170.499 296.166 172.166 297.666 c173.833 299.166 170.6665 300.499 168.333 302.166 c165.9995 303.833 161.666 302.499 164.166 298.666 cf0.6 0 0 0 k211.5 359.833 m213.5161 354.9346 217.3335 339.833 205.3335 331.999 c195.1733 325.3662 190 323.165 191.5 321.999 c193 320.833 210.8242 317.8125 217 331.666 c223.1665 345.499 216.6665 355.499 215.1665 357.666 c213.6665 359.833 210.3335 362.667 211.5 359.833 cf0.3 0 0 0 k201.8335 326.999 m215 333.166 216 342.666 v217 352.166 218.1665 343.333 217.1665 341.333 c216.1665 339.333 215.8335 329.667 205 325.833 c194.1665 321.999 199.8335 325.665 201.8335 326.999 cf458.166 320.499 m464.334 320.499 467.334 323.165 467.334 328.999 c467.334 334.833 465.5 338.999 459 342.666 c452.5 346.333 438.167 350.333 429.334 355.166 c420.5 359.999 416 363.666 413.334 368.666 c407.166 354.666 l412.166 359.832 426.166 353.332 v440.166 346.832 447.667 338.332 448.334 334.832 c449 331.332 446.833 320.499 458.166 320.499 cBb1 (Unnamed gradient 20) 407.166 344.582 0 60.168 1 0 0 1 0 0 Bg60.168 0 0 -52.167 407.166 370.666 Xm8295.166 0 0 -52.167 -7888 370.666 Bc31.4064 0 0 -52.167 407.166 370.666 Bm8295.166 0 0 -52.167 438.5723 370.666 Bcf0 BB0.3 0 0 0 k449.125 344 m452.6055 342.6953 464 339.375 465.25 332.125 c466.5 324.875 464.5 322 458.5 322 c452.5 322 450.875 326 450.875 328.125 c450.875 330.25 451.75 339.875 448 342.375 c444.25 344.875 442.125 346.625 449.125 344 cf0 0 0 0 k457.5 324.5 m461.3037 323.2617 464 325.75 463.75 328 c463.5 330.25 446.75 328 457.5 324.5 cf0.6 0 0 0 k302.5 279.499 m308.626 283.2002 335.666 303.333 352.666 277.666 c369.666 251.999 355.5 281.665 355 284.499 c354.5 287.333 352 300.332 357.166 305.999 c362.334 311.666 361 315 355.166 311.833 c349.334 308.666 349.334 299.665 336 299.999 c322.666 300.333 302.8335 282.332 296.8335 279.499 c290.8335 276.666 294.5 274.665 302.5 279.499 cf335.834 296.999 m341.5352 298.2324 346.5 297.999 348.5 300.166 c350.5 302.333 350.667 299.999 350.834 295.499 c351 290.999 355 280.333 352.834 281.833 c350.666 283.333 351.334 288.167 344.5 290.333 c337.666 292.499 329.667 295.665 335.834 296.999 cBb1 (Unnamed gradient 17) 351.8408 280.8809 840 22.2988 1 0 0 1 0 0 Bg-11.1494 19.3113 21.9758 12.6878 339.8799 273.9756 Xm-4120.9536 7137.6865 21.9758 12.6878 4460.834 -6863.7109 Bc-11.1494 19.3113 21.9758 12.6878 339.8799 273.9756 Bm-4120.9536 7137.6865 21.9758 12.6878 328.7305 293.2871 Bcf0 BB0.6 0 0 0 k390 310 m397 309.8506 399.666 307.5 403.5 305 c407.334 302.5 417.167 300.833 419.167 305 c421.167 309.167 420 312.999 416.334 316.333 c412.667 319.667 405.334 321.499 398.167 320.833 c391 320.167 358.666 310.667 390 310 cf385.334 314.667 m393.0703 317.7617 410.5 321.501 416 312.667 c421.5 303.833 412.334 305.001 409.834 305.667 c407.334 306.333 404.333 310.667 398.5 311.667 c392.667 312.667 380.334 312.667 385.334 314.667 cBb1 (Unnamed gradient 12) 417.7275 311.6895 180 33.5605 1 0 0 1 0 0 Bg-33.5605 -0.000003 -0.000002 21.668 417.7275 301.833 Xm-8309.5 -0.000726 -0.000002 21.668 8727.2266 301.834 Bc-33.5605 -0.000003 -0.000002 21.668 417.7275 301.833 Bm-8309.5 -0.000726 -0.000002 21.668 384.167 301.833 Bcf0 BB0 0 0 0 k411 308 m414.96 307.4346 416.166 309.334 415 311.167 c413.834 313 404 309 411 308 cf386 442.75 m380.25 454.75 404.75 457 v401.5 481 398.75 492.25 v396 503.5 394.5 505.5 397.5 512.5 c400.5 519.5 390 513.75 390.25 504 c390.5 494.25 397.25 487 393.25 482 c389.25 477 378.25 464.25 378 441.5 c377.75 418.75 389.5 427.75 386 442.75 cBb1 (Unnamed gradient 5) 406.8008 468.6348 170 24.5605 1 0 0 1 0 0 Bg-24.1874 4.2649 18.6098 105.5413 397.0469 413.3169 Xm-8168.7837 1440.3781 18.6098 105.5413 8565.8301 -1027.0615 Bc-11.1634 1.96841 18.6098 105.5413 397.0469 413.3169 Bm-13.024 2.29649 18.6098 105.5413 385.8838 415.2852 Bm-8168.7837 1440.3781 18.6098 105.5413 372.8594 417.582 Bcf0 BB398.5 500.25 m402.6318 489.0698 411.25 492.5 416 479.75 c420.75 467 420.5 457.25 406.5 456.75 c392.5 456.25 383.75 459.25 392.25 469 c400.75 478.75 403 480.75 398.75 488.75 c394.5 496.75 394.25 511.75 398.5 500.25 cBb1 (Unnamed gradient 20) 403.8398 504.4346 -90 47.7368 1 0 0 1 0 0 Bg-0.000002 -47.7368 -41 0.000002 422.75 504.4346 Xm-0.000363 -8299.1553 -41 0.000002 422.75 8803.5898 Bc-0.000001 -24.9176 -41 0.000002 422.75 504.4346 Bm-0.000363 -8299.1553 -41 0.000002 422.75 479.5171 Bcf0 BB0.3 0 0 0 k404 460 m410 460 417 459.75 415.25 470.75 c413.5 481.75 411.25 482.25 408.25 485 c405.25 487.75 403.75 485.5 405 481 c406.25 476.5 397.5 470.5 397.5 465.5 c397.5 460.5 400.25 460 404 460 cf0 0 0 0 k406 462.5 m416.75 461 412.25 475 v407.75 489 410 474 409 470.5 c408 467 399 463.25 406 462.5 cf410.334 554 m416.333 539.667 408.666 529.3335 v401 519 402 518.333 394.334 516.6665 c386.666 515 352 501.3335 347.334 480 c342.666 458.6665 310.334 415.333 282.667 414.6665 c255 414 246.0005 455.3335 265.667 443 c285.3335 430.6665 313 461.3335 331.667 489 c350.334 516.6665 398 564 410.334 554 cBb1 (Unnamed gradient 21) 356.7871 452.6714 120 66.6748 1 0 0 1 0 0 Bg-33.3374 57.7421 180.5862 104.2615 261.9697 397.9287 Xm-4126.9487 7148.0835 180.5862 104.2615 4388.918 -6750.1543 Bc-33.3374 57.7421 180.5862 104.2615 261.9697 397.9287 Bm-4126.9487 7148.0835 180.5862 104.2615 228.6323 455.6709 Bcf0 BB0.6 0 0 0 k245.666 508.3335 m251.333 508.3335 259.9995 502.0005 259.9995 484.667 c259.9995 467.3335 260.6665 453.0005 271.333 449.667 c281.9995 446.3335 295.666 450.6675 314 467.0005 c320.999 470.334 313.666 461.0005 v306.333 451.667 295.333 436.3335 278.9995 436.3335 c262.666 436.3335 256.6191 451.8311 254.666 463.3335 c251.666 481.0005 241.333 474.3335 236.666 488.3335 c233.082 499.0854 234.666 508.3335 245.666 508.3335 cf244.9995 505.3335 m251.333 505.3335 256.9995 496.3335 256.9995 489.667 c256.9995 483.0005 257.3325 469.6665 258.666 463.3335 c259.9995 457.0005 267.333 434.0005 296.9995 450.667 c303.666 452.3335 297.9995 448.667 v292.333 445.0005 288.333 439.667 277.9995 439.667 c267.666 439.667 257.666 453.6675 256.666 463.0005 c255.666 472.3335 255.9995 478.334 247.9995 485.0005 c239.9995 491.667 234.333 505.3335 244.9995 505.3335 cBb1 (Unnamed gradient 8) 239.1421 472.5 0 61.1406 1 0 0 1 0 0 Bg61.1406 0 0 -75.333 239.1421 507.3335 Xm8131.9512 0 0 -75.333 -7892.8091 507.3335 Bc61.1406 0 0 -75.333 239.1421 507.3335 Bm8131.9512 0 0 -75.333 300.2827 507.3335 Bcf0 BB0 0 0 0 k243.9995 503.0005 m248.666 503.0005 249.6665 500.6675 252.333 497.0005 c254.9995 493.3335 248.999 492.3335 245.666 494.3335 c242.333 496.3335 238.9995 503.0005 243.9995 503.0005 cf0.6 0 0 0 k214.25 420 m220 418 239.75 415 244 444 c246.5 450.5 246.5 439.75 v246.5 429 246 420.75 234.5 416 c223 411.25 214.25 420 yf0.3 0 0 0 k223.25 417.5 m240.25 418.75 243.75 435.75 v245.25 415.25 223.25 417.5 vf0 0 0 0 k231.6665 419 m239.1665 421.8335 241.5 427.8335 v239.833 419.8335 231.6665 419 vf203.75 326.833 m211.3335 330.667 214.3335 335.917 v212.0835 328.916 203.75 326.833 vf213.9165 396.833 m213.3525 398.042 215.5835 398.251 215.5835 396.917 c215.5835 395.583 214 392.5 y214.4995 395.583 213.9165 396.833 vf277.6665 443.3335 m273.6782 443.6401 268.6665 445.8335 y274 441.4995 279 441.6665 v284 441.8335 281.9995 443.0005 277.6665 443.3335 cf457.667 473 m454.999 466.9043 449.334 462.8335 437.834 463.5 c426.334 464.1665 427.5 469.3335 434.334 469 c441.167 468.6665 448 470.333 450.167 472.6665 c452.334 475 458.834 475.6665 457.667 473 cBb1 (Unnamed gradient 14) 429.1807 469.0781 0 28.625 1 0 0 1 0 0 Bg28.625 0 0 -16.833 429.1807 477.6665 Xm8320.0273 0 0 -16.833 -7890.8467 477.6665 Bc26.8949 0 0 -16.833 429.1807 477.6665 Bm8320.0273 0 0 -16.833 456.0752 477.6665 Bcf0 BB464.1699 619.8164 m455.7617 608.1787 443.1738 602.3521 422.9248 609.5288 c402.6758 616.7056 407.8379 627.1187 419.9072 622.9873 c431.9766 618.8555 445.2334 618.981 450.5078 622.8623 c455.7832 626.7441 467.8477 624.9077 464.1699 619.8164 cBb1 (Unnamed gradient 14) 411.0752 794.8213 0 55.9189 0.918987 0.256337 -0.268678 0.96323 2765.3047 -1670.9841 Bg51.3888 -14.3341 -8.69347 -31.1667 415.1514 641.6831 Xm7631.853 -2128.7854 -8.69347 -31.1667 -7216.7017 2770.4688 Bc48.2828 -13.4677 -8.69347 -31.1667 415.1514 641.6831 Bm7631.853 -2128.7854 -8.69347 -31.1667 463.4346 628.2153 Bcf0 BB0.6 0 0 0 k336 499.6665 m349.1846 519.2305 352.334 544.6665 353.667 554.6665 c355 564.6665 368 580.3335 382 580.3335 c396 580.3335 400.667 571.9995 404.334 566.6665 c408 561.3335 422 539.9995 396.334 531.6665 c370.667 523.3335 358 527.0005 342.334 494.3335 c326.667 461.6665 315.333 468.9995 336 499.6665 cf335.334 492 m340.7578 503.4517 353 525.0005 354 538.3335 c355 551.6665 363 577.3335 381 577.3335 c399 577.3335 403.334 564.6665 403.334 555.6665 c403.334 546.6665 388.3223 540.1611 378.667 539.3335 c367 538.3335 355 524 351 517 c347 510 332.334 485.6665 335.334 492 cBb1 (Unnamed gradient 1) 369.1328 490.9585 90 86.375 1 0 0 1 0 0 Bg-0.000004 86.375 75 0.000003 330.334 490.9585 Xm-0.000361 8262.4248 75 0.000003 330.334 -7771.4668 Bc-0.000003 66.9169 75 0.000003 330.334 490.9585 Bm-0.000361 8262.4248 75 0.000003 330.334 557.8755 Bcf0 BB0 0 0 0 k381 573 m389 573 398.334 568.9995 399.334 559.6665 c400.334 550.3335 395.4043 552.4731 393 556 c388 563.3335 372 561.6665 366.334 555 c369.666 573 381 573 vf0.3 0 0 0 k433.5 409 m402.5 403.25 390 423.75 v398.5 401 433.5 409 vf412 324.75 m406 335.5 400.5 344.25 425.75 333.5 c417 341.75 408 342.25 v399 342.75 412 324.75 yBb1 (Unnamed gradient 41) 404.9063 340.8652 320 20.7002 1 0 0 1 0 0 Bg15.8573 -13.3058 -13.0077 -15.5019 411.624 348.8711 Xm6357.1304 -5334.2627 -13.0077 -15.5019 -5945.5063 5683.1338 Bc15.8573 -13.3058 -13.0077 -15.5019 411.624 348.8711 Bm6357.1304 -5334.2627 -13.0077 -15.5019 427.4814 335.5654 Bcf0 BBLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF