%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(TM) 5.0
%%AI8_CreatorVersion: 10.0
%%For: (Michael) (WeWorkForThem)
%%Title: (E0027_Arrows01.eps)
%%CreationDate: 10/31/2002 3:57 PM
%%BoundingBox: 36 -2279 3627 -36
%%HiResBoundingBox: 36 -2278.4458 3627 -36
%%DocumentProcessColors: Cyan Black
%%DocumentFonts: Verdana
%%DocumentNeededFonts: Verdana
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 1.1
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI3_TemplateBox: 1836.5 -1152.5 1836.5 -1152.5
%AI3_TileBox: 1242.0005 -1547 1818.0005 -797
%AI3_DocumentPreview: Macintosh_ColorPic
%AI5_ArtSize: 3672 2304
%AI5_RulerUnits: 0
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 4
%AI5_OpenToView: -322.5 0.5 -6 1266 777 18 0 0 12 67 0 0
%AI5_OpenViewLayers: 7333
%%PageOrigin:1242.0005 -1547
%%AI3_PaperRect:-18 787 594 -5
%%AI3_Margin:18 -33 -18 5
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 1
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_ax neg 0 rmoveto
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeFont: Verdana
Adobe_level2_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE 145/quoteleft
/quoteright/quotedblleft/quotedblright/bullet/endash/emdash/tilde/trademark
/scaron/guilsinglright/oe/dotlessi 159/Ydieresis /space 164/currency 166/brokenbar
168/dieresis/copyright/ordfeminine 172/logicalnot/hyphen/registered/macron/ring
/plusminus/twosuperior/threesuperior/acute/mu 183/periodcentered/cedilla
/onesuperior/ordmasculine 188/onequarter/onehalf/threequarters 192/Agrave
/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla/Egrave/Eacute
/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis/Eth/Ntilde
/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash/Ugrave
/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave/aacute
/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute/ecircumflex
/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute
/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex
/udieresis/yacute/thorn/ydieresis
TE
%AI3_BeginEncoding: _Verdana Verdana
[/_Verdana/Verdana 0 0 0 TZ%AI3_EndEncoding TrueType
%AI5_Begin_NonPrinting
Np
1 Bn
%AI5_BeginGradient: (Unnamed gradient 1)
(Unnamed gradient 1) 0 2 Bd
[
0
0
0
<
000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F2021222324252627
28292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F
505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F7071727374757677
78797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F
A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7
C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF
F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF
>
1 %_Br
[
0 0 50 100 %_Bs
1 0 50 0 %_Bs
BD
%AI5_EndGradient
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 k
Pc
1 1 1 1 k
Pc
Pc
0 0 0 0.8 k
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 0 1 0 0 0 79 128 255 Lb
(background) Ln
1 A
0 A
1 Ap
0 O
0 0 0 0.8 k
0 J 0 j 1 w 4 M []0 d3627 -387 m
36.0005 -387 L
36.0005 -36 L
3627 -36 L
3627 -387 L
f0 0 0 0.1 k
387.0005 -747 m
36.0005 -747 L
36.0005 -396 L
387.0005 -396 L
387.0005 -747 L
f747.0005 -747 m
396.0005 -747 L
396.0005 -396 L
747.0005 -396 L
747.0005 -747 L
f1107.0005 -747 m
756.0005 -747 L
756.0005 -396 L
1107.0005 -396 L
1107.0005 -747 L
f1467.0005 -747 m
1116.0005 -747 L
1116.0005 -396 L
1467.0005 -396 L
1467.0005 -747 L
f1827.0005 -747 m
1476.0005 -747 L
1476.0005 -396 L
1827.0005 -396 L
1827.0005 -747 L
f2187 -747 m
1836.0005 -747 L
1836.0005 -396 L
2187 -396 L
2187 -747 L
f2547 -747 m
2196 -747 L
2196 -396 L
2547 -396 L
2547 -747 L
f2907 -747 m
2556 -747 L
2556 -396 L
2907 -396 L
2907 -747 L
f3267 -747 m
2916 -747 L
2916 -396 L
3267 -396 L
3267 -747 L
f3627 -747 m
3276 -747 L
3276 -396 L
3627 -396 L
3627 -747 L
f387.0005 -1107 m
36.0005 -1107 L
36.0005 -756 L
387.0005 -756 L
387.0005 -1107 L
f747.0005 -1107 m
396.0005 -1107 L
396.0005 -756 L
747.0005 -756 L
747.0005 -1107 L
f1107.0005 -1107 m
756.0005 -1107 L
756.0005 -756 L
1107.0005 -756 L
1107.0005 -1107 L
f1467.0005 -1107 m
1116.0005 -1107 L
1116.0005 -756 L
1467.0005 -756 L
1467.0005 -1107 L
f1827.0005 -1107 m
1476.0005 -1107 L
1476.0005 -756 L
1827.0005 -756 L
1827.0005 -1107 L
f2187 -1107 m
1836.0005 -1107 L
1836.0005 -756 L
2187 -756 L
2187 -1107 L
f2547 -1107 m
2196 -1107 L
2196 -756 L
2547 -756 L
2547 -1107 L
f2907 -1107 m
2556 -1107 L
2556 -756 L
2907 -756 L
2907 -1107 L
f3267 -1107 m
2916 -1107 L
2916 -756 L
3267 -756 L
3267 -1107 L
f3627 -1107 m
3276 -1107 L
3276 -756 L
3627 -756 L
3627 -1107 L
f387.0005 -1467 m
36.0005 -1467 L
36.0005 -1116 L
387.0005 -1116 L
387.0005 -1467 L
f747.0005 -1467 m
396.0005 -1467 L
396.0005 -1116 L
747.0005 -1116 L
747.0005 -1467 L
f1107.0005 -1467 m
756.0005 -1467 L
756.0005 -1116 L
1107.0005 -1116 L
1107.0005 -1467 L
f1467.0005 -1467 m
1116.0005 -1467 L
1116.0005 -1116 L
1467.0005 -1116 L
1467.0005 -1467 L
f1827.0005 -1467 m
1476.0005 -1467 L
1476.0005 -1116 L
1827.0005 -1116 L
1827.0005 -1467 L
f2187 -1467 m
1836.0005 -1467 L
1836.0005 -1116 L
2187 -1116 L
2187 -1467 L
f2547 -1467 m
2196 -1467 L
2196 -1116 L
2547 -1116 L
2547 -1467 L
f2907 -1467 m
2556 -1467 L
2556 -1116 L
2907 -1116 L
2907 -1467 L
f3267 -1467 m
2916 -1467 L
2916 -1116 L
3267 -1116 L
3267 -1467 L
f3627 -1467 m
3276 -1467 L
3276 -1116 L
3627 -1116 L
3627 -1467 L
f387.0005 -1827 m
36.0005 -1827 L
36.0005 -1476 L
387.0005 -1476 L
387.0005 -1827 L
f747.0005 -1827 m
396.0005 -1827 L
396.0005 -1476 L
747.0005 -1476 L
747.0005 -1827 L
f1107.0005 -1827 m
756.0005 -1827 L
756.0005 -1476 L
1107.0005 -1476 L
1107.0005 -1827 L
f1467.0005 -1827 m
1116.0005 -1827 L
1116.0005 -1476 L
1467.0005 -1476 L
1467.0005 -1827 L
f1827.0005 -1827 m
1476.0005 -1827 L
1476.0005 -1476 L
1827.0005 -1476 L
1827.0005 -1827 L
f2187 -1827 m
1836.0005 -1827 L
1836.0005 -1476 L
2187 -1476 L
2187 -1827 L
f2547 -1827 m
2196 -1827 L
2196 -1476 L
2547 -1476 L
2547 -1827 L
f2907 -1827 m
2556 -1827 L
2556 -1476 L
2907 -1476 L
2907 -1827 L
f3267 -1827 m
2916 -1827 L
2916 -1476 L
3267 -1476 L
3267 -1827 L
f3627 -1827 m
3276 -1827 L
3276 -1476 L
3627 -1476 L
3627 -1827 L
f387.0005 -2187 m
36.0005 -2187 L
36.0005 -1836 L
387.0005 -1836 L
387.0005 -2187 L
f747.0005 -2187 m
396.0005 -2187 L
396.0005 -1836 L
747.0005 -1836 L
747.0005 -2187 L
f1107.0005 -2187 m
756.0005 -2187 L
756.0005 -1836 L
1107.0005 -1836 L
1107.0005 -2187 L
f1467.0005 -2187 m
1116.0005 -2187 L
1116.0005 -1836 L
1467.0005 -1836 L
1467.0005 -2187 L
f1827.0005 -2187 m
1476.0005 -2187 L
1476.0005 -1836 L
1827.0005 -1836 L
1827.0005 -2187 L
f2187 -2187 m
1836.0005 -2187 L
1836.0005 -1836 L
2187 -1836 L
2187 -2187 L
f2547 -2187 m
2196 -2187 L
2196 -1836 L
2547 -1836 L
2547 -2187 L
f2907 -2187 m
2556 -2187 L
2556 -1836 L
2907 -1836 L
2907 -2187 L
f3267 -2187 m
2916 -2187 L
2916 -1836 L
3267 -1836 L
3267 -2187 L
f3627 -2187 m
3276 -2187 L
3276 -1836 L
3627 -1836 L
3627 -2187 L
fLB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 0 1 0 0 2 79 255 79 Lb
(eps_numbers) Ln
1 A
0 A
0 To
1 0 0 1 36 -414 0 Tp
TP
0 Tr
0 O
0 0 0 0.8 k
0 J 0 j 1 w 4 M []0 d/_Verdana 12 Tf
0 Ts
100 Tz
-50 Tt
1 TA
%_ 0 XL
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 1 2 2 3 Th
0 Tq
0 0 Tl
-0.6 Tc
0 Tw
(001) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 396 -414 0 Tp
TP
0 Tr
(002) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 756 -414 0 Tp
TP
0 Tr
(003) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1116 -414 0 Tp
TP
0 Tr
(004) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1476 -414 0 Tp
TP
0 Tr
(005) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1836 -414 0 Tp
TP
0 Tr
(006) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2196 -414 0 Tp
TP
0 Tr
(007) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2556 -414 0 Tp
TP
0 Tr
(008) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2916 -414 0 Tp
TP
0 Tr
(009) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 3276 -414 0 Tp
TP
0 Tr
(010) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 3276 -774 0 Tp
TP
0 Tr
(020) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 3276 -1134 0 Tp
TP
0 Tr
(030) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 3276 -1494 0 Tp
TP
0 Tr
(040) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 3276 -1854 0 Tp
TP
0 Tr
(050) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2916 -1854 0 Tp
TP
0 Tr
(049) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2556 -1854 0 Tp
TP
0 Tr
(048) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2196 -1854 0 Tp
TP
0 Tr
(047) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1836.0005 -1854 0 Tp
TP
0 Tr
(046) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1476.0005 -1854 0 Tp
TP
0 Tr
(045) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1116.0005 -1854 0 Tp
TP
0 Tr
(044) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 756.0005 -1854 0 Tp
TP
0 Tr
(043) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 396.0005 -1854 0 Tp
TP
0 Tr
(042) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 36.0005 -1854 0 Tp
TP
0 Tr
(041) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2916 -1494 0 Tp
TP
0 Tr
(039) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2556 -1494 0 Tp
TP
0 Tr
(038) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2196 -1494 0 Tp
TP
0 Tr
(037) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1836.0005 -1494 0 Tp
TP
0 Tr
(036) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1476.0005 -1494 0 Tp
TP
0 Tr
(035) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1116.0005 -1494 0 Tp
TP
0 Tr
(034) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 756.0005 -1494 0 Tp
TP
0 Tr
(033) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 396.0005 -1494 0 Tp
TP
0 Tr
(032) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 36.0005 -1494 0 Tp
TP
0 Tr
(031) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2916 -1134 0 Tp
TP
0 Tr
(029) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2556 -1134 0 Tp
TP
0 Tr
(028) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2196 -1134 0 Tp
TP
0 Tr
(027) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1836.0005 -1134 0 Tp
TP
0 Tr
(026) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1476.0005 -1134 0 Tp
TP
0 Tr
(025) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1116.0005 -1134 0 Tp
TP
0 Tr
(024) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 756.0005 -1134 0 Tp
TP
0 Tr
(023) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 396.0005 -1134 0 Tp
TP
0 Tr
(022) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 36.0005 -1134 0 Tp
TP
0 Tr
(021) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2916 -774 0 Tp
TP
0 Tr
(019) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2556 -774 0 Tp
TP
0 Tr
(018) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2196 -774 0 Tp
TP
0 Tr
(017) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1836.0005 -774 0 Tp
TP
0 Tr
(016) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1476.0005 -774 0 Tp
TP
0 Tr
(015) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1116.0005 -774 0 Tp
TP
0 Tr
(014) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 756.0005 -774 0 Tp
TP
0 Tr
(013) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 396.0005 -774 0 Tp
TP
0 Tr
(012) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 36.0005 -774 0 Tp
TP
0 Tr
(011) Tx 1 0 Tk
(\r) TX 
TO
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 0 1 0 0 1 255 79 79 Lb
(ywft_info) Ln
1 A
0 A
u0 Ap
0 O
0.8 0 0 0 k
0 J 0 j 1 w 4 M []0 d405 -180 m
432 -180 L
432 -160.1182 415.8828 -144 396 -144 C
396 -171 L
400.9707 -171 405 -175.0293 405 -180 C
f0 0 0 0.2 k
495 -175.501 m
495 -144 L
468 -144 L
468 -175.5 L
468 -175.5 L
468 -195.3828 484.1172 -211.5 504 -211.5 C
504 -184.501 L
499.0293 -184.501 495 -180.4717 495 -175.501 C
f463.5 -144 m
436.5 -144 L
436.5 -175.501 L
436.5 -180.4717 432.4707 -184.501 427.5 -184.501 C
396 -184.501 L
396 -211.5 L
427.5 -211.5 L
447.3828 -211.5 463.5 -195.3828 463.5 -175.5 C
463.5 -175.5 L
463.5 -144 L
f652.5 -144 m
679.5 -144 L
679.5 -175.501 L
679.5 -180.4717 683.5293 -184.501 688.5 -184.501 C
720 -184.501 L
720 -211.5 L
688.5 -211.5 L
668.6172 -211.5 652.5 -195.3828 652.5 -175.5 C
652.5 -175.5 L
652.5 -144 L
f580.5 -211.5 m
607.5 -211.5 L
607.5 -180 L
607.5 -175.0293 611.5293 -171 616.5 -171 C
648 -171 L
648 -144 L
616.5 -144 L
596.6172 -144 580.5 -160.1182 580.5 -180 C
580.5 -180 L
580.5 -211.5 L
f531 -175.501 m
531 -144 L
504 -144 L
504 -175.5 L
504 -175.5 L
504 -195.3828 520.1172 -211.5 540 -211.5 C
540 -184.501 L
535.0293 -184.501 531 -180.4717 531 -175.501 C
f567 -175.501 m
567 -144 L
540 -144 L
540 -175.5 L
540 -175.5 L
540 -195.3828 556.1172 -211.5 576 -211.5 C
576 -184.501 L
571.0293 -184.501 567 -180.4717 567 -175.501 C
f612 -211.5 m
648 -211.5 L
648 -184.5 L
612 -184.5 L
612 -211.5 L
f684 -144 m
684 -171 L
720 -171 L
720 -144 L
684 -144 L
fU0 To
1 0 0 1 396 -297 0 Tp
TP
0 Tr
/_Verdana 12 Tf
0 Ts
100 Tz
-50 Tt
1 TA
%_ 0 XL
36 0 Xb
XB
0 0 5 TC
100 100 200 TW
0 0 0 Ti
0 Ta
0 1 2 2 3 Th
0 Tq
0 0 Tl
-0.6 Tc
0 Tw
(Y) Tx 1 63 Tk
(ouW) Tx 1 49 Tk
(orkF) Tx 1 24 Tk
(orThem \(100%=91pt.\)) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 396 -72 0 Tp
TP
0 Tr
0 0 0 0.6 k
/_Verdana 11 Tf
-0.55 Tc
(YWF) Tx 1 -15 Tk
(T) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1476 -297 0 Tp
TP
0 Tr
0 0 0 0.2 k
/_Verdana 12 Tf
-0.6 Tc
(E0027) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1476 -72 0 Tp
TP
0 Tr
0 0 0 0.6 k
/_Verdana 11 Tf
-0.55 Tc
(YWF) Tx 1 -15 Tk
(T) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1836.0005 -297 0 Tp
TP
0 Tr
0 0 0 0.2 k
/_Verdana 12 Tf
-0.6 Tc
(Arrows) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 1836.0005 -72 0 Tp
TP
0 Tr
0 0 0 0.6 k
/_Verdana 11 Tf
-0.55 Tc
(YWF) Tx 1 -15 Tk
(T) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2196 -297 0 Tp
TP
0 Tr
0 0 0 0.2 k
/_Verdana 12 Tf
-0.6 Tc
(01) Tx 1 0 Tk
(\r) TX 
TO
0 To
1 0 0 1 2196 -72 0 Tp
TP
0 Tr
0 0 0 0.6 k
/_Verdana 11 Tf
-0.55 Tc
(YWF) Tx 1 -15 Tk
(T) Tx 1 0 Tk
(\r) TX 
TO
u0.8 0 0 0 k
398.25 -2241 m
405 -2241 L
405 -2236.0293 400.9707 -2232 396 -2232 C
396 -2238.75 L
397.2422 -2238.75 398.25 -2239.7568 398.25 -2241 C
f0 0 0 0.8 k
420.75 -2239.875 m
420.75 -2232 L
414 -2232 L
414 -2239.875 L
414 -2239.875 L
414 -2244.8457 418.0293 -2248.875 423 -2248.875 C
423 -2242.125 L
421.7578 -2242.125 420.75 -2241.1182 420.75 -2239.875 C
f412.875 -2232 m
406.125 -2232 L
406.125 -2239.875 L
406.125 -2241.1182 405.1172 -2242.125 403.875 -2242.125 C
396 -2242.125 L
396 -2248.875 L
403.875 -2248.875 L
408.8457 -2248.875 412.875 -2244.8457 412.875 -2239.875 C
412.875 -2239.875 L
412.875 -2232 L
f460.125 -2232 m
466.875 -2232 L
466.875 -2239.875 L
466.875 -2241.1182 467.8828 -2242.125 469.125 -2242.125 C
477 -2242.125 L
477 -2248.875 L
469.125 -2248.875 L
464.1543 -2248.875 460.125 -2244.8457 460.125 -2239.875 C
460.125 -2239.875 L
460.125 -2232 L
f442.125 -2248.875 m
448.875 -2248.875 L
448.875 -2241 L
448.875 -2239.7568 449.8828 -2238.75 451.125 -2238.75 C
459 -2238.75 L
459 -2232 L
451.125 -2232 L
446.1543 -2232 442.125 -2236.0293 442.125 -2241 C
442.125 -2241 L
442.125 -2248.875 L
f429.75 -2239.875 m
429.75 -2232 L
423 -2232 L
423 -2239.875 L
423 -2239.875 L
423 -2244.8457 427.0293 -2248.875 432 -2248.875 C
432 -2242.125 L
430.7578 -2242.125 429.75 -2241.1182 429.75 -2239.875 C
f438.75 -2239.875 m
438.75 -2232 L
432 -2232 L
432 -2239.875 L
432 -2239.875 L
432 -2244.8457 436.0293 -2248.875 441 -2248.875 C
441 -2242.125 L
439.7578 -2242.125 438.75 -2241.1182 438.75 -2239.875 C
f450 -2248.875 m
459 -2248.875 L
459 -2242.125 L
450 -2242.125 L
450 -2248.875 L
f468 -2232 m
468 -2238.75 L
477 -2238.75 L
477 -2232 L
468 -2232 L
fU0 To
1 0 0 1 396 -2277 0 Tp
TP
0 Tr
/_Verdana 7 Tf
-0.35 Tc
(Y) Tx 1 63 Tk
(ouW) Tx 1 49 Tk
(orkF) Tx 1 24 Tk
(orThem \(25%=23pt.\)) Tx 1 0 Tk
(\r) TX 
TO
LB
%AI5_EndLayer--
%AI5_BeginLayer
1 1 1 1 0 0 3 79 79 255 Lb
(eps_files) Ln
0 A
*u
1 D
0 O
0.2 g
0 J 0 j 1 w 4 M []0 d193.593 -2077.2588 m
235.3555 -2077.2588 L
235.3555 -1995.8228 L
277.1182 -1995.8228 L
214.4753 -1891.4199 L
151.8328 -1995.8228 L
193.593 -1995.8228 L
193.593 -2077.2588 L
f295.9114 -2053.8735 m
295.9114 -2098.1387 L
133.0417 -2098.1387 L
133.0417 -2053.8735 L
110.0701 -2053.8735 L
110.0701 -2121.1079 L
318.8782 -2121.1079 L
318.8782 -2053.8735 L
295.9114 -2053.8735 L
f*U
*u
0 0 0 0.8 k
2658.4531 -622.4963 m
2729.5459 -579.8396 L
2800.6392 -622.4963 L
2729.5459 -508.7468 L
2658.4531 -622.4963 L
f2729.5479 -582.5637 m
2658.4512 -696.3132 L
2729.5479 -667.8762 L
2800.6406 -696.3132 L
2729.5479 -582.5637 L
f2800.6401 -562.8992 m
2729.5469 -449.1497 L
2658.4521 -562.8992 L
2729.5469 -506.0227 L
2800.6401 -562.8992 L
f*U
*u
0 D
935.5933 -544.5723 m
794.7949 -685.3711 L
935.5933 -460.0918 L
1076.3921 -685.3711 L
935.5933 -544.5723 l
f*U
*u
1 D
3332.1045 -1334.0049 m
3436.5083 -1334.0049 L
3384.3057 -1250.4824 L
3332.1045 -1334.0049 L
f3444.9136 -1334.0049 m
3528.4365 -1334.0049 L
3486.6763 -1250.481 L
3444.9136 -1334.0049 L
f3557.7241 -1250.481 m
3536.8418 -1334.0049 L
3578.604 -1334.0049 L
3557.7241 -1250.481 L
f*U
*u
0 D
687.6606 -2006.2642 m
687.6606 -2068.7861 637.0962 -2119.3506 574.5811 -2119.3506 c
512.3652 -2119.3506 461.4907 -2068.7861 461.4907 -2006.2642 c
461.4907 -1943.7407 512.3652 -1893.1772 574.5811 -1893.1772 c
637.0962 -1893.1772 687.6606 -1943.7407 687.6606 -2006.2642 c
f1 D
505.0117 -1942.21 m
489.3804 -1959.0693 479.8774 -1981.4409 479.8774 -2006.2642 c
479.8774 -2058.6694 522.478 -2100.9629 574.5811 -2100.9629 c
626.9834 -2100.9629 669.2798 -2058.6694 669.2798 -2006.2642 c
669.2798 -1981.4409 659.7778 -1959.0693 644.4531 -1942.21 C
505.0117 -1942.21 l
f0 D
608.5957 -2009.6338 m
608.5957 -2076.7505 L
572.4351 -2027.7139 L
536.5742 -2076.7505 L
536.5742 -2009.6338 L
572.4351 -1960.5972 L
608.5957 -2009.6338 l
f*U
*u
2997.3438 -565.8386 m
2997.3438 -554.8083 L
3072.8799 -554.8083 L
2993.4844 -475.4167 L
3001.2031 -467.697 L
3080.5986 -546.8167 L
3080.5986 -471.5535 L
3091.6289 -471.5535 L
3091.6289 -565.8386 L
2997.3438 -565.8386 l
f3080.5986 -673.9099 m
3080.5986 -598.3708 L
3001.2031 -677.7659 L
2993.4844 -670.0466 L
3072.8799 -590.6482 L
2997.3438 -590.6482 L
2997.3438 -579.6213 L
3091.6289 -579.6213 L
3091.6289 -673.9099 L
3080.5986 -673.9099 l
f3124.1543 -554.8083 m
3199.6963 -554.8083 L
3199.6963 -565.8386 L
3105.4111 -565.8386 L
3105.4111 -471.5535 L
3116.4414 -471.5535 L
3116.4414 -546.8167 L
3195.8359 -467.697 L
3203.5527 -475.4167 L
3124.1543 -554.8083 l
f3195.8359 -677.7659 m
3116.4414 -598.3708 L
3116.4414 -673.9099 L
3105.4111 -673.9099 L
3105.4111 -579.6213 L
3199.6963 -579.6213 L
3199.6963 -590.6482 L
3124.1543 -590.6482 L
3203.5527 -670.0466 L
3195.8359 -677.7659 l
f*U
*u
945.5283 -1042.2896 m
804.8755 -1042.2896 L
804.8755 -1023.9512 L
938.8042 -1023.9512 L
1028.0947 -945.0532 L
804.8755 -945.0532 L
804.8755 -926.7144 L
1028.0947 -926.7144 L
938.8042 -848.1265 L
804.8755 -848.1265 L
804.8755 -829.7803 L
945.5283 -829.7803 L
1066.3115 -935.8853 L
945.5283 -1042.2896 l
f*U
*u
1 D
1662.3291 -2009.2959 m
1655.7148 -2009.7476 1649.0488 -2009.7476 1642.4346 -2009.2959 C
1615.7656 -2037.5732 1584.9104 -2057.7139 1564.4744 -2058.8706 C
1562.5344 -2078.0454 1560.5955 -2097.2202 1558.6555 -2116.3945 C
1562.9583 -2124.0229 1568.1414 -2130.8032 1574.009 -2136.7358 C
1593.5637 -2134.0015 1618.1992 -2120.0815 1641.0518 -2099.5503 C
1648.5791 -2100.228 1656.1855 -2100.228 1663.7129 -2099.5503 C
1686.5684 -2120.0811 1711.208 -2133.9995 1730.7637 -2136.728 C
1736.6289 -2130.7964 1741.8105 -2124.0171 1746.1113 -2116.3901 C
1744.1719 -2097.2163 1742.2324 -2078.0415 1740.293 -2058.8677 C
1719.8564 -2057.7129 1689 -2037.5728 1662.3291 -2009.2959 C
f1751.3652 -1968.4595 m
1730.9785 -1964.0112 1687.7051 -1920.9185 1659.5625 -1875.7925 C
1645.2012 -1875.7925 L
1617.0586 -1920.9185 1573.7856 -1964.0107 1553.3994 -1968.4595 C
1552.4626 -1983.9053 1551.5251 -1999.3511 1550.5884 -2014.7969 C
1552.5032 -2021.4063 1555.1804 -2027.5073 1558.5032 -2033.1001 C
1578.4895 -2031.937 1615.3496 -2002.5229 1643.8184 -1966.0464 C
1649.5186 -1966.2729 1655.2451 -1966.2729 1660.9463 -1966.0464 C
1689.415 -2002.5229 1726.2754 -2031.937 1746.2617 -2033.1001 C
1749.584 -2027.5073 1752.2617 -2021.4063 1754.1768 -2014.7969 C
1753.2393 -1999.3511 1752.3027 -1983.9053 1751.3652 -1968.4595 C
f*U
*u
0 D
2329.5938 -615.5615 m
2259.168 -615.5615 L
2308.1138 -572.5952 L
2259.168 -529.9048 L
2329.5938 -529.9048 L
2378.5396 -572.5952 L
2329.5938 -615.5615 l
f2384.7886 -680.8184 m
2379.3535 -680.8184 L
2379.3535 -648.1899 L
2384.7886 -648.1899 L
2426.3931 -648.1899 2460.1074 -614.4688 2460.1074 -572.5952 c
2460.1074 -530.9907 2426.3931 -497.2764 2384.7886 -497.2764 c
2379.3535 -497.2764 L
2379.3535 -464.6445 L
2384.7886 -464.6445 L
2444.3418 -464.6445 2492.7427 -513.0454 2492.7427 -572.5952 c
2492.7427 -632.4146 2444.3418 -680.8184 2384.7886 -680.8184 c
f*U
*u
3446.1338 -1643.0664 m
3422.1904 -1642.5527 3398.0127 -1640.043 3371.7764 -1635.5352 C
3372.1865 -1633.4551 3372.6631 -1631.4434 3373.1943 -1629.4805 C
3400.957 -1618.668 3416.4189 -1603.6816 3425.8252 -1588.502 C
3427.6797 -1588.502 3429.5342 -1588.502 3431.3877 -1588.502 C
3436.3701 -1603.7676 3440.6934 -1618.5742 3450.999 -1635.8662 C
3449.4932 -1638.2334 3447.876 -1640.6328 3446.1338 -1643.0664 C
f3437.9443 -1725.8145 m
3392.8184 -1723.0303 3348.2158 -1709.4111 3308.207 -1684.9551 C
3307.8984 -1681.3887 3307.6719 -1678.0215 3307.5283 -1674.8418 C
3345.2539 -1673.292 3379.5557 -1659.7197 3401.8623 -1645.3672 C
3405.3008 -1645.8105 3408.7168 -1646.2119 3412.1152 -1646.5713 C
3417.1953 -1664.7881 3427.1514 -1687.6445 3447.0146 -1715.0371 C
3444.166 -1718.582 3441.1445 -1722.1777 3437.9443 -1725.8145 C
f1 D
3426.623 -1598.6787 m
3418.4033 -1609.6543 3406.7217 -1620.4492 3389.1748 -1629.6797 C
3406.1885 -1631.667 3422.3604 -1632.9219 3438.3115 -1633.4453 C
3432.5654 -1620.876 3429.5234 -1609.7373 3426.623 -1598.6787 C
f3400.9111 -1657.3135 m
3383.293 -1668.5508 3359.9053 -1679.1143 3333.3203 -1684.8828 C
3362.334 -1697.9893 3392.4023 -1706.2676 3422.75 -1709.7178 C
3411.2754 -1689.2051 3404.6455 -1671.8213 3400.9111 -1657.3135 C
f0 D
3538.9287 -1635.5361 m
3512.7588 -1640.0322 3488.6377 -1642.541 3464.7539 -1643.0625 C
3462.9463 -1640.6318 3461.2695 -1638.2324 3459.708 -1635.8662 C
3470.0146 -1618.5742 3474.3379 -1603.7676 3479.3203 -1588.502 C
3481.1729 -1588.502 3483.0273 -1588.502 3484.8799 -1588.502 C
3494.2871 -1603.6816 3509.75 -1618.668 3537.5146 -1629.4805 C
3538.0449 -1631.4434 3538.5195 -1633.4561 3538.9287 -1635.5361 C
f3602.4971 -1684.957 m
3562.5889 -1709.3496 3518.1113 -1722.9619 3473.1016 -1725.793 C
3469.7813 -1722.168 3466.6455 -1718.5781 3463.6904 -1715.0381 C
3483.5557 -1687.6445 3493.5117 -1664.7881 3498.5928 -1646.5713 C
3501.9893 -1646.2119 3505.4043 -1645.8105 3508.8418 -1645.3672 C
3531.1494 -1659.7197 3565.4521 -1673.293 3603.1807 -1674.8418 C
3603.0352 -1678.0225 3602.8076 -1681.3906 3602.4971 -1684.957 C
f1 D
3484.082 -1598.6787 m
3481.1826 -1609.7373 3478.1416 -1620.876 3472.3975 -1633.4453 C
3488.3467 -1632.9219 3504.5186 -1631.667 3521.5313 -1629.6797 C
3503.9844 -1620.4492 3492.3018 -1609.6543 3484.082 -1598.6787 C
f3509.792 -1657.3135 m
3506.0576 -1671.8213 3499.4307 -1689.2061 3487.959 -1709.7178 C
3518.3047 -1706.2676 3548.3721 -1697.9893 3577.3848 -1684.8838 C
3550.7988 -1679.1162 3527.4102 -1668.5518 3509.792 -1657.3135 C
f*U
*u
0 D
501.6582 -655.6311 m
501.6582 -489.8357 L
501.6582 -460.739 525.0059 -437.3918 554.1025 -437.3918 c
595.0459 -437.3918 L
623.8076 -437.3918 647.4932 -460.739 647.4932 -489.8357 c
647.4932 -655.6311 L
647.4932 -684.7249 623.8076 -708.071 595.0459 -708.071 c
554.1025 -708.071 l
525.0059 -708.071 501.6582 -684.7249 501.6582 -655.6311 c
f1 D
542.9414 -482.0486 m
535.832 -489.8357 531.7686 -499.9836 531.7686 -511.157 c
531.7686 -534.8347 550.7178 -554.1257 574.4072 -554.1257 c
598.085 -554.1257 617.376 -534.8347 617.376 -511.157 c
617.376 -499.9836 612.9736 -489.8357 606.207 -482.0486 C
542.9414 -482.0486 l
f0 D
589.627 -512.5081 m
589.627 -542.9573 L
573.3906 -520.9661 L
557.1494 -542.9573 L
557.1494 -512.5081 L
573.3906 -490.5134 L
589.627 -512.5081 l
f*U
*u
3354.1768 -565.8384 m
3354.1768 -554.8081 L
3429.709 -554.8081 L
3350.3164 -475.417 L
3358.0332 -467.6968 L
3437.4346 -546.8164 L
3437.4346 -471.5532 L
3448.459 -471.5532 L
3448.459 -565.8384 L
3354.1768 -565.8384 l
f3437.4346 -673.9097 m
3437.4346 -598.3706 L
3358.0332 -677.7661 L
3350.3164 -670.0469 L
3429.709 -590.6479 L
3354.1768 -590.6479 L
3354.1768 -579.6211 L
3448.459 -579.6211 L
3448.459 -673.9097 L
3437.4346 -673.9097 l
f3537.7822 -482.5806 m
3462.2412 -482.5806 L
3462.2412 -471.5532 L
3556.5264 -471.5532 L
3556.5264 -565.8384 L
3545.499 -565.8384 L
3545.499 -490.3003 L
3466.1074 -569.6987 L
3458.3809 -561.979 L
3537.7822 -482.5806 l
f3552.666 -677.7661 m
3473.2715 -598.3706 L
3473.2715 -673.9097 L
3462.2412 -673.9097 L
3462.2412 -579.6211 L
3556.5264 -579.6211 L
3556.5264 -590.6479 L
3480.9902 -590.6479 L
3560.3926 -670.0469 L
3552.666 -677.7661 l
f*U
*u
626.7937 -1748.416 m
592.2288 -1748.416 563.6335 -1722.0591 559.906 -1688.4878 c
524.594 -1688.4878 L
506.6917 -1688.4878 492.2678 -1674.0674 492.2678 -1656.165 c
492.2678 -1594.2476 L
467.1541 -1630.5498 L
454.969 -1622.0986 L
493.5134 -1565.9009 L
505.947 -1565.9009 L
544.4856 -1622.0986 L
532.304 -1630.5498 L
507.1868 -1594.2476 L
507.1868 -1656.165 L
507.1868 -1665.8618 515.1428 -1673.5688 524.594 -1673.5688 c
559.906 -1673.5688 L
563.6335 -1639.7515 592.2288 -1613.6411 626.7937 -1613.6411 c
664.0925 -1613.6411 694.1824 -1643.731 694.1824 -1681.0298 c
694.1824 -1718.3286 664.0925 -1748.416 626.7937 -1748.416 c
f1 D
626.7937 -1628.5601 m
597.949 -1628.5601 574.3264 -1651.936 574.3264 -1681.0298 c
574.3264 -1709.8745 597.949 -1733.4966 626.7937 -1733.4966 c
655.887 -1733.4966 679.2576 -1709.8745 679.2576 -1681.0298 c
679.2576 -1651.936 655.887 -1628.5601 626.7937 -1628.5601 c
f*U
*u
0 D
574.4331 -980.4917 m
448.4761 -1041.1914 L
574.4331 -830.8784 L
700.6753 -1041.1914 L
574.4331 -980.4917 l
f1 D
574.4331 -864.2231 m
492.3608 -1001.0112 L
574.4331 -961.3989 L
656.5024 -1001.0112 L
574.4331 -864.2231 l
f*U
*u
329.3201 -1016.3364 m
214.4714 -832.584 L
99.6284 -1016.3364 L
214.4714 -855.5547 L
329.3201 -1016.3364 L
f153.9507 -1039.4858 m
214.5908 -1000.2085 L
274.998 -1039.4858 L
214.5908 -919.3613 L
153.9507 -1039.4858 L
f*U
*u
329.3188 -1744.6714 m
214.4731 -1560.916 L
99.6294 -1744.6714 L
214.4731 -1606.8574 L
329.3188 -1744.6714 L
f140.9741 -1753.4014 m
214.4731 -1665.2012 L
287.9744 -1753.4014 L
214.4731 -1635.7979 L
140.9741 -1753.4014 L
f*U
*u
0 D
935.5933 -2116.3838 m
874.7637 -2116.3838 825.4766 -2067.0913 825.4766 -2006.2637 c
825.4766 -1945.4365 874.7637 -1896.144 935.5933 -1896.144 c
996.4175 -1896.144 1045.71 -1945.4365 1045.71 -2006.2637 c
1045.71 -2067.0913 996.4175 -2116.3838 935.5933 -2116.3838 c
f866.3745 -2047.4243 m
871.8799 -2019.896 L
833.6001 -2019.896 L
833.6001 -1992.6279 L
871.8799 -1992.6279 L
866.3745 -1965.0972 L
919.8569 -2006.2637 L
866.3745 -2047.4243 l
f1 D
935.5933 -1906.6313 m
880.5352 -1906.6313 835.9604 -1951.2021 835.9604 -2006.2637 c
835.9604 -2061.3188 880.5352 -2105.8936 935.5933 -2105.8936 c
990.6519 -2105.8936 1035.2227 -2061.3188 1035.2227 -2006.2637 c
1035.2227 -1951.2021 990.6519 -1906.6313 935.5933 -1906.6313 c
f0 D
999.3003 -2019.896 m
1004.8062 -2047.4243 L
951.3208 -2006.2637 L
1004.8062 -1965.0972 L
999.3003 -1992.6279 L
1037.5806 -1992.6279 L
1037.5806 -2019.896 L
999.3003 -2019.896 l
f*U
*u
2487.2256 -1656.3555 m
2487.2256 -1694.7852 L
2468.0137 -1694.7852 L
2468.0137 -1663.4043 L
2385.4004 -1569.9033 L
2385.4004 -1784.4404 L
2366.1885 -1784.4404 L
2366.1885 -1569.9033 L
2283.8926 -1663.4043 L
2283.8926 -1694.7852 L
2264.6855 -1694.7852 L
2264.6855 -1656.3555 L
2375.793 -1529.877 L
2487.2256 -1656.3555 l
f*U
*u
2060.4922 -2070.0024 m
2057.2759 -2070.0024 L
2044.1802 -2056.9116 L
2044.1802 -2053.6958 L
2080.2451 -2017.6343 L
1926.3511 -2017.6343 L
1962.4126 -2053.6958 L
1962.4126 -2056.9116 L
1949.3223 -2070.0024 L
1946.104 -2070.0024 L
1884.0913 -2007.9873 L
1884.0913 -2004.5439 L
1946.104 -1942.5259 L
1949.3223 -1942.5259 L
1962.4126 -1955.6162 L
1962.4126 -1958.8325 L
1926.3511 -1994.6636 L
2080.2451 -1994.6636 L
2044.1802 -1958.8325 L
2044.1802 -1955.6162 L
2057.2759 -1942.5259 L
2060.4922 -1942.5259 L
2122.5078 -2004.5439 L
2122.5078 -2007.9873 L
2060.4922 -2070.0024 l
f1 D
2058.8843 -1947.3496 m
2049.0068 -1957.2246 L
2087.3638 -1995.354 L
2085.7559 -1999.2598 L
1920.8374 -1999.2598 L
1919.2305 -1995.354 L
1957.5894 -1957.2246 L
1947.7119 -1947.3496 L
1888.9146 -2006.1465 L
1947.7119 -2064.9512 L
1957.5894 -2055.3037 L
1919.2305 -2017.1743 L
1920.8374 -2013.041 L
2085.7559 -2013.041 L
2087.3638 -2017.1743 L
2049.0068 -2055.3037 L
2058.8843 -2064.9512 L
2117.6836 -2006.1465 L
2058.8843 -1947.3496 l
f*U
*u
0 D
849.2095 -1664.1816 m
847.5708 -1668.3945 L
886.4307 -1707.2568 L
876.603 -1717.0894 L
816.6675 -1657.1548 L
876.603 -1597.2275 L
886.4307 -1607.292 L
847.5708 -1646.1543 L
849.2095 -1650.1353 L
919.4412 -1650.1353 L
919.4412 -1664.1816 L
849.2095 -1664.1816 l
f926.4631 -1664.1816 m
926.4631 -1650.1353 L
944.7244 -1650.1353 L
944.7244 -1664.1816 L
926.4631 -1664.1816 l
f994.5894 -1717.0894 m
984.519 -1707.2568 L
1023.6165 -1668.3945 L
1021.9775 -1664.1816 L
951.7458 -1664.1816 L
951.7458 -1650.1353 L
1021.9775 -1650.1353 L
1023.6165 -1646.1543 L
984.519 -1607.292 L
994.5894 -1597.2275 L
1054.5193 -1657.1548 L
994.5894 -1717.0894 l
f*U
*u
1281.001 -1739.5283 m
1269.2163 -1728.0176 L
1319.9287 -1677.3057 L
1314.9951 -1665.2432 L
1199.3184 -1665.2432 L
1199.3184 -1648.7964 L
1314.9951 -1648.7964 L
1319.9287 -1637.0083 L
1269.2163 -1586.2993 L
1281.001 -1574.5083 L
1363.2427 -1657.021 L
1281.001 -1739.5283 l
f1379.4146 -1755.9775 m
1379.4146 -1558.3394 L
1395.8647 -1558.3394 L
1395.8647 -1755.9775 L
1379.4146 -1755.9775 l
f*U
*u
1698.1284 -1714.499 m
1520.6255 -1714.499 L
1606.6338 -1657.1602 L
1520.6255 -1599.8179 L
1698.1284 -1599.8179 L
1784.1396 -1657.1602 L
1698.1284 -1714.499 l
f1 D
1693.3892 -1614.7754 m
1569.9878 -1614.7754 L
1633.5586 -1657.1602 L
1569.9878 -1699.541 L
1693.3892 -1699.541 L
1756.9658 -1657.1602 L
1693.3892 -1614.7754 l
f*U
*u
0 D
2039.8447 -1745.6543 m
2017.2285 -1745.6543 1997.2314 -1735.8271 1983.4644 -1720.751 c
1983.4644 -1788.2686 L
1963.7988 -1788.2686 L
1963.7988 -1583.7393 L
1949.3794 -1577.8408 L
1901.856 -1625.3643 L
1888.0889 -1611.6016 L
1973.6338 -1526.0488 L
2058.8579 -1611.6016 L
2045.0869 -1625.3643 L
1997.5596 -1577.8408 L
1983.4644 -1583.7393 L
1983.4644 -1669.6162 L
1983.4644 -1700.7539 2008.7075 -1725.9893 2039.8447 -1725.9893 c
2118.5103 -1725.9893 L
2118.5103 -1745.6543 L
2039.8447 -1745.6543 l
f*U
*u
1306.124 -1999.5259 m
1378.5859 -2099.2368 L
1380.3853 -2105.8257 L
1379.7817 -2108.5215 L
1376.4893 -2114.5068 L
1370.2007 -2119.2988 L
1363.3159 -2121.0986 L
1360.6201 -2120.7944 L
1354.6318 -2117.2026 L
1300.1357 -2041.7417 L
1294.7437 -2041.7417 L
1240.5474 -2117.2026 L
1234.5557 -2120.7944 L
1231.8628 -2121.0986 L
1224.9814 -2119.2988 L
1218.686 -2114.5068 L
1215.3936 -2108.5215 L
1214.7974 -2105.8257 L
1216.5933 -2099.2368 L
1289.0586 -1999.5259 L
1296.543 -1995.9331 L
1298.6362 -1995.9331 L
1306.124 -1999.5259 l
f1305.8242 -1895.0225 m
1398.0508 -2014.499 L
1399.8467 -2021.0869 L
1399.2466 -2024.0796 L
1395.9546 -2030.0649 L
1389.666 -2034.8599 L
1383.0742 -2036.6567 L
1380.085 -2036.353 L
1374.0967 -2032.7637 L
1300.1357 -1936.6455 L
1294.7437 -1936.6455 L
1220.7817 -2032.7637 L
1214.7974 -2036.353 L
1212.1016 -2036.6567 L
1205.5088 -2034.8599 L
1199.2275 -2030.0649 L
1195.9282 -2024.0796 L
1195.3359 -2021.0869 L
1197.125 -2014.499 L
1289.355 -1895.0225 L
1296.2397 -1891.4297 L
1298.939 -1891.4297 L
1305.8242 -1895.0225 l
f*U
*u
2666.1357 -1711.3062 m
2673.377 -1675.1011 L
2622.689 -1675.1011 L
2622.689 -1639.2153 L
2673.377 -1639.2153 L
2666.1357 -1603.0107 L
2736.6489 -1657.1563 L
2666.1357 -1711.3062 l
f2799.9243 -1675.1011 m
2807.1626 -1711.3062 L
2736.6489 -1657.1563 L
2807.1626 -1603.0107 L
2799.9243 -1639.2153 L
2850.605 -1639.2153 L
2850.605 -1675.1011 L
2799.9243 -1675.1011 l
f*U
*u
3178.0308 -2072.6802 m
3178.0308 -2132.5449 L
3149.3394 -2132.5449 L
3102.5679 -2085.7769 L
3094.4653 -2085.7769 L
3047.6909 -2132.5449 L
3019.0063 -2132.5449 L
3019.0063 -2072.6802 L
3086.98 -2004.7036 L
3110.0571 -2004.7036 L
3178.0308 -2072.6802 l
f1 D
3094.4653 -2023.4146 m
3037.7144 -2080.1626 L
3037.7144 -2113.8369 L
3040.2095 -2113.8369 L
3086.98 -2067.0659 L
3110.0571 -2067.0659 L
3156.8247 -2113.8369 L
3159.3228 -2113.8369 L
3159.3228 -2080.1626 L
3102.5679 -2023.4146 L
3094.4653 -2023.4146 l
f0 D
3209.2095 -1979.1387 m
3209.2095 -2039.0024 L
3180.522 -2039.0024 L
3102.5679 -1961.0518 L
3094.4653 -1961.0518 L
3016.5151 -2039.0024 L
2987.8276 -2039.0024 L
2987.8276 -1979.1387 L
3086.98 -1879.9829 L
3110.0571 -1879.9829 L
3209.2095 -1979.1387 l
f1 D
3094.4653 -1898.6938 m
3006.5347 -1986.6211 L
3006.5347 -2020.2983 L
3009.0298 -2020.2983 L
3086.98 -1942.3447 L
3110.0571 -1942.3447 L
3188.0073 -2020.2983 L
3190.4985 -2020.2983 L
3190.4985 -1986.6211 L
3102.5679 -1898.6938 L
3094.4653 -1898.6938 l
f*U
*u
0 D
3373.5 -2021.1006 m
3379.4893 -2051.0425 L
3321.3037 -2006.2642 L
3379.4893 -1961.4863 L
3373.5 -1991.4312 L
3415.1357 -1991.4312 L
3415.1357 -2021.1006 L
3373.5 -2021.1006 l
f3441.0947 -2120.3477 m
3441.0947 -1892.1807 L
3469.6152 -1892.1807 L
3469.6152 -2120.3477 L
3441.0947 -2120.3477 l
f3531.2188 -2051.0425 m
3537.209 -2021.1006 L
3495.5674 -2021.1006 L
3495.5674 -1991.4312 L
3537.209 -1991.4312 L
3531.2188 -1961.4863 L
3589.4053 -2006.2642 L
3531.2188 -2051.0425 l
f*U
*u
2797.2793 -2063.4746 m
2797.2793 -2145.7222 L
2736.6455 -2054.7715 L
2676.0146 -2145.7222 L
2676.0146 -2063.4746 L
2736.6455 -1972.52 L
2797.2793 -2063.4746 l
f1 D
2691.832 -2068.479 m
2691.832 -2093.5239 L
2736.6455 -2026.2998 L
2781.4624 -2093.5239 L
2781.4624 -2068.479 L
2736.6455 -2001.2554 L
2691.832 -2068.479 l
f0 D
2797.2793 -1957.7529 m
2797.2793 -2039.7402 L
2736.6455 -1948.793 L
2676.0146 -2039.7402 L
2676.0146 -1957.7529 L
2736.6455 -1866.8057 L
2797.2793 -1957.7529 l
f1 D
2691.832 -1962.5034 m
2691.832 -1987.5449 L
2736.6455 -1920.3218 L
2781.4624 -1987.5449 L
2781.4624 -1962.5034 L
2736.6455 -1895.2769 L
2691.832 -1962.5034 l
f*U
*u
0 D
3227.3145 -1735.6484 m
3183.0967 -1735.6484 L
3174.7646 -1730.8457 L
3098.5225 -1602.375 L
3022.2686 -1730.8457 L
3013.9404 -1735.6484 L
2969.7275 -1735.6484 L
2960.1182 -1735.6484 L
2960.1182 -1716.4277 L
2969.7275 -1716.4277 L
3008.4912 -1716.4277 L
3090.1904 -1578.668 L
3106.8516 -1578.668 L
3188.5449 -1716.4277 L
3227.3145 -1716.4277 L
3236.9189 -1716.4277 L
3236.9189 -1735.6484 L
3227.3145 -1735.6484 l
f*U
*u
1 D
323.8652 -475.6113 m
105.0828 -475.6113 L
90.0701 -475.6113 77.9009 -487.7808 77.9009 -502.7932 C
77.9009 -642.6694 L
77.9009 -657.6821 90.0701 -669.8513 105.0828 -669.8513 C
323.8652 -669.8513 L
338.877 -669.8513 351.0474 -657.6821 351.0474 -642.6694 C
351.0474 -502.7932 L
351.0474 -487.7808 338.877 -475.6113 323.8652 -475.6113 C
f0 D
303.5688 -620.6248 m
300.0056 -620.6248 L
297.832 -619.4365 L
256.9067 -560.3203 L
252.1606 -558.1467 L
249.5908 -558.1467 L
244.8447 -560.3203 L
203.9192 -619.4365 L
201.7432 -620.6248 L
198.1853 -620.6248 L
196.801 -617.6567 L
234.3662 -562.4949 L
235.5547 -561.7046 L
242.2764 -558.3428 L
243.4604 -558.1467 L
249.197 -554.7849 L
252.7549 -554.7849 L
258.0933 -558.1467 L
259.4766 -558.3428 L
266.1968 -561.7046 L
267.385 -562.4949 L
304.9487 -617.6567 L
303.5688 -620.6248 L
f303.5688 -581.4783 m
300.0056 -581.4783 L
297.832 -580.4895 L
256.9067 -521.3716 L
252.1606 -518.9968 L
249.5908 -518.9968 L
244.8447 -521.3716 L
203.9192 -580.4895 L
201.7432 -581.4783 L
198.1853 -581.4783 L
196.801 -578.7097 L
234.3662 -523.5479 L
235.5547 -522.7559 L
242.2764 -519.3958 L
243.4604 -518.9968 L
249.197 -515.8381 L
252.7549 -515.8381 L
258.0933 -518.9968 L
259.4766 -519.3958 L
266.1968 -522.7559 L
267.385 -523.5479 L
304.9487 -578.7097 L
303.5688 -581.4783 L
f*U
*u
822.1924 -1383.3477 m
888.9995 -1249.7222 L
855.1631 -1215.8867 L
855.1631 -1248.8564 L
846.4878 -1248.8564 L
846.4878 -1201.1382 L
894.2075 -1201.1382 L
894.2075 -1209.8159 L
861.2363 -1209.8159 L
899.4146 -1247.9902 L
836.0757 -1374.6641 L
1039.1016 -1374.6641 L
975.7686 -1247.9902 L
1013.9468 -1209.8159 L
980.9761 -1209.8159 L
980.9761 -1201.1382 L
1028.6958 -1201.1382 L
1028.6958 -1248.8564 L
1020.02 -1248.8564 L
1020.02 -1215.8867 L
986.1748 -1249.7222 L
1052.9907 -1383.3477 L
822.1924 -1383.3477 l
f865.5786 -1361.6514 m
937.5903 -1217.6279 L
1009.605 -1361.6514 L
865.5786 -1361.6514 l
f1 D
937.5903 -1236.7114 m
879.459 -1352.9736 L
995.7246 -1352.9736 L
937.5903 -1236.7114 l
f*U
*u
0 D
214.4773 -1417.5918 m
214.4773 -1411.4805 L
222.427 -1411.4805 L
119.698 -1308.7539 L
119.698 -1261.6719 L
119.698 -1209.3896 162.197 -1166.8936 214.4773 -1166.8936 c
266.7581 -1166.8936 309.2502 -1209.3896 309.2502 -1261.6719 c
309.2502 -1292.2432 L
303.1384 -1292.2432 L
303.1384 -1261.6719 L
303.1384 -1212.752 263.3909 -1173.0068 214.4773 -1173.0068 c
165.5574 -1173.0068 125.8123 -1212.752 125.8123 -1261.6719 c
125.8123 -1306.3086 L
226.7034 -1407.1982 L
226.7034 -1399.249 L
232.821 -1399.249 L
232.821 -1417.5918 L
214.4773 -1417.5918 l
f260.3367 -1417.5918 m
260.3367 -1411.4805 L
268.283 -1411.4805 L
150.2742 -1293.4678 L
150.2742 -1261.6719 L
150.2742 -1226.2031 179.0115 -1197.4668 214.4773 -1197.4668 c
249.9426 -1197.4668 278.6809 -1226.2031 278.6809 -1261.6719 c
278.6809 -1292.2432 L
272.5623 -1292.2432 L
272.5623 -1261.6719 L
272.5623 -1229.5674 246.5754 -1203.5781 214.4773 -1203.5781 c
182.3723 -1203.5781 156.3855 -1229.5674 156.3855 -1261.6719 c
156.3855 -1291.0244 L
272.5623 -1407.1982 L
272.5623 -1399.249 L
278.6809 -1399.249 L
278.6809 -1417.5918 L
260.3367 -1417.5918 l
f260.3367 -1371.7354 m
260.3367 -1365.6182 L
268.283 -1365.6182 L
180.8435 -1278.1826 L
180.8435 -1261.6719 L
180.8435 -1243.0186 195.824 -1228.042 214.4773 -1228.042 c
233.1238 -1228.042 248.1047 -1243.0186 248.1047 -1261.6719 c
248.1047 -1292.2432 L
241.9934 -1292.2432 L
241.9934 -1261.6719 L
241.9934 -1246.3828 229.761 -1234.1533 214.4773 -1234.1533 c
199.1877 -1234.1533 186.9558 -1246.3828 186.9558 -1261.6719 c
186.9558 -1275.7334 L
272.5623 -1361.3418 L
272.5623 -1353.3916 L
278.6809 -1353.3916 L
278.6809 -1371.7354 L
260.3367 -1371.7354 l
f*U
*u
2631.0503 -1296.8975 m
2620.814 -1296.8975 2612.4399 -1305.271 2612.4399 -1315.498 c
2612.4399 -1325.7383 2620.814 -1334.1089 2631.0503 -1334.1089 c
2759.438 -1334.1089 L
2744.0845 -1318.7593 L
2750.6001 -1312.25 L
2777.1187 -1338.7612 L
2750.6001 -1365.2749 L
2744.0845 -1358.7656 L
2759.438 -1343.4219 L
2631.0503 -1343.4219 L
2615.6978 -1343.4219 2603.1401 -1330.8535 2603.1401 -1315.498 c
2603.1401 -1300.1465 2615.6978 -1287.5859 2631.0503 -1287.5859 c
2805.9614 -1287.5859 L
2790.6069 -1272.2363 L
2797.1187 -1265.7212 L
2823.6353 -1292.2451 L
2797.1187 -1318.7593 L
2790.6069 -1312.25 L
2805.9614 -1296.8975 L
2631.0503 -1296.8975 l
f2679.4302 -1250.3755 m
2657.564 -1272.2363 L
2651.0522 -1265.7212 L
2675.7046 -1241.0771 L
2852.4741 -1241.0771 L
2837.1294 -1225.7188 L
2843.6421 -1219.2109 L
2870.1538 -1245.7236 L
2843.6421 -1272.2363 L
2837.1294 -1265.7212 L
2852.4741 -1250.3755 L
2679.4302 -1250.3755 l
f*U
*u
2003.2964 -1332.521 m
1885.0098 -1214.2246 L
1891.4541 -1207.7842 L
2003.2964 -1319.6328 L
2115.147 -1207.7842 L
2121.5894 -1214.2246 L
2003.2964 -1332.521 l
f1888.2334 -1376.7017 m
1888.2334 -1367.5073 L
2118.3662 -1367.5073 L
2118.3662 -1376.7017 L
1888.2334 -1376.7017 l
f2003.2964 -1263.4761 m
1954.0513 -1214.2246 L
1960.4956 -1207.7842 L
2003.2964 -1250.5947 L
2046.1055 -1207.7842 L
2052.5479 -1214.2246 L
2003.2964 -1263.4761 l
f*U
*u
1264.061 -455.3723 m
1264.061 -488.9021 L
1230.5269 -488.9021 L
1230.5269 -455.3723 L
1264.061 -455.3723 l
f1264.061 -656.5613 m
1264.061 -690.0906 L
1230.5269 -690.0906 L
1230.5269 -656.5613 L
1264.061 -656.5613 l
f1297.5938 -488.9021 m
1297.5938 -522.4363 L
1264.061 -522.4363 L
1264.061 -488.9021 L
1297.5938 -488.9021 l
f1297.5938 -623.0315 m
1297.5938 -656.5613 L
1264.061 -656.5613 L
1264.061 -623.0315 L
1297.5938 -623.0315 l
f1331.1216 -522.4363 m
1331.1216 -555.9661 L
1297.5938 -555.9661 L
1297.5938 -522.4363 L
1331.1216 -522.4363 l
f1331.1216 -589.4968 m
1331.1216 -623.0315 L
1297.5938 -623.0315 L
1297.5938 -589.4968 L
1331.1216 -589.4968 l
f1364.6563 -555.9661 m
1364.6563 -589.4968 L
1331.1216 -589.4968 L
1331.1216 -555.9661 L
1364.6563 -555.9661 l
f*U
*u
2271.7568 -2082.042 m
2271.7568 -2100.9902 L
2252.8135 -2100.9902 L
2252.8135 -2025.2041 L
2366.478 -1911.5381 L
2366.478 -1987.3159 L
2271.7568 -2082.042 l
f2480.1558 -2100.9902 m
2480.1558 -2082.042 L
2385.4277 -1987.3159 L
2385.4277 -1911.5381 L
2499.0972 -2025.2041 L
2499.0972 -2100.9902 L
2480.1558 -2100.9902 l
f*U
*u
3342.6616 -955.9214 m
3342.6616 -916.1484 L
3369.1802 -916.1484 L
3369.1802 -889.6304 L
3395.6934 -889.6304 L
3435.4673 -929.4067 L
3435.4673 -942.6631 L
3395.6934 -982.4355 L
3369.1802 -982.4355 L
3369.1802 -955.9214 L
3342.6616 -955.9214 l
f3461.9858 -916.1484 m
3448.7285 -916.1484 L
3408.9507 -876.3691 L
3408.9507 -849.8579 L
3435.4673 -849.8579 L
3435.4673 -823.3398 L
3475.2417 -823.3398 L
3475.2417 -849.8579 L
3501.7598 -849.8579 L
3501.7598 -876.3691 L
3461.9858 -916.1484 l
f3435.4673 -1048.73 m
3435.4673 -1022.2119 L
3408.9507 -1022.2119 L
3408.9507 -995.6938 L
3448.7285 -955.9214 L
3461.9858 -955.9214 L
3501.7598 -995.6938 L
3501.7598 -1022.2119 L
3475.2417 -1022.2119 L
3475.2417 -1048.73 L
3435.4673 -1048.73 l
f3515.0156 -982.4355 m
3475.2417 -942.6631 L
3475.2417 -929.4067 L
3515.0156 -889.6304 L
3541.5342 -889.6304 L
3541.5342 -916.1484 L
3568.0469 -916.1484 L
3568.0469 -955.9214 L
3541.5342 -955.9214 L
3541.5342 -982.4355 L
3515.0156 -982.4355 l
f*U
*u
1528.0137 -924.731 m
1528.0137 -902.1128 L
1618.4644 -811.6655 L
1641.0737 -811.6655 L
1641.0737 -902.1128 L
1618.4644 -924.731 l
1528.0137 -924.731 L
f1 D
1528.0137 -947.3447 m
1528.0137 -969.9546 L
1618.4644 -1060.4043 L
1641.0737 -1060.4043 L
1641.0737 -969.9546 L
1618.4644 -947.3447 l
1528.0137 -947.3447 L
f1776.7515 -924.731 m
1776.7515 -902.1128 L
1686.3032 -811.6655 L
1663.6855 -811.6655 L
1663.6855 -902.1128 L
1686.3032 -924.731 l
1776.7515 -924.731 L
f0 D
1776.7515 -947.3447 m
1776.7515 -969.9546 L
1686.3032 -1060.4043 L
1663.6855 -1060.4043 L
1663.6855 -969.9546 L
1686.3032 -947.3447 l
1776.7515 -947.3447 L
f*U
*u
1926.71 -1070.0664 m
1926.71 -1031.7686 L
2003.2959 -955.1738 L
2022.4424 -955.1738 L
2022.4424 -916.8848 L
2003.2959 -916.8848 L
1926.71 -840.2949 L
1926.71 -802.0029 L
1965.0059 -802.0029 L
2060.7383 -897.7402 L
2060.7383 -916.8848 L
2079.8887 -916.8848 L
2079.8887 -955.1738 L
2060.7383 -955.1738 L
2060.7383 -974.3242 L
2038.1484 -996.9229 2056.1426 -978.9238 1965.0059 -1070.0664 C
1926.71 -1070.0664 l
f*U
*u
2682.9912 -884.2451 m
2641.5654 -925.6797 L
2620.8452 -925.6797 L
2662.2808 -884.2451 L
2682.9912 -884.2451 l
f1 D
2624.5732 -946.3955 m
2666.0073 -987.8242 L
2686.728 -987.8242 L
2645.2925 -946.3955 L
2624.5732 -946.3955 l
f0 D
2724.4268 -884.2451 m
2682.9912 -925.6797 L
2662.2808 -925.6797 L
2703.7124 -884.2451 L
2724.4268 -884.2451 l
f1 D
2666.0073 -946.3955 m
2707.4404 -987.8242 L
2728.1538 -987.8242 L
2686.728 -946.3955 L
2666.0073 -946.3955 l
f0 D
2765.8584 -884.2451 m
2724.4268 -925.6797 L
2703.7124 -925.6797 L
2745.1421 -884.2451 L
2765.8584 -884.2451 l
f1 D
2707.4404 -946.3955 m
2748.8755 -987.8242 L
2769.5903 -987.8242 L
2728.1538 -946.3955 L
2707.4404 -946.3955 l
f0 D
2807.2891 -884.2451 m
2765.8584 -925.6797 L
2745.1421 -925.6797 L
2786.5737 -884.2451 L
2807.2891 -884.2451 l
f1 D
2748.8755 -946.3955 m
2790.3018 -987.8242 L
2811.0161 -987.8242 L
2769.5903 -946.3955 L
2748.8755 -946.3955 l
f0 D
2848.7212 -884.2451 m
2807.2891 -925.6797 L
2786.5737 -925.6797 L
2828.0093 -884.2451 L
2848.7212 -884.2451 l
f1 D
2790.3018 -946.3955 m
2831.7368 -987.8242 L
2852.4492 -987.8242 L
2811.0161 -946.3955 L
2790.3018 -946.3955 l
f*U
*u
0 D
3177.2412 -902.8926 m
3011.5171 -902.8926 L
3011.5171 -936.04 L
3160.6699 -936.04 L
3160.6699 -1002.3267 L
3028.0889 -1002.3267 L
3028.0889 -985.7559 L
3144.0933 -985.7559 L
3144.0933 -952.6084 L
2994.9404 -952.6084 L
2994.9404 -886.3154 L
3177.2412 -886.3154 L
3177.2412 -869.7432 L
3202.0967 -894.6035 L
3177.2412 -919.4629 L
3177.2412 -902.8926 l
f*U
*u
2287.4082 -1014.7466 m
2248.0537 -1014.7466 L
2248.0537 -975.3901 L
2346.439 -877.0054 L
2346.439 -857.3232 L
2366.1143 -857.3232 L
2366.1143 -936.0332 L
2287.4082 -1014.7466 l
f2464.5024 -1014.7466 m
2385.7964 -936.0332 L
2385.7964 -857.3232 L
2405.4692 -857.3232 L
2405.4692 -877.0054 L
2503.8569 -975.3901 L
2503.8569 -1014.7466 L
2464.5024 -1014.7466 l
f*U
*u
1941.8906 -695.5459 m
1941.8906 -642.915 L
1959.4404 -485.0049 L
1994.5254 -449.917 L
1994.5254 -642.915 L
1941.8906 -695.5459 l
f2012.0674 -642.915 m
2012.0674 -449.917 L
2047.1602 -485.0049 L
2064.7085 -642.915 L
2064.7085 -695.5459 L
2012.0674 -642.915 l
f*U
*u
1208.5493 -1049.3608 m
1208.5493 -822.709 L
1257.1167 -822.709 L
1257.1167 -1049.3608 L
1208.5493 -1049.3608 l
f1321.8779 -919.8452 m
1321.8779 -1049.3608 L
1273.3047 -1049.3608 L
1273.3047 -903.6602 L
1354.2529 -822.709 L
1386.6338 -822.709 L
1386.6338 -855.0854 L
1321.8779 -919.8452 l
f*U
*u
1255.8496 -1251.457 m
1228.8906 -1251.457 1206.8379 -1273.5098 1206.8379 -1300.4707 c
1206.8379 -1327.4277 1228.8906 -1349.4844 1255.8496 -1349.4844 c
1395.8877 -1349.4844 L
1395.8877 -1356.4834 L
1255.8496 -1356.4834 L
1225.04 -1356.4834 1199.833 -1331.2773 1199.833 -1300.4707 c
1199.833 -1269.6602 1225.04 -1244.4541 1255.8496 -1244.4541 c
1404.9902 -1244.4541 L
1393.4365 -1232.9053 L
1398.3369 -1228.0029 L
1418.292 -1247.9561 L
1398.3369 -1267.9092 L
1393.4365 -1263.0156 L
1404.9902 -1251.457 L
1255.8496 -1251.457 l
f*U
*u
1561.812 -1410.7031 m
1555.3594 -1404.2539 L
1667.3672 -1292.2461 L
1555.3594 -1180.2451 L
1561.812 -1173.7822 L
1680.2671 -1292.2461 L
1561.812 -1410.7031 l
f1630.9512 -1410.7031 m
1624.499 -1404.2539 L
1736.5 -1292.2461 L
1624.499 -1180.2451 L
1630.9512 -1173.7822 L
1749.4058 -1292.2461 L
1630.9512 -1410.7031 l
f*U
*u
2444.8408 -1384.748 m
2307.0684 -1384.748 L
2272.4277 -1384.748 2244.084 -1356.4111 2244.084 -1321.7666 c
2244.084 -1262.7129 L
2244.084 -1228.0742 2272.4277 -1199.7383 2307.0684 -1199.7383 c
2366.1143 -1199.7383 L
2366.1143 -1207.6074 L
2307.0684 -1207.6074 L
2276.7559 -1207.6074 2251.9619 -1232.4082 2251.9619 -1262.7129 c
2251.9619 -1321.7666 L
2251.9619 -1352.0781 2276.7559 -1376.877 2307.0684 -1376.877 c
2444.8408 -1376.877 L
2475.1533 -1376.877 2499.9541 -1352.0781 2499.9541 -1321.7666 c
2499.9541 -1264.2891 L
2448.7813 -1213.125 L
2448.7813 -1223.3516 L
2440.9092 -1223.3516 L
2440.9092 -1199.7383 L
2464.5225 -1199.7383 L
2464.5225 -1207.6074 L
2454.291 -1207.6074 L
2507.8262 -1261.1416 L
2507.8262 -1321.7666 l
2507.8262 -1356.4111 2479.4824 -1384.748 2444.8408 -1384.748 c
f2444.8408 -1365.0664 m
2307.0684 -1365.0664 L
2283.0547 -1365.0664 2263.7627 -1345.7773 2263.7627 -1321.7666 c
2263.7627 -1262.7129 L
2263.7627 -1238.707 2283.0547 -1219.4199 2307.0684 -1219.4199 c
2366.1143 -1219.4199 L
2366.1143 -1227.293 L
2307.0684 -1227.293 L
2287.3896 -1227.293 2271.6406 -1243.0371 2271.6406 -1262.7129 c
2271.6406 -1321.7666 L
2271.6406 -1341.4473 2287.3896 -1357.1924 2307.0684 -1357.1924 c
2444.8408 -1357.1924 L
2464.5225 -1357.1924 2480.2686 -1341.4473 2480.2686 -1321.7666 c
2480.2686 -1283.9746 L
2409.4131 -1213.125 L
2409.4131 -1223.3516 L
2401.5439 -1223.3516 L
2401.5439 -1199.7383 L
2425.1621 -1199.7383 L
2425.1621 -1207.6074 L
2414.9238 -1207.6074 L
2488.1455 -1280.8291 L
2488.1455 -1321.7666 l
2488.1455 -1345.7773 2468.8574 -1365.0664 2444.8408 -1365.0664 c
f2444.8408 -1345.3799 m
2307.0684 -1345.3799 L
2294.0781 -1345.3799 2283.4492 -1334.751 2283.4492 -1321.7666 c
2283.4492 -1262.7129 L
2283.4492 -1249.7275 2294.0781 -1239.1045 2307.0684 -1239.1045 c
2366.1143 -1239.1045 L
2366.1143 -1246.9736 L
2307.0684 -1246.9736 L
2298.4102 -1246.9736 2291.3213 -1254.0586 2291.3213 -1262.7129 c
2291.3213 -1321.7666 L
2291.3213 -1330.4277 2298.4102 -1337.5098 2307.0684 -1337.5098 c
2444.8408 -1337.5098 L
2453.5029 -1337.5098 2460.5898 -1330.4277 2460.5898 -1321.7666 c
2460.5898 -1303.6563 L
2409.4131 -1252.4766 L
2409.4131 -1262.7129 L
2401.5439 -1262.7129 L
2401.5439 -1239.1045 L
2425.1621 -1239.1045 L
2425.1621 -1246.9736 L
2414.9238 -1246.9736 L
2468.459 -1300.5107 L
2468.459 -1321.7666 l
2468.459 -1334.751 2457.834 -1345.3799 2444.8408 -1345.3799 c
f*U
*u
3007.8169 -1321.1797 m
2996.5176 -1309.8857 L
3001.1084 -1362.4751 3044.8701 -1403.4136 3098.5156 -1403.4136 c
3154.9854 -1403.4136 3200.8647 -1357.5366 3200.8647 -1301.0645 c
3207.9248 -1301.0645 L
3207.9248 -1361.4194 3158.8667 -1410.4741 3098.5156 -1410.4741 c
3040.9912 -1410.4741 2993.6963 -1366.0005 2989.46 -1309.1816 c
2977.4634 -1321.1797 L
2972.52 -1316.2373 L
2992.6387 -1296.1226 L
3012.7524 -1316.2373 L
3007.8169 -1321.1797 l
f3098.5156 -1181.0664 m
3042.0449 -1181.0664 2996.168 -1226.9482 2996.168 -1283.4194 c
2989.1104 -1283.4194 L
2989.1104 -1223.0654 3038.1646 -1174.0107 3098.5156 -1174.0107 c
3156.0464 -1174.0107 3203.333 -1218.4834 3207.5703 -1275.2983 c
3219.5688 -1263.2998 L
3224.5166 -1268.2432 L
3204.3945 -1288.3638 L
3184.2793 -1268.2432 L
3189.2212 -1263.2998 L
3200.5127 -1274.5938 l
3195.9292 -1222.0088 3152.1592 -1181.0664 3098.5156 -1181.0664 c
f*U
*u
546.1179 -1379.668 m
492.8845 -1379.668 450.0022 -1336.7856 450.0022 -1283.5522 c
450.0022 -1230.3188 492.8845 -1187.4463 546.1179 -1187.4463 c
599.3435 -1187.4463 642.2239 -1230.3188 642.2239 -1283.5522 c
634.8342 -1283.5522 L
634.8342 -1234.3896 595.28 -1194.8359 546.1179 -1194.8359 c
496.9485 -1194.8359 457.3987 -1234.3896 457.3987 -1283.5522 c
457.3987 -1332.7134 496.9485 -1372.269 546.1179 -1372.269 c
685.1072 -1372.269 L
670.3176 -1357.4844 L
685.1072 -1342.6992 L
546.1179 -1342.6992 L
513.5862 -1342.6992 486.97 -1316.0854 486.97 -1283.5522 c
486.97 -1251.0229 513.5862 -1224.4136 546.1179 -1224.4136 c
578.6458 -1224.4136 605.2581 -1251.0229 605.2581 -1283.5522 c
597.8655 -1283.5522 L
597.8655 -1255.0884 574.575 -1231.8032 546.1179 -1231.8032 c
517.6497 -1231.8032 494.3625 -1255.0884 494.3625 -1283.5522 c
494.3625 -1312.0151 517.6497 -1335.3057 546.1179 -1335.3057 c
685.1072 -1335.3057 L
670.3176 -1320.5195 L
685.1072 -1305.731 L
546.1179 -1305.731 L
533.9172 -1305.731 523.9382 -1295.7559 523.9382 -1283.5522 c
523.9382 -1271.354 533.9172 -1261.3726 546.1179 -1261.3726 c
558.3108 -1261.3726 568.2966 -1271.354 568.2966 -1283.5522 c
560.8997 -1283.5522 L
560.8997 -1275.4194 554.2473 -1268.7676 546.1179 -1268.7676 c
537.9807 -1268.7676 531.3284 -1275.4194 531.3284 -1283.5522 c
531.3284 -1291.6841 537.9807 -1298.3423 546.1179 -1298.3423 c
685.1072 -1298.3423 L
672.907 -1286.1431 L
678.0813 -1280.9658 L
699.1492 -1302.0386 L
680.6697 -1320.5195 L
699.1492 -1339.002 L
680.6697 -1357.4844 L
699.1492 -1375.9609 L
678.0813 -1397.0396 L
672.907 -1391.8662 L
685.1072 -1379.668 L
546.1179 -1379.668 l
f*U
*u
1604.8916 -667.7136 m
1604.8916 -620.2185 L
1652.3789 -620.2185 L
1652.3789 -572.7341 L
1604.8916 -572.7341 L
1604.8916 -525.2444 L
1557.3955 -525.2444 L
1557.3955 -477.7493 L
1604.8916 -477.7493 L
1604.8916 -525.2444 L
1652.3789 -525.2444 L
1652.3789 -572.7341 L
1699.873 -572.7341 L
1699.873 -525.2444 L
1747.3696 -525.2444 L
1747.3696 -667.7136 L
1604.8916 -667.7136 l
f*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
